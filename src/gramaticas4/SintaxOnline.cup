package gramaticas4;
import java_cup.runtime.Symbol;
import Pollitos.NavesCamino;
import Pollitos.ResumenTurno;
import Pollitos.DatosAcciones;
import javax.swing.JTextArea;
import interfaz.VentanaPrincipal;
import Pollitos.Turnos;
import Pollitos.AccionesOnline;
import java.util.ArrayList;

parser code {:

    public AccionesOnline online;
    public static String totalErrores;
    public JTextArea panelMensajes;
    public ArrayList<AccionesOnline> listOnline;

   public SintaxOnline(AnalizadorLexico4 lex, JTextArea panelMensajes, ArrayList<AccionesOnline> listOnline){
        super(lex);
        this.online = online;
        this.panelMensajes = panelMensajes;
        this.listOnline = listOnline;
        
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }

:}

    terminal VERDADERO, FALSO, LLAVE_A, LLAVE_B, AGRUPACION_A, AGRUPACION_B, DOS_PUNTOS, COMA, PUNTO, COMILLAS,
             MAPA, id, size, alAzar, pNeutrales, mapaCiego, acumular, NEUTRALES, mostrarNaves, mostrarEstadisticas,
             produccion, finalizacion, PLANETAS, nombre, naves, porcMuertes, PLANETAS_NEUTRALES, JUGADORES, planetas,
             tipo, HUMANO, DIFICIL, FACIL, ENTERO, DECIMAL, ID, filas, columnas, color, posX, posY, COLOR, SECUENCIAS,
             TURNO, ACCIONES, Flota, planetaOrigen, planetaDestino, noNaves, noJugadorEnvio, noJugadorAtaque, CONQUISTADO,
             turnoLlegada, verificador, IMPACTOS, navesRestantes, estado, mensaje, estadoJugador, noFlota, VIVO,
             RESUMEN, JUGANDO, FUERA, jugadorAtacante, planetaAtacante, turnoJugador, GENERAL, turno;
  
    non terminal inicio, a;

    non terminal NavesCamino c3, p1, c4, c5, c6, c7, c8, c9, c10, c11, c12;  

    non terminal ArrayList<NavesCamino> c2;
    
    non terminal ArrayList<DatosAcciones> c1, c;

    non terminal Turnos f, f1, f2, f3, p5;

    non terminal ResumenTurno e2;

    non terminal ArrayList<ResumenTurno> e, e1, p3;

    non terminal Impactos d4, d5, d6, d7, d8, d9, p2, d3;

    non terminal ArrayList<Impactos> d2;

    non terminal ArrayList<DatosImpacto> d1, d;

    non terminal AccionesOnline b, p4;

    start with inicio;

    inicio ::= a
;
    a ::= SECUENCIAS LLAVE_A b:a LLAVE_B {: if(a.getDatosAcciones()==null || a.getListResumen()==null){} else {  parser.listOnline.add(a);  } :}
;
    b ::= c:a b:e {: if(e!=null){ if(e.getDatosAcciones()==null){  if(a == null){ e.setTodoCorrecto(false); } else { e.setDatosAcciones(a); } } else { parser.totalErrores += "Sub-atributo ACCIONES en un campo SECUENCIAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | e:a b:e {: if(e!=null){ if(e.getListResumen()==null){ if(a == null){ e.setTodoCorrecto(false); } else { e.setListResumen(a); } } else { parser.totalErrores += "Sub-atributo RESUMEN en campo SECUENCIAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | COMA p4:a {: RESULT=a; :}
    | {: AccionesOnline online = new AccionesOnline(); online.setTodoCorrecto(false); RESULT=online; :}
    | error b:e {: parser.totalErrores += "Atributo en un campo SECUENCIAS sentenciado mas de una vez.\n"; e.setTodoCorrecto(false); RESULT=e; :}
;
    p4 ::= c:a b:e {: if(e!=null){ if(e.getDatosAcciones()==null){ if(a == null){ e.setTodoCorrecto(false); } else { e.setDatosAcciones(a); } } else { parser.totalErrores += "Sub-atributo ACCIONES en un campo SECUENCIAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | e:a b:e {: if(e!=null){ if(e.getListResumen()==null){ if(a == null){ e.setTodoCorrecto(false); } else { e.setListResumen(a); } } else { parser.totalErrores += "Sub-atributo RESUMEN en campo SECUENCIAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | error b:e {: parser.totalErrores += "Atributo en un campo SECUENCIAS sentenciado mas de unav vez.\n"; e.setTodoCorrecto(false);  RESULT=e; :}
;
    c ::= ACCIONES LLAVE_A c1:a LLAVE_B {: RESULT=a; :}
    | ACCIONES LLAVE_A LLAVE_B {: RESULT=new ArrayList<>(); :}
;
    c1 ::= ID:a DOS_PUNTOS AGRUPACION_A c2:b AGRUPACION_B c1:c {: if(c == null){ RESULT=null; } else { if(b == null) { RESULT=null; } else { DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b);  c.add(datos); RESULT=c; } } :}
    | ID:a DOS_PUNTOS AGRUPACION_A c2:b AGRUPACION_B {: if(b == null){ RESULT=null; } else { DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); ArrayList<DatosAcciones> listAcciones = new ArrayList<>(); listAcciones.add(datos); RESULT=listAcciones; } :}
;   

    c2 ::= Flota AGRUPACION_A c3:a AGRUPACION_B c2:e {: if(a.getNoFlota()==null){ parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getPlanetaOrigen()==null){ parser.totalErrores += "Falta de atributo planetaOrigen en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getPlanetaDestino()==null){ parser.totalErrores += "Falta de atributo planetaDestino en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getNoNaves()==null){ parser.totalErrores += "Falta de atributo noNaves en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getNoJugadorEnvio()==null){ parser.totalErrores += "Falta de atributo noJugadorEnvio en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getNoJugadorAtaque()==null){ parser.totalErrores += "Falta de atributo noJugadorAtaque en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getPorcentajeMuertes()==null){ parser.totalErrores += "Falta de atributo porcentajeMuertes en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getTurnoLlegada()==null){ parser.totalErrores += "Falta de atributo turnoLlegada en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(a.getVerificador()==null){ parser.totalErrores += "Falta de atributo verificador en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                                        if(e == null){ RESULT=null; } else {      if(a.getTodoCorrecto() == false){ RESULT=null; } else { e.add(a); RESULT=e; } } :}
    | Flota AGRUPACION_A c3:a AGRUPACION_B {: if(a.getNoFlota()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getPlanetaOrigen()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getPlanetaDestino()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getNoNaves()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getNoJugadorEnvio()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getNoJugadorAtaque()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getPorcentajeMuertes()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getTurnoLlegada()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getVerificador()==null) { parser.totalErrores += "Falta de atributo noFlota en campo FLOTA. Linea: "+aleft+" Columna: "+aright+".\n"; a.setTodoCorrecto(false); }
                                              if(a.getTodoCorrecto() == false) { RESULT=null; } else     { ArrayList<NavesCamino> listNaves = new ArrayList<>(); listNaves.add(a); RESULT=listNaves; } :}
;
    c3 ::= c4:a c3:e {: if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { parser.totalErrores += "Sub-atributo noFlota en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c5:a c3:e {: if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { parser.totalErrores += "Sub-atributo planetaOrigen en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c6:a c3:e {: if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { parser.totalErrores += "Sub-atributo planetaDestino en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c7:a c3:e {: if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { parser.totalErrores += "Sub-atributo noNaves en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c8:a c3:e {: if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { parser.totalErrores += "Sub-atributo noJugadorEnvio en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c9:a c3:e {: if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { parser.totalErrores += "Sub-atributo noJugadorAtaque en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c10:a c3:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c11:a c3:e {: if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { parser.totalErrores += "Sub-atributo turnoLlegada en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c12:a c3:e {: if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { parser.totalErrores += "Sub-atributo verificador en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | COMA p1:a {: RESULT=a; :}
    | {: NavesCamino naves = new NavesCamino(); naves.setTodoCorrecto(true); RESULT=naves; :}
    | error c3:e {: parser.totalErrores += "Atributo en campo FLOTA sentenciado de forma incorrecta.\n"; e.setTodoCorrecto(false); RESULT=e; :}
;
    p1 ::= c4:a c3:e {: if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { parser.totalErrores += "Sub-atributo noFlota en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c5:a c3:e {: if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { parser.totalErrores += "Sub-atributo planetaOrigen en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c6:a c3:e {: if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { parser.totalErrores += "Sub-atributo planetaDestino en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c7:a c3:e {: if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { parser.totalErrores += "Sub-atributo noNaves en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c8:a c3:e {: if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { parser.totalErrores += "Sub-atributo noJugadorEnvio en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c9:a c3:e {: if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { parser.totalErrores += "Sub-atributo noJugadorAtaque en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c10:a c3:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c11:a c3:e {: if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { parser.totalErrores += "Sub-atributo turnoLlegada en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | c12:a c3:e {: if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { parser.totalErrores += "Sub-atributo verificador en campo FLOTA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+".\n"; e.setTodoCorrecto(false); } } RESULT=e; :}
    | error c3:e {: parser.totalErrores += "Atributo en campo FLOTA sentenciado de forma incorrecta.\n"; e.setTodoCorrecto(false); RESULT=e; :}
;
    c4 ::= noFlota DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; :}
;
    c5 ::= planetaOrigen DOS_PUNTOS ID:a {:  NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; :}
;
    c6 ::= planetaDestino DOS_PUNTOS ID:a {: NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; :}
;
    c7 ::= noNaves DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; :}
;
    c8 ::= noJugadorEnvio DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; :}
;
    c9 ::= noJugadorAtaque DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a ); RESULT=naves; :}
;
    c10 ::= porcMuertes DOS_PUNTOS DECIMAL:a {: NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString())); RESULT=naves; :}
;
    c11 ::= turnoLlegada DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; :}
;
    c12 ::= verificador DOS_PUNTOS VERDADERO:a {: NavesCamino naves = new NavesCamino(); naves.setVerificador(false); RESULT=naves; :}
    | verificador DOS_PUNTOS FALSO:a {: NavesCamino naves = new NavesCamino(); naves.setVerificador(false); RESULT=naves; :}
;
    e ::= RESUMEN LLAVE_A e1:a LLAVE_B {: RESULT=a; :}
;
    e1 ::= e2:a e1:e {:  if(e!=null){ if(a.getTodoCorrecto() == null){ RESULT=null; } else {  e.add(a); RESULT=e; } } else { RESULT=null; } :}
    | COMA p3:a {: RESULT=a; :}
    | {: RESULT=new ArrayList<>(); :}
;
    p3 ::= e2:a e1:e {: if(e!=null){ if(a.getTodoCorrecto() == false){ RESULT=null; } else { e.add(a); RESULT=e; } } else { RESULT=null; } :}
;
    e2 ::= estado ID:a DOS_PUNTOS VERDADERO:b {: ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString()); resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; :}
    | estado ID:a DOS_PUNTOS FALSO:b {: ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(a.toString()); resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; :}
    | error e2:e {: parser.totalErrores += "Atributo en campo RESUMEN sentenciado de forma incorrecta.\n"; e.setTodoCorrecto(false); RESULT=e; :}
;
