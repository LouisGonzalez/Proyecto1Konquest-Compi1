/* The following code was generated by JFlex 1.6.1 */

package gramaticas3;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexerReplay.flex</tt>
 */
public class AnalizadorLexico3 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\10\1\74\1\10\1\10\22\0\1\10\1\0\1\26"+
    "\1\0\1\1\3\0\1\72\1\73\2\0\1\6\1\5\1\7\1\0"+
    "\1\2\11\3\1\25\6\0\1\30\1\1\1\43\1\63\1\45\1\65"+
    "\1\62\1\71\1\64\1\61\1\1\1\51\1\27\1\42\1\4\1\31"+
    "\1\70\1\50\1\52\1\47\1\46\1\67\1\1\1\55\1\56\1\1"+
    "\1\23\1\0\1\24\1\0\1\60\1\0\1\16\1\54\1\35\1\33"+
    "\1\14\1\15\1\44\1\1\1\32\1\57\1\1\1\17\1\37\1\40"+
    "\1\36\1\41\1\66\1\12\1\20\1\11\1\13\1\53\3\1\1\34"+
    "\1\21\1\0\1\22\7\0\1\74\u1fa2\0\1\74\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\1\6\1\1\5\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\23\3\1\2"+
    "\1\4\3\0\1\15\14\3\1\16\25\3\1\0\1\17"+
    "\46\3\1\0\1\20\1\3\1\21\6\3\1\22\1\23"+
    "\32\3\1\24\1\3\1\4\2\3\1\25\1\26\6\3"+
    "\1\27\3\3\1\30\12\3\1\31\5\3\1\32\1\33"+
    "\2\3\1\34\1\3\1\35\10\3\1\36\16\3\1\37"+
    "\7\3\1\40\3\3\1\41\1\3\1\42\11\3\1\43"+
    "\4\3\1\44\1\45\1\46\1\47\7\3\1\50\10\3"+
    "\1\51\4\3\1\52\11\3\1\53\1\54\1\55\3\3"+
    "\1\56\11\3\1\57\5\3\1\60\16\3\1\61\1\62"+
    "\1\63\1\3\1\64\1\3\1\65\10\3\1\66\5\3"+
    "\1\67\5\3\1\70\1\3\1\71\1\3\1\72\3\3"+
    "\1\73\10\3\1\74\1\75\1\76\1\3\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u0131\0\u016e\0\u081a\0\u016e\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\172\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\172"+
    "\0\u19f9\0\172\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\172\0\172\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5"+
    "\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u2199\0\172\0\u21d6\0\75\0\u2213"+
    "\0\u2250\0\172\0\172\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\172\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714"+
    "\0\172\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\172\0\172"+
    "\0\u2882\0\u28bf\0\u28fc\0\u2939\0\172\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\172\0\u2b5e\0\u2b9b"+
    "\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\172\0\u2eb4\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\172\0\u305f\0\u309c\0\u30d9"+
    "\0\172\0\u3116\0\172\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"+
    "\0\u3284\0\u32c1\0\u32fe\0\u333b\0\172\0\u3378\0\u33b5\0\u33f2"+
    "\0\u342f\0\172\0\172\0\u346c\0\172\0\u34a9\0\u34e6\0\u3523"+
    "\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b"+
    "\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\172\0\u3879\0\u38b6"+
    "\0\u38f3\0\u3930\0\172\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\172\0\172\0\172\0\u3b92"+
    "\0\u3bcf\0\u3c0c\0\172\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d"+
    "\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\172\0\u3e6e\0\u3eab\0\u3ee8"+
    "\0\u3f25\0\u3f62\0\172\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093"+
    "\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b"+
    "\0\u42b8\0\172\0\172\0\172\0\u42f5\0\172\0\u4332\0\172"+
    "\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a"+
    "\0\172\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b\0\172\0\u4688"+
    "\0\u46c5\0\u4702\0\u473f\0\u477c\0\172\0\u47b9\0\172\0\u47f6"+
    "\0\172\0\u4833\0\u4870\0\u48ad\0\172\0\u48ea\0\u4927\0\u4964"+
    "\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\172\0\172\0\172"+
    "\0\u4ad2\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\2\1\6\1\7"+
    "\1\10\1\11\2\3\1\12\1\13\1\14\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\3\1\30\1\3\1\31\1\32\1\33"+
    "\1\34\1\35\3\3\1\36\2\3\1\37\1\40\5\3"+
    "\1\41\1\3\1\42\1\43\1\44\1\3\1\45\1\3"+
    "\1\46\1\47\1\2\77\0\5\3\3\0\10\3\6\0"+
    "\43\3\5\0\2\50\2\0\1\51\1\52\67\0\2\5"+
    "\2\0\1\51\1\52\67\0\2\51\2\0\1\53\70\0"+
    "\2\54\101\0\1\10\65\0\5\3\3\0\1\3\1\55"+
    "\1\56\5\3\6\0\3\3\1\57\37\3\4\0\5\3"+
    "\3\0\7\3\1\60\6\0\43\3\4\0\5\3\3\0"+
    "\5\3\1\61\2\3\6\0\3\3\1\62\37\3\4\0"+
    "\5\3\3\0\6\3\1\63\1\3\6\0\6\3\1\64"+
    "\34\3\4\0\5\3\3\0\10\3\6\0\3\3\1\65"+
    "\37\3\4\0\5\3\3\0\10\3\6\0\1\3\1\66"+
    "\41\3\4\0\5\3\3\0\10\3\6\0\14\3\1\67"+
    "\26\3\4\0\5\3\3\0\10\3\6\0\22\3\1\70"+
    "\20\3\4\0\5\3\3\0\10\3\6\0\4\3\1\71"+
    "\36\3\4\0\5\3\3\0\10\3\6\0\7\3\1\72"+
    "\33\3\4\0\5\3\3\0\3\3\1\73\1\3\1\74"+
    "\2\3\6\0\7\3\1\75\33\3\4\0\5\3\3\0"+
    "\5\3\1\76\2\3\6\0\7\3\1\77\33\3\4\0"+
    "\5\3\3\0\1\3\1\100\4\3\1\101\1\3\6\0"+
    "\7\3\1\102\33\3\4\0\5\3\3\0\10\3\6\0"+
    "\16\3\1\103\24\3\4\0\3\3\1\104\1\3\3\0"+
    "\10\3\6\0\43\3\4\0\5\3\3\0\10\3\6\0"+
    "\17\3\1\105\23\3\4\0\5\3\3\0\10\3\6\0"+
    "\16\3\1\106\24\3\4\0\5\3\3\0\3\3\1\107"+
    "\4\3\6\0\43\3\4\0\5\3\3\0\10\3\6\0"+
    "\17\3\1\110\23\3\4\0\5\3\3\0\10\3\6\0"+
    "\35\3\1\111\5\3\4\0\5\3\3\0\10\3\6\0"+
    "\1\112\42\3\4\0\5\3\3\0\6\3\1\113\1\3"+
    "\6\0\1\3\1\114\41\3\4\0\5\3\3\0\10\3"+
    "\6\0\35\3\1\115\5\3\4\0\5\3\3\0\10\3"+
    "\6\0\17\3\1\116\23\3\10\0\1\117\71\0\2\50"+
    "\2\0\1\51\70\0\2\53\2\0\1\120\67\0\5\3"+
    "\3\0\2\3\1\121\5\3\6\0\43\3\4\0\5\3"+
    "\3\0\1\3\1\122\6\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\12\3\1\123\30\3\4\0\5\3"+
    "\3\0\1\124\7\3\6\0\43\3\4\0\5\3\3\0"+
    "\6\3\1\125\1\3\6\0\43\3\4\0\5\3\3\0"+
    "\6\3\1\126\1\3\6\0\11\3\1\127\31\3\4\0"+
    "\5\3\3\0\10\3\6\0\1\3\1\130\41\3\4\0"+
    "\5\3\3\0\2\3\1\131\5\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\5\3\1\132\35\3\4\0"+
    "\5\3\3\0\10\3\6\0\2\3\1\133\40\3\4\0"+
    "\5\3\3\0\10\3\6\0\14\3\1\134\26\3\4\0"+
    "\5\3\3\0\10\3\6\0\1\3\1\135\41\3\4\0"+
    "\5\3\3\0\6\3\1\136\1\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\11\3\1\137\31\3\4\0"+
    "\5\3\3\0\10\3\6\0\12\3\1\140\30\3\4\0"+
    "\5\3\3\0\7\3\1\141\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\24\3\1\142\16\3\4\0\5\3"+
    "\3\0\10\3\6\0\10\3\1\143\2\3\1\144\16\3"+
    "\1\145\3\3\1\146\4\3\4\0\5\3\3\0\10\3"+
    "\6\0\7\3\1\147\33\3\4\0\5\3\3\0\5\3"+
    "\1\150\2\3\6\0\43\3\4\0\5\3\3\0\1\3"+
    "\1\151\5\3\1\152\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\17\3\1\153\23\3\4\0\5\3\3\0"+
    "\10\3\6\0\13\3\1\154\27\3\4\0\5\3\3\0"+
    "\10\3\6\0\21\3\1\155\21\3\4\0\5\3\3\0"+
    "\10\3\6\0\14\3\1\156\26\3\4\0\5\3\3\0"+
    "\1\3\1\157\6\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\33\3\1\160\7\3\4\0\5\3\3\0"+
    "\10\3\6\0\36\3\1\161\4\3\4\0\5\3\3\0"+
    "\10\3\6\0\2\3\1\162\40\3\4\0\5\3\3\0"+
    "\10\3\6\0\7\3\1\163\33\3\4\0\5\3\3\0"+
    "\10\3\6\0\14\3\1\164\26\3\4\0\5\3\3\0"+
    "\10\3\6\0\40\3\1\165\2\3\4\0\5\3\3\0"+
    "\10\3\6\0\1\166\42\3\5\0\2\167\73\0\2\120"+
    "\72\0\5\3\3\0\3\3\1\170\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\11\3\1\171\31\3"+
    "\4\0\5\3\3\0\10\3\6\0\7\3\1\172\33\3"+
    "\4\0\5\3\3\0\5\3\1\173\2\3\6\0\43\3"+
    "\4\0\5\3\3\0\7\3\1\174\6\0\43\3\4\0"+
    "\5\3\3\0\5\3\1\175\2\3\6\0\43\3\4\0"+
    "\5\3\3\0\5\3\1\176\2\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\5\3\1\177\35\3\4\0"+
    "\5\3\3\0\10\3\6\0\10\3\1\200\32\3\4\0"+
    "\5\3\3\0\3\3\1\201\4\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\1\3\1\202\41\3\4\0"+
    "\5\3\3\0\10\3\6\0\35\3\1\203\5\3\4\0"+
    "\5\3\3\0\10\3\6\0\13\3\1\204\27\3\4\0"+
    "\5\3\3\0\2\3\1\205\5\3\6\0\7\3\1\206"+
    "\33\3\4\0\5\3\3\0\7\3\1\207\6\0\43\3"+
    "\4\0\5\3\3\0\5\3\1\210\2\3\6\0\43\3"+
    "\4\0\5\3\3\0\1\211\7\3\6\0\43\3\4\0"+
    "\5\3\3\0\3\3\1\212\4\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\25\3\1\213\15\3\4\0"+
    "\5\3\3\0\5\3\1\214\2\3\6\0\43\3\4\0"+
    "\5\3\3\0\2\3\1\215\5\3\6\0\43\3\4\0"+
    "\5\3\3\0\6\3\1\216\1\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\4\3\1\217\36\3\4\0"+
    "\5\3\3\0\10\3\6\0\11\3\1\220\31\3\4\0"+
    "\5\3\3\0\10\3\6\0\6\3\1\221\34\3\4\0"+
    "\5\3\3\0\10\3\6\0\3\3\1\222\37\3\4\0"+
    "\5\3\3\0\10\3\6\0\20\3\1\223\22\3\4\0"+
    "\5\3\3\0\10\3\6\0\41\3\1\224\1\3\4\0"+
    "\5\3\3\0\10\3\6\0\13\3\1\225\27\3\4\0"+
    "\5\3\3\0\10\3\6\0\17\3\1\226\23\3\4\0"+
    "\5\3\3\0\10\3\6\0\3\3\1\227\37\3\4\0"+
    "\5\3\3\0\10\3\6\0\1\3\1\230\41\3\4\0"+
    "\5\3\3\0\10\3\6\0\35\3\1\231\5\3\4\0"+
    "\5\3\3\0\10\3\6\0\1\3\1\232\41\3\4\0"+
    "\5\3\3\0\1\233\7\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\35\3\1\234\5\3\4\0\3\3"+
    "\1\235\1\3\3\0\10\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\1\3\1\236\41\3\5\0\2\167"+
    "\67\0\1\237\2\0\5\3\3\0\10\3\6\0\7\3"+
    "\1\240\33\3\4\0\5\3\3\0\10\3\6\0\4\3"+
    "\1\241\36\3\4\0\5\3\3\0\3\3\1\242\4\3"+
    "\6\0\43\3\4\0\5\3\3\0\7\3\1\243\6\0"+
    "\43\3\4\0\5\3\3\0\6\3\1\244\1\3\6\0"+
    "\43\3\4\0\5\3\3\0\5\3\1\245\2\3\6\0"+
    "\43\3\4\0\5\3\3\0\2\3\1\246\5\3\6\0"+
    "\43\3\4\0\3\3\1\247\1\3\3\0\10\3\6\0"+
    "\43\3\4\0\5\3\3\0\10\3\6\0\16\3\1\250"+
    "\24\3\4\0\5\3\3\0\10\3\6\0\10\3\1\251"+
    "\32\3\4\0\5\3\3\0\1\3\1\252\6\3\6\0"+
    "\43\3\4\0\5\3\3\0\5\3\1\253\2\3\6\0"+
    "\43\3\4\0\5\3\3\0\10\3\6\0\14\3\1\254"+
    "\26\3\4\0\5\3\3\0\1\3\1\255\6\3\6\0"+
    "\43\3\4\0\5\3\3\0\7\3\1\256\6\0\43\3"+
    "\4\0\5\3\3\0\1\3\1\257\6\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\24\3\1\260\16\3"+
    "\4\0\5\3\3\0\10\3\6\0\15\3\1\261\25\3"+
    "\4\0\5\3\3\0\10\3\6\0\7\3\1\262\33\3"+
    "\4\0\5\3\3\0\2\3\1\263\5\3\6\0\43\3"+
    "\4\0\5\3\3\0\3\3\1\264\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\3\3\1\265\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\6\3\1\266\34\3"+
    "\4\0\5\3\3\0\10\3\6\0\21\3\1\267\21\3"+
    "\4\0\5\3\3\0\10\3\6\0\17\3\1\270\23\3"+
    "\4\0\3\3\1\271\1\3\3\0\10\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\16\3\1\272\24\3"+
    "\4\0\5\3\3\0\4\3\1\273\3\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\34\3\1\274\6\3"+
    "\4\0\5\3\3\0\10\3\6\0\14\3\1\275\26\3"+
    "\4\0\5\3\3\0\10\3\6\0\14\3\1\276\26\3"+
    "\4\0\5\3\3\0\5\3\1\277\2\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\22\3\1\300\20\3"+
    "\4\0\5\3\3\0\10\3\6\0\13\3\1\301\27\3"+
    "\4\0\5\3\3\0\10\3\6\0\22\3\1\302\20\3"+
    "\4\0\5\3\3\0\10\3\6\0\7\3\1\303\33\3"+
    "\4\0\5\3\3\0\10\3\6\0\3\3\1\304\37\3"+
    "\4\0\5\3\3\0\1\3\1\305\6\3\6\0\43\3"+
    "\4\0\5\3\3\0\6\3\1\306\1\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\13\3\1\307\27\3"+
    "\4\0\5\3\3\0\10\3\6\0\20\3\1\310\22\3"+
    "\4\0\5\3\3\0\10\3\6\0\11\3\1\311\31\3"+
    "\4\0\5\3\3\0\10\3\6\0\30\3\1\312\12\3"+
    "\4\0\5\3\3\0\10\3\6\0\3\3\1\313\37\3"+
    "\4\0\5\3\3\0\5\3\1\314\2\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\21\3\1\315\21\3"+
    "\4\0\5\3\3\0\3\3\1\316\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\3\3\1\317\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\5\3\1\320\2\3\6\0\43\3"+
    "\4\0\5\3\3\0\1\321\7\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\6\3\1\322\34\3\4\0"+
    "\5\3\3\0\1\323\7\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\11\3\1\324\31\3\4\0\5\3"+
    "\3\0\10\3\6\0\3\3\1\325\37\3\4\0\5\3"+
    "\3\0\10\3\6\0\1\3\1\326\41\3\4\0\5\3"+
    "\3\0\10\3\6\0\35\3\1\327\5\3\4\0\5\3"+
    "\3\0\10\3\6\0\13\3\1\330\27\3\4\0\5\3"+
    "\3\0\10\3\6\0\3\3\1\331\37\3\4\0\3\3"+
    "\1\332\1\3\3\0\10\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\35\3\1\333\5\3\4\0\5\3"+
    "\3\0\10\3\6\0\20\3\1\334\22\3\4\0\3\3"+
    "\1\335\1\3\3\0\10\3\6\0\43\3\4\0\5\3"+
    "\3\0\6\3\1\336\1\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\32\3\1\337\10\3\4\0\5\3"+
    "\3\0\10\3\6\0\5\3\1\340\35\3\4\0\5\3"+
    "\3\0\5\3\1\341\2\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\16\3\1\342\24\3\4\0\5\3"+
    "\3\0\10\3\6\0\1\3\1\343\41\3\4\0\5\3"+
    "\3\0\5\3\1\344\2\3\6\0\43\3\4\0\5\3"+
    "\3\0\3\3\1\345\4\3\6\0\43\3\4\0\5\3"+
    "\3\0\3\3\1\346\4\3\6\0\43\3\4\0\5\3"+
    "\3\0\1\3\1\347\6\3\6\0\43\3\4\0\5\3"+
    "\3\0\3\3\1\350\4\3\6\0\43\3\4\0\5\3"+
    "\3\0\7\3\1\351\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\4\3\1\352\36\3\4\0\5\3\3\0"+
    "\5\3\1\353\2\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\6\3\1\354\34\3\4\0\5\3\3\0"+
    "\5\3\1\355\2\3\6\0\43\3\4\0\5\3\3\0"+
    "\1\356\7\3\6\0\43\3\4\0\5\3\3\0\10\3"+
    "\6\0\7\3\1\357\33\3\4\0\5\3\3\0\10\3"+
    "\6\0\22\3\1\360\20\3\4\0\5\3\3\0\10\3"+
    "\6\0\23\3\1\361\17\3\4\0\5\3\3\0\10\3"+
    "\6\0\14\3\1\362\26\3\4\0\5\3\3\0\10\3"+
    "\6\0\6\3\1\363\34\3\4\0\5\3\3\0\10\3"+
    "\6\0\21\3\1\364\21\3\4\0\5\3\3\0\10\3"+
    "\6\0\22\3\1\365\20\3\4\0\3\3\1\366\1\3"+
    "\3\0\10\3\6\0\43\3\4\0\5\3\3\0\3\3"+
    "\1\367\4\3\6\0\43\3\4\0\5\3\3\0\2\3"+
    "\1\370\5\3\6\0\43\3\4\0\5\3\3\0\5\3"+
    "\1\371\2\3\6\0\43\3\4\0\5\3\3\0\1\3"+
    "\1\372\6\3\6\0\43\3\4\0\5\3\3\0\10\3"+
    "\6\0\23\3\1\373\17\3\4\0\5\3\3\0\10\3"+
    "\6\0\23\3\1\374\17\3\4\0\5\3\3\0\7\3"+
    "\1\375\6\0\43\3\4\0\5\3\3\0\10\3\6\0"+
    "\15\3\1\376\25\3\4\0\5\3\3\0\10\3\6\0"+
    "\13\3\1\377\2\3\1\u0100\24\3\4\0\5\3\3\0"+
    "\7\3\1\u0101\6\0\43\3\4\0\5\3\3\0\10\3"+
    "\6\0\7\3\1\u0102\33\3\4\0\5\3\3\0\10\3"+
    "\6\0\3\3\1\u0103\37\3\4\0\3\3\1\u0104\1\3"+
    "\3\0\7\3\1\u0105\6\0\34\3\1\u0106\6\3\4\0"+
    "\5\3\3\0\5\3\1\u0107\2\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\11\3\1\u0108\31\3\4\0"+
    "\5\3\3\0\10\3\6\0\16\3\1\u0109\24\3\4\0"+
    "\5\3\3\0\10\3\6\0\20\3\1\u010a\22\3\4\0"+
    "\5\3\3\0\10\3\6\0\35\3\1\u010b\5\3\4\0"+
    "\5\3\3\0\5\3\1\u010c\2\3\6\0\43\3\4\0"+
    "\5\3\3\0\10\3\6\0\16\3\1\u010d\24\3\4\0"+
    "\5\3\3\0\10\3\6\0\23\3\1\u010e\17\3\4\0"+
    "\5\3\3\0\10\3\6\0\15\3\1\u010f\25\3\4\0"+
    "\5\3\3\0\10\3\6\0\15\3\1\u0110\25\3\4\0"+
    "\5\3\3\0\10\3\6\0\6\3\1\u0111\34\3\4\0"+
    "\5\3\3\0\10\3\6\0\31\3\1\u0112\11\3\4\0"+
    "\5\3\3\0\10\3\6\0\7\3\1\u0113\33\3\4\0"+
    "\5\3\3\0\5\3\1\u0114\2\3\6\0\43\3\4\0"+
    "\5\3\3\0\7\3\1\u0115\6\0\43\3\4\0\5\3"+
    "\3\0\1\u0116\7\3\6\0\43\3\4\0\5\3\3\0"+
    "\1\3\1\u0117\6\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\7\3\1\u0118\33\3\4\0\5\3\3\0"+
    "\1\3\1\u0119\6\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\13\3\1\u011a\27\3\4\0\5\3\3\0"+
    "\3\3\1\u011b\4\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\30\3\1\u011c\12\3\4\0\5\3\3\0"+
    "\10\3\6\0\26\3\1\u011d\1\u011e\13\3\4\0\5\3"+
    "\3\0\10\3\6\0\23\3\1\u011f\17\3\4\0\5\3"+
    "\3\0\10\3\6\0\1\3\1\u0120\41\3\4\0\5\3"+
    "\3\0\10\3\6\0\1\3\1\u0121\41\3\4\0\5\3"+
    "\3\0\10\3\6\0\4\3\1\u0122\36\3\4\0\5\3"+
    "\3\0\10\3\6\0\23\3\1\u0123\17\3\4\0\5\3"+
    "\3\0\5\3\1\u0124\2\3\6\0\43\3\4\0\5\3"+
    "\3\0\5\3\1\u0125\2\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\3\3\1\u0126\37\3\4\0\5\3"+
    "\3\0\10\3\6\0\13\3\1\u0127\27\3\4\0\5\3"+
    "\3\0\10\3\6\0\24\3\1\u0128\16\3\4\0\5\3"+
    "\3\0\1\u0129\7\3\6\0\43\3\4\0\5\3\3\0"+
    "\5\3\1\u012a\2\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\1\3\1\u012b\14\3\1\u012c\24\3\4\0"+
    "\5\3\3\0\10\3\6\0\11\3\1\u012d\31\3\4\0"+
    "\5\3\3\0\10\3\6\0\3\3\1\u012e\37\3\4\0"+
    "\5\3\3\0\3\3\1\u012f\4\3\6\0\43\3\4\0"+
    "\5\3\3\0\7\3\1\u0130\6\0\43\3\4\0\5\3"+
    "\3\0\3\3\1\u0131\4\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\34\3\1\u0132\6\3\4\0\5\3"+
    "\3\0\10\3\6\0\23\3\1\u0133\17\3\4\0\5\3"+
    "\3\0\10\3\6\0\7\3\1\u0134\33\3\4\0\5\3"+
    "\3\0\10\3\6\0\4\3\1\u0135\36\3\4\0\5\3"+
    "\3\0\10\3\6\0\4\3\1\u0136\36\3\4\0\5\3"+
    "\3\0\10\3\6\0\7\3\1\u0137\33\3\4\0\5\3"+
    "\3\0\10\3\6\0\16\3\1\u0138\24\3\4\0\5\3"+
    "\3\0\3\3\1\u0139\4\3\6\0\43\3\4\0\5\3"+
    "\3\0\5\3\1\u013a\2\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\11\3\1\u013b\31\3\4\0\5\3"+
    "\3\0\1\u013c\7\3\6\0\43\3\4\0\5\3\3\0"+
    "\10\3\6\0\11\3\1\u013d\31\3\4\0\5\3\3\0"+
    "\10\3\6\0\15\3\1\u013e\25\3\4\0\5\3\3\0"+
    "\2\3\1\u013f\5\3\6\0\43\3\4\0\5\3\3\0"+
    "\1\u0140\7\3\6\0\43\3\4\0\5\3\3\0\10\3"+
    "\6\0\1\u0141\42\3\4\0\3\3\1\u0142\1\3\3\0"+
    "\10\3\6\0\43\3\4\0\5\3\3\0\1\3\1\u0143"+
    "\6\3\6\0\43\3\4\0\5\3\3\0\5\3\1\u0144"+
    "\2\3\6\0\43\3\4\0\5\3\3\0\10\3\6\0"+
    "\7\3\1\u0145\33\3\4\0\5\3\3\0\10\3\6\0"+
    "\11\3\1\u0146\31\3\4\0\5\3\3\0\10\3\6\0"+
    "\17\3\1\u0147\23\3\4\0\5\3\3\0\7\3\1\u0148"+
    "\6\0\43\3\4\0\5\3\3\0\10\3\6\0\4\3"+
    "\1\u0149\36\3\4\0\5\3\3\0\1\u014a\7\3\6\0"+
    "\43\3\4\0\5\3\3\0\5\3\1\u014b\2\3\6\0"+
    "\43\3\4\0\5\3\3\0\10\3\6\0\24\3\1\u014c"+
    "\16\3\4\0\5\3\3\0\3\3\1\u014d\4\3\6\0"+
    "\43\3\4\0\5\3\3\0\1\u014e\7\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\3\3\1\u014f\37\3"+
    "\4\0\5\3\3\0\2\3\1\u0150\5\3\6\0\43\3"+
    "\4\0\5\3\3\0\1\3\1\u0151\6\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\20\3\1\u0152\22\3"+
    "\4\0\5\3\3\0\10\3\6\0\3\3\1\u0153\37\3"+
    "\4\0\5\3\3\0\3\3\1\u0154\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\37\3\1\u0155\3\3"+
    "\4\0\5\3\3\0\10\3\6\0\3\3\1\u0156\37\3"+
    "\4\0\5\3\3\0\10\3\6\0\11\3\1\u0157\31\3"+
    "\4\0\5\3\3\0\1\3\1\u0158\6\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\11\3\1\u0159\31\3"+
    "\4\0\5\3\3\0\3\3\1\u015a\4\3\6\0\43\3"+
    "\4\0\5\3\3\0\10\3\6\0\21\3\1\u015b\21\3"+
    "\4\0\5\3\3\0\7\3\1\u015c\6\0\43\3\4\0"+
    "\5\3\3\0\7\3\1\u015d\6\0\43\3\4\0\5\3"+
    "\3\0\2\3\1\u015e\5\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\7\3\1\u015f\33\3\4\0\5\3"+
    "\3\0\5\3\1\u0160\2\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\7\3\1\u0161\33\3\4\0\5\3"+
    "\3\0\1\3\1\u0162\6\3\6\0\43\3\4\0\5\3"+
    "\3\0\10\3\6\0\1\3\1\u0163\41\3\4\0\5\3"+
    "\3\0\1\u0164\7\3\6\0\43\3\4\0\5\3\3\0"+
    "\3\3\1\u0165\4\3\6\0\43\3\4\0\5\3\3\0"+
    "\6\3\1\u0166\1\3\6\0\43\3\4\0\5\3\3\0"+
    "\1\u0167\7\3\6\0\43\3\4\0\5\3\3\0\10\3"+
    "\6\0\22\3\1\u0168\20\3\4\0\5\3\3\0\10\3"+
    "\6\0\3\3\1\u0169\37\3\4\0\5\3\3\0\3\3"+
    "\1\u016a\4\3\6\0\43\3\4\0\5\3\3\0\3\3"+
    "\1\u016b\4\3\6\0\43\3\4\0\5\3\3\0\10\3"+
    "\6\0\16\3\1\u016c\24\3\4\0\5\3\3\0\10\3"+
    "\6\0\6\3\1\u016d\34\3\4\0\5\3\3\0\7\3"+
    "\1\u016e\6\0\43\3\4\0\5\3\3\0\7\3\1\u016f"+
    "\6\0\43\3\4\0\5\3\3\0\10\3\6\0\23\3"+
    "\1\u0170\17\3\4\0\5\3\3\0\5\3\1\u0171\2\3"+
    "\6\0\43\3\4\0\5\3\3\0\7\3\1\u0172\6\0"+
    "\43\3\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19215];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\6\11\25\1\3\0\43\1\1\0"+
    "\47\1\1\0\47\1\1\11\323\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int tipo){
        return new Symbol(tipo, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int tipo, Object value){
        return new Symbol(tipo, yyline+1, yycolumn+1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico3(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            }
          case 64: break;
          case 2: 
            { 
            }
          case 65: break;
          case 3: 
            { return symbol(sym.ID, new String(yytext()));
            }
          case 66: break;
          case 4: 
            { return symbol(sym.ENTERO, new Integer(yytext()));
            }
          case 67: break;
          case 5: 
            { return symbol(sym.COMA);
            }
          case 68: break;
          case 6: 
            { return symbol(sym.PUNTO);
            }
          case 69: break;
          case 7: 
            { return symbol(sym.LLAVE_A);
            }
          case 70: break;
          case 8: 
            { return symbol(sym.LLAVE_B);
            }
          case 71: break;
          case 9: 
            { return symbol(sym.AGRUPACION_A);
            }
          case 72: break;
          case 10: 
            { return symbol(sym.AGRUPACION_B);
            }
          case 73: break;
          case 11: 
            { return symbol(sym.DOS_PUNTOS);
            }
          case 74: break;
          case 12: 
            { return symbol(sym.COMILLAS);
            }
          case 75: break;
          case 13: 
            { return symbol(sym.DECIMAL, new Double(yytext()));
            }
          case 76: break;
          case 14: 
            { return symbol(sym.id);
            }
          case 77: break;
          case 15: 
            { return symbol(sym.COLOR, new String(yytext()));
            }
          case 78: break;
          case 16: 
            { return symbol(sym.VERDADERO, new String(yytext()));
            }
          case 79: break;
          case 17: 
            { return symbol(sym.tipo);
            }
          case 80: break;
          case 18: 
            { return symbol(sym.size);
            }
          case 81: break;
          case 19: 
            { return symbol(sym.MAPA);
            }
          case 82: break;
          case 20: 
            { return symbol(sym.VIVO);
            }
          case 83: break;
          case 21: 
            { return symbol(sym.FALSO, new String(yytext()));
            }
          case 84: break;
          case 22: 
            { return symbol(sym.filas);
            }
          case 85: break;
          case 23: 
            { return symbol(sym.color);
            }
          case 86: break;
          case 24: 
            { return symbol(sym.naves);
            }
          case 87: break;
          case 25: 
            { return symbol(sym.TURNO);
            }
          case 88: break;
          case 26: 
            { return symbol(sym.Flota);
            }
          case 89: break;
          case 27: 
            { return symbol(sym.FACIL, new String(yytext()));
            }
          case 90: break;
          case 28: 
            { return symbol(sym.estado);
            }
          case 91: break;
          case 29: 
            { return symbol(sym.alAzar);
            }
          case 92: break;
          case 30: 
            { return symbol(sym.nombre);
            }
          case 93: break;
          case 31: 
            { return symbol(sym.HUMANO, new String(yytext()));
            }
          case 94: break;
          case 32: 
            { return symbol(sym.mensaje);
            }
          case 95: break;
          case 33: 
            { return symbol(sym.noNaves);
            }
          case 96: break;
          case 34: 
            { return symbol(sym.noFlota);
            }
          case 97: break;
          case 35: 
            { return symbol(sym.DIFICIL, new String(yytext()));
            }
          case 98: break;
          case 36: 
            { return symbol(sym.acumular);
            }
          case 99: break;
          case 37: 
            { return symbol(sym.ACCIONES);
            }
          case 100: break;
          case 38: 
            { return symbol(sym.PLANETAS);
            }
          case 101: break;
          case 39: 
            { return symbol(sym.columnas);
            }
          case 102: break;
          case 40: 
            { return symbol(sym.planetas);
            }
          case 103: break;
          case 41: 
            { return symbol(sym.IMPACTOS);
            }
          case 104: break;
          case 42: 
            { return symbol(sym.mapaCiego);
            }
          case 105: break;
          case 43: 
            { return symbol(sym.posX);
            }
          case 106: break;
          case 44: 
            { return symbol(sym.posY);
            }
          case 107: break;
          case 45: 
            { return symbol(sym.NEUTRALES);
            }
          case 108: break;
          case 46: 
            { return symbol(sym.JUGADORES);
            }
          case 109: break;
          case 47: 
            { return symbol(sym.produccion);
            }
          case 110: break;
          case 48: 
            { return symbol(sym.SECUENCIAS);
            }
          case 111: break;
          case 49: 
            { return symbol(sym.CONQUISTADO);
            }
          case 112: break;
          case 50: 
            { return symbol(sym.verificador);
            }
          case 113: break;
          case 51: 
            { return symbol(sym.turnoLlegada);
            }
          case 114: break;
          case 52: 
            { return symbol(sym.finalizacion);
            }
          case 115: break;
          case 53: 
            { return symbol(sym.mostrarNaves);
            }
          case 116: break;
          case 54: 
            { return symbol(sym.estadoJugador);
            }
          case 117: break;
          case 55: 
            { return symbol(sym.planetaOrigen);
            }
          case 118: break;
          case 56: 
            { return symbol(sym.navesRestantes);
            }
          case 119: break;
          case 57: 
            { return symbol(sym.noJugadorEnvio);
            }
          case 120: break;
          case 58: 
            { return symbol(sym.planetaDestino);
            }
          case 121: break;
          case 59: 
            { return symbol(sym.noJugadorAtaque);
            }
          case 122: break;
          case 60: 
            { return symbol(sym.pNeutrales);
            }
          case 123: break;
          case 61: 
            { return symbol(sym.porcMuertes);
            }
          case 124: break;
          case 62: 
            { return symbol(sym.PLANETAS_NEUTRALES);
            }
          case 125: break;
          case 63: 
            { return symbol(sym.mostrarEstadisticas);
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico3 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico3 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico3(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
