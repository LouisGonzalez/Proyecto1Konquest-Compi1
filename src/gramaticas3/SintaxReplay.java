
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 21 17:17:29 CST 2020
//----------------------------------------------------

package gramaticas3;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.Impactos;
import Pollitos.DatosImpacto;
import Pollitos.NavesCamino;
import Pollitos.Replay;
import Pollitos.ResumenTurno;
import Pollitos.DatosAcciones;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 21 17:17:29 CST 2020
  */
public class SintaxReplay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxReplay() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\005" +
    "\006\000\002\005\005\000\002\117\011\000\002\117\007" +
    "\000\002\120\004\000\002\120\004\000\002\120\004\000" +
    "\002\120\004\000\002\120\002\000\002\121\004\000\002" +
    "\121\004\000\002\121\004\000\002\122\006\000\002\122" +
    "\005\000\002\123\010\000\002\123\007\000\002\124\010" +
    "\000\002\124\006\000\002\116\004\000\002\116\004\000" +
    "\002\116\004\000\002\116\004\000\002\116\004\000\002" +
    "\116\004\000\002\116\004\000\002\116\004\000\002\116" +
    "\004\000\002\116\004\000\002\116\002\000\002\115\004" +
    "\000\002\115\004\000\002\115\004\000\002\115\004\000" +
    "\002\115\004\000\002\115\004\000\002\115\004\000\002" +
    "\115\004\000\002\115\004\000\002\104\005\000\002\105" +
    "\005\000\002\106\005\000\002\107\005\000\002\110\005" +
    "\000\002\111\005\000\002\112\005\000\002\113\005\000" +
    "\002\114\005\000\002\114\005\000\002\103\006\000\002" +
    "\103\005\000\002\102\010\000\002\102\006\000\002\101" +
    "\010\000\002\101\006\000\002\071\004\000\002\071\004" +
    "\000\002\071\004\000\002\071\004\000\002\071\004\000" +
    "\002\071\004\000\002\071\004\000\002\071\002\000\002" +
    "\072\004\000\002\072\004\000\002\072\004\000\002\072" +
    "\004\000\002\072\004\000\002\072\004\000\002\073\005" +
    "\000\002\074\005\000\002\074\006\000\002\077\005\000" +
    "\002\100\005\000\002\075\005\000\002\076\005\000\002" +
    "\130\006\000\002\127\004\000\002\127\004\000\002\127" +
    "\002\000\002\126\004\000\002\125\006\000\002\125\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\056\005\001\002\000\004\002\000\001" +
    "\002\000\004\010\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\011\011\057\012\001" +
    "\002\000\004\002\ufffe\001\002\000\004\045\015\001\002" +
    "\000\004\011\014\001\002\000\004\002\uffff\001\002\000" +
    "\004\006\016\001\002\000\014\007\ufff7\013\017\060\026" +
    "\072\022\101\020\001\002\000\010\060\026\072\022\101" +
    "\020\001\002\000\004\006\255\001\002\000\014\007\ufff7" +
    "\013\017\060\026\072\022\101\020\001\002\000\004\006" +
    "\156\001\002\000\014\007\ufff7\013\017\060\026\072\022" +
    "\101\020\001\002\000\014\007\ufff7\013\017\060\026\072" +
    "\022\101\020\001\002\000\004\007\151\001\002\000\004" +
    "\006\027\001\002\000\006\007\031\047\030\001\002\000" +
    "\004\012\034\001\002\000\014\007\ufff2\013\ufff2\060\ufff2" +
    "\072\ufff2\101\ufff2\001\002\000\004\007\033\001\002\000" +
    "\014\007\ufff3\013\ufff3\060\ufff3\072\ufff3\101\ufff3\001\002" +
    "\000\004\010\035\001\002\000\004\061\036\001\002\000" +
    "\004\010\042\001\002\000\004\011\040\001\002\000\006" +
    "\007\ufff0\047\030\001\002\000\004\007\ufff1\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\030\011\uffe3\013\060\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\004\012\141\001\002\000\030\011\uffe3\013\060\035\057" +
    "\062\064\063\061\064\063\065\056\066\065\070\055\071" +
    "\062\077\051\001\002\000\030\011\uffe3\013\060\035\057" +
    "\062\064\063\061\064\063\065\056\066\065\070\055\071" +
    "\062\077\051\001\002\000\004\011\134\001\002\000\004" +
    "\012\132\001\002\000\004\012\130\001\002\000\004\012" +
    "\126\001\002\000\024\035\057\062\064\063\061\064\063" +
    "\065\056\066\065\070\055\071\062\077\051\001\002\000" +
    "\004\012\101\001\002\000\004\012\076\001\002\000\004" +
    "\012\074\001\002\000\004\012\072\001\002\000\004\012" +
    "\070\001\002\000\030\011\uffe3\013\060\035\057\062\064" +
    "\063\061\064\063\065\056\066\065\070\055\071\062\077" +
    "\051\001\002\000\004\011\uffe5\001\002\000\004\045\071" +
    "\001\002\000\030\011\uffd4\013\uffd4\035\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4\077\uffd4" +
    "\001\002\000\004\047\073\001\002\000\030\011\uffd8\013" +
    "\uffd8\035\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\070\uffd8\071\uffd8\077\uffd8\001\002\000\004\045\075\001" +
    "\002\000\030\011\uffd6\013\uffd6\035\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6\077\uffd6\001" +
    "\002\000\006\004\100\005\077\001\002\000\030\011\uffd0" +
    "\013\uffd0\035\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\070\uffd0\071\uffd0\077\uffd0\001\002\000\030\011\uffd1" +
    "\013\uffd1\035\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\070\uffd1\071\uffd1\077\uffd1\001\002\000\004\047\102" +
    "\001\002\000\030\011\uffd7\013\uffd7\035\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\070\uffd7\071\uffd7\077\uffd7" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\030\011\uffe3\013\060\035\057\062\064\063" +
    "\061\064\063\065\056\066\065\070\055\071\062\077\051" +
    "\001\002\000\004\011\uffe4\001\002\000\030\011\uffe3\013" +
    "\060\035\057\062\064\063\061\064\063\065\056\066\065" +
    "\070\055\071\062\077\051\001\002\000\004\011\uffda\001" +
    "\002\000\004\011\uffe2\001\002\000\004\011\uffe1\001\002" +
    "\000\004\011\uffe0\001\002\000\004\011\uffdf\001\002\000" +
    "\004\011\uffde\001\002\000\004\011\uffdd\001\002\000\004" +
    "\011\uffdc\001\002\000\004\011\uffdb\001\002\000\004\046" +
    "\127\001\002\000\030\011\uffd3\013\uffd3\035\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\070\uffd3\071\uffd3\077" +
    "\uffd3\001\002\000\004\045\131\001\002\000\030\011\uffd5" +
    "\013\uffd5\035\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\070\uffd5\071\uffd5\077\uffd5\001\002\000\004\045\133" +
    "\001\002\000\030\011\uffd2\013\uffd2\035\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2\071\uffd2\077\uffd2" +
    "\001\002\000\006\011\uffee\013\135\001\002\000\004\061" +
    "\036\001\002\000\004\011\uffef\001\002\000\004\011\uffed" +
    "\001\002\000\004\011\uffec\001\002\000\004\045\142\001" +
    "\002\000\030\011\uffd9\013\uffd9\035\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\070\uffd9\071\uffd9\077\uffd9\001" +
    "\002\000\004\011\uffeb\001\002\000\004\011\uffea\001\002" +
    "\000\004\011\uffe9\001\002\000\004\011\uffe8\001\002\000" +
    "\004\011\uffe7\001\002\000\004\011\uffe6\001\002\000\006" +
    "\011\ufffc\013\152\001\002\000\004\057\012\001\002\000" +
    "\004\011\ufffd\001\002\000\004\007\ufff9\001\002\000\004" +
    "\007\ufffb\001\002\000\006\007\161\047\157\001\002\000" +
    "\004\006\163\001\002\000\004\007\162\001\002\000\014" +
    "\007\uffce\013\uffce\060\uffce\072\uffce\101\uffce\001\002\000" +
    "\014\007\uffcf\013\uffcf\060\uffcf\072\uffcf\101\uffcf\001\002" +
    "\000\004\047\165\001\002\000\004\007\251\001\002\000" +
    "\004\010\166\001\002\000\022\011\uffc2\013\167\073\176" +
    "\074\170\075\173\077\201\104\175\105\174\001\002\000" +
    "\016\073\176\074\170\075\173\077\201\104\175\105\174" +
    "\001\002\000\004\012\230\001\002\000\022\011\uffc2\013" +
    "\167\073\176\074\170\075\173\077\201\104\175\105\174" +
    "\001\002\000\022\011\uffc2\013\167\073\176\074\170\075" +
    "\173\077\201\104\175\105\174\001\002\000\004\012\224" +
    "\001\002\000\004\012\222\001\002\000\004\012\220\001" +
    "\002\000\004\012\216\001\002\000\022\011\uffc2\013\167" +
    "\073\176\074\170\075\173\077\201\104\175\105\174\001" +
    "\002\000\022\011\uffc2\013\167\073\176\074\170\075\173" +
    "\077\201\104\175\105\174\001\002\000\004\012\212\001" +
    "\002\000\022\011\uffc2\013\167\073\176\074\170\075\173" +
    "\077\201\104\175\105\174\001\002\000\022\011\uffc2\013" +
    "\167\073\176\074\170\075\173\077\201\104\175\105\174" +
    "\001\002\000\004\011\205\001\002\000\006\007\uffca\013" +
    "\206\001\002\000\004\047\165\001\002\000\004\007\uffcb" +
    "\001\002\000\004\011\uffc9\001\002\000\004\011\uffc8\001" +
    "\002\000\004\045\213\001\002\000\022\011\uffb5\013\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\077\uffb5\104\uffb5\105\uffb5\001" +
    "\002\000\004\011\uffc7\001\002\000\004\011\uffc6\001\002" +
    "\000\004\045\217\001\002\000\022\011\uffbb\013\uffbb\073" +
    "\uffbb\074\uffbb\075\uffbb\077\uffbb\104\uffbb\105\uffbb\001\002" +
    "\000\004\045\221\001\002\000\022\011\uffb8\013\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\077\uffb8\104\uffb8\105\uffb8\001\002" +
    "\000\004\047\223\001\002\000\022\011\uffb7\013\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\077\uffb7\104\uffb7\105\uffb7\001\002" +
    "\000\004\047\225\001\002\000\022\011\uffb6\013\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\077\uffb6\104\uffb6\105\uffb6\001\002" +
    "\000\004\011\uffc5\001\002\000\004\011\uffc4\001\002\000" +
    "\006\067\232\100\231\001\002\000\022\011\uffba\013\uffba" +
    "\073\uffba\074\uffba\075\uffba\077\uffba\104\uffba\105\uffba\001" +
    "\002\000\004\047\233\001\002\000\022\011\uffb9\013\uffb9" +
    "\073\uffb9\074\uffb9\075\uffb9\077\uffb9\104\uffb9\105\uffb9\001" +
    "\002\000\022\011\uffc2\013\167\073\176\074\170\075\173" +
    "\077\201\104\175\105\174\001\002\000\022\011\uffc2\013" +
    "\167\073\176\074\170\075\173\077\201\104\175\105\174" +
    "\001\002\000\004\011\uffc3\001\002\000\022\011\uffc2\013" +
    "\167\073\176\074\170\075\173\077\201\104\175\105\174" +
    "\001\002\000\022\011\uffc2\013\167\073\176\074\170\075" +
    "\173\077\201\104\175\105\174\001\002\000\022\011\uffc2" +
    "\013\167\073\176\074\170\075\173\077\201\104\175\105" +
    "\174\001\002\000\022\011\uffc2\013\167\073\176\074\170" +
    "\075\173\077\201\104\175\105\174\001\002\000\004\011" +
    "\uffc1\001\002\000\004\011\uffc0\001\002\000\004\011\uffbf" +
    "\001\002\000\004\011\uffbe\001\002\000\004\011\uffbd\001" +
    "\002\000\004\011\uffbc\001\002\000\006\007\uffcc\013\252" +
    "\001\002\000\004\047\157\001\002\000\004\007\uffcd\001" +
    "\002\000\004\007\ufffa\001\002\000\010\007\uffb1\013\256" +
    "\074\261\001\002\000\004\074\261\001\002\000\010\007" +
    "\uffb1\013\256\074\261\001\002\000\004\007\266\001\002" +
    "\000\004\047\262\001\002\000\004\012\263\001\002\000" +
    "\006\004\265\005\264\001\002\000\010\007\uffae\013\uffae" +
    "\074\uffae\001\002\000\010\007\uffaf\013\uffaf\074\uffaf\001" +
    "\002\000\014\007\uffb4\013\uffb4\060\uffb4\072\uffb4\101\uffb4" +
    "\001\002\000\004\007\uffb3\001\002\000\004\007\uffb2\001" +
    "\002\000\010\007\uffb1\013\256\074\261\001\002\000\004" +
    "\007\uffb0\001\002\000\014\007\ufff7\013\017\060\026\072" +
    "\022\101\020\001\002\000\004\007\ufff8\001\002\000\014" +
    "\007\ufff7\013\017\060\026\072\022\101\020\001\002\000" +
    "\014\007\ufff7\013\017\060\026\072\022\101\020\001\002" +
    "\000\004\007\ufff4\001\002\000\004\007\ufff6\001\002\000" +
    "\004\007\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\002\005\005\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\103\020\120\024\122\022\130\023\001\001\000" +
    "\012\103\272\121\273\122\274\130\275\001\001\000\002" +
    "\001\001\000\012\103\020\120\253\122\022\130\023\001" +
    "\001\000\002\001\001\000\012\103\020\120\154\122\022" +
    "\130\023\001\001\000\012\103\020\120\153\122\022\130" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\123\040\001\001\000\002\001\001\000\026\104\052" +
    "\105\051\106\047\107\046\110\045\111\044\112\043\113" +
    "\042\114\065\116\053\001\001\000\026\104\052\105\051" +
    "\106\047\107\046\110\045\111\044\112\043\113\042\114" +
    "\065\116\147\001\001\000\026\104\052\105\051\106\047" +
    "\107\046\110\045\111\044\112\043\113\042\114\065\116" +
    "\146\001\001\000\026\104\052\105\051\106\047\107\046" +
    "\110\045\111\044\112\043\113\042\114\065\116\145\001" +
    "\001\000\026\104\052\105\051\106\047\107\046\110\045" +
    "\111\044\112\043\113\042\114\065\116\144\001\001\000" +
    "\026\104\052\105\051\106\047\107\046\110\045\111\044" +
    "\112\043\113\042\114\065\116\143\001\001\000\026\104" +
    "\052\105\051\106\047\107\046\110\045\111\044\112\043" +
    "\113\042\114\065\116\142\001\001\000\002\001\001\000" +
    "\026\104\052\105\051\106\047\107\046\110\045\111\044" +
    "\112\043\113\042\114\065\116\137\001\001\000\026\104" +
    "\052\105\051\106\047\107\046\110\045\111\044\112\043" +
    "\113\042\114\065\116\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\104\111\105\110\106\107\107\106\110\105\111\104\112" +
    "\103\113\102\114\113\115\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\104\052\105\051\106\047\107\046" +
    "\110\045\111\044\112\043\113\042\114\065\116\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\104" +
    "\052\105\051\106\047\107\046\110\045\111\044\112\043" +
    "\113\042\114\065\116\124\001\001\000\026\104\052\105" +
    "\051\106\047\107\046\110\045\111\044\112\043\113\042" +
    "\114\065\116\123\001\001\000\026\104\052\105\051\106" +
    "\047\107\046\110\045\111\044\112\043\113\042\114\065" +
    "\116\122\001\001\000\026\104\052\105\051\106\047\107" +
    "\046\110\045\111\044\112\043\113\042\114\065\116\121" +
    "\001\001\000\026\104\052\105\051\106\047\107\046\110" +
    "\045\111\044\112\043\113\042\114\065\116\120\001\001" +
    "\000\026\104\052\105\051\106\047\107\046\110\045\111" +
    "\044\112\043\113\042\114\065\116\117\001\001\000\026" +
    "\104\052\105\051\106\047\107\046\110\045\111\044\112" +
    "\043\113\042\114\065\116\116\001\001\000\026\104\052" +
    "\105\051\106\047\107\046\110\045\111\044\112\043\113" +
    "\042\114\065\116\115\001\001\000\002\001\001\000\026" +
    "\104\052\105\051\106\047\107\046\110\045\111\044\112" +
    "\043\113\042\114\065\116\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\124\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\071\203\073\202\074\201\075\177\076\176\077\171" +
    "\100\170\001\001\000\020\072\235\073\241\074\240\075" +
    "\237\076\236\077\234\100\233\001\001\000\002\001\001" +
    "\000\020\071\226\073\202\074\201\075\177\076\176\077" +
    "\171\100\170\001\001\000\020\071\225\073\202\074\201" +
    "\075\177\076\176\077\171\100\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\071\214\073\202\074\201\075\177\076\176\077" +
    "\171\100\170\001\001\000\020\071\213\073\202\074\201" +
    "\075\177\076\176\077\171\100\170\001\001\000\002\001" +
    "\001\000\020\071\210\073\202\074\201\075\177\076\176" +
    "\077\171\100\170\001\001\000\020\071\207\073\202\074" +
    "\201\075\177\076\176\077\171\100\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\071\247\073\202\074\201" +
    "\075\177\076\176\077\171\100\170\001\001\000\020\071" +
    "\246\073\202\074\201\075\177\076\176\077\171\100\170" +
    "\001\001\000\002\001\001\000\020\071\245\073\202\074" +
    "\201\075\177\076\176\077\171\100\170\001\001\000\020" +
    "\071\244\073\202\074\201\075\177\076\176\077\171\100" +
    "\170\001\001\000\020\071\243\073\202\074\201\075\177" +
    "\076\176\077\171\100\170\001\001\000\020\071\242\073" +
    "\202\074\201\075\177\076\176\077\171\100\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\125\256\127\257\001\001\000\006" +
    "\125\270\126\267\001\001\000\006\125\256\127\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\125\256\127\271\001\001\000\002\001\001\000\012\103" +
    "\020\120\300\122\022\130\023\001\001\000\002\001\001" +
    "\000\012\103\020\120\277\122\022\130\023\001\001\000" +
    "\012\103\020\120\276\122\022\130\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxReplay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxReplay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxReplay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;
    public String nombreJugador = "";
    public Integer noTurno = 0;
    public ArrayList<Replay> listReplay;

    public SintaxReplay(AnalizadorLexico3 lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas, ArrayList<Replay> listReplay){
        super(lex);
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnDistancia = btnDistancia;
        this.btnFlotas = btnFlotas;
        this.listReplay = listReplay;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }


        public void traspasoDatosFlotas(ArrayList<Replay> listReplay, ArrayList<Replay> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listReplay.add(listTemporal.get(i));
        }

    }

  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxReplay$actions {
  private final SintaxReplay parser;

  /** Constructor */
  CUP$SintaxReplay$actions(SintaxReplay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxReplay$do_action(
    int                        CUP$SintaxReplay$act_num,
    java_cup.runtime.lr_parser CUP$SintaxReplay$parser,
    java.util.Stack            CUP$SintaxReplay$stack,
    int                        CUP$SintaxReplay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxReplay$result;

      /* select the action based on the action number */
      switch (CUP$SintaxReplay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bz ::= estado ID DOS_PUNTOS FALSO 
            {
              ResumenTurno RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString()); resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bz",83, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bz ::= estado ID DOS_PUNTOS VERDADERO 
            {
              ResumenTurno RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString());  resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bz",83, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // p6 ::= bz by 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ResumenTurno a = (ResumenTurno)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> e = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 e.add(a); RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p6",84, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // by ::= 
            {
              ArrayList<ResumenTurno> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",85, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // by ::= COMA p6 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",85, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // by ::= bz by 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ResumenTurno a = (ResumenTurno)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> e = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 e.add(a); RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",85, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bx ::= RESUMEN LLAVE_A by LLAVE_B 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bx",86, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bu ::= noFlota DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setNoFlota((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bu",60, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bt ::= mensaje DOS_PUNTOS ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos();  impacto.setMensaje(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bt",59, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc ::= planetaAtacante DOS_PUNTOS ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setPlanetaAtacante(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("cc",62, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cb ::= jugadorAtacante DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setJugadorAtacante((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("cb",61, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bs ::= estado DOS_PUNTOS CONQUISTADO ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setEstado(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bs",58, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bs ::= estado DOS_PUNTOS VIVO 
            {
              Impactos RESULT =null;
		 Impactos impacto = new Impactos(); impacto.setEstado("VIVO"); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bs",58, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // br ::= navesRestantes DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setNavesRestantes((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("br",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // p7 ::= cc bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getPlanetaAtacante()==null){ e.setPlanetaAtacante(a.getPlanetaAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // p7 ::= cb bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getJugadorAtacante()==null){ e.setJugadorAtacante(a.getJugadorAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // p7 ::= bu bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // p7 ::= bt bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMensaje()==null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // p7 ::= bs bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getEstado()==null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // p7 ::= br bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNavesRestantes()==null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bq ::= 
            {
              Impactos RESULT =null;
		 RESULT=new Impactos(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bq ::= COMA p7 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bq ::= cc bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getPlanetaAtacante()==null){ e.setPlanetaAtacante(a.getPlanetaAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bq ::= cb bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getJugadorAtacante()==null){ e.setJugadorAtacante(a.getJugadorAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bq ::= bu bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bq ::= bt bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMensaje()==null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bq ::= bs bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getEstado()==null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bq ::= br bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNavesRestantes()==null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bv ::= ID AGRUPACION_A bq AGRUPACION_B 
            {
              ArrayList<Impactos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {  a.setNombrePlaneta(c.toString());  ArrayList<Impactos> listImpactos = new ArrayList<>();  listImpactos.add(a);  RESULT=listImpactos; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bv",63, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bv ::= ID AGRUPACION_A bq AGRUPACION_B COMA bv 
            {
              ArrayList<Impactos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Impactos> e = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {    a.setNombrePlaneta(c.toString()); e.add(a);   RESULT=e;  }  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bv",63, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bp ::= ID LLAVE_A bv LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Impactos> b = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString()); datos.setListImpactos(b); ArrayList<DatosImpacto> listDatos = new ArrayList<>(); listDatos.add(datos); RESULT=listDatos; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bp",64, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bp ::= ID LLAVE_A bv LLAVE_B COMA bp 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		ArrayList<Impactos> b = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<DatosImpacto> c = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString());  datos.setListImpactos(b); c.add(datos); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bp",64, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bf ::= IMPACTOS LLAVE_A LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bf",65, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bf ::= IMPACTOS LLAVE_A bp LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bf",65, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bo ::= verificador DOS_PUNTOS FALSO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bo",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bo ::= verificador DOS_PUNTOS VERDADERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bo",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bn ::= turnoLlegada DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bn",73, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bm ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bm",72, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bl ::= noJugadorAtaque DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bl",71, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bk ::= noJugadorEnvio DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bk",70, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bj ::= noNaves DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bj",69, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bi ::= planetaDestino DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bi",68, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bh ::= planetaOrigen DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bh",67, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bg ::= noFlota DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bg",66, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // p5 ::= bo be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // p5 ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // p5 ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // p5 ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // p5 ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // p5 ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // p5 ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // p5 ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // p5 ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // be ::= 
            {
              NavesCamino RESULT =null;
		 RESULT=new NavesCamino(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // be ::= COMA p5 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // be ::= bo be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // be ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // be ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // be ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // be ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // be ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // be ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // be ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // be ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bd ::= Flota AGRUPACION_A be AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { ArrayList<NavesCamino> listNaves = new ArrayList<>(); listNaves.add(a); RESULT=listNaves; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bd",82, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bd ::= Flota AGRUPACION_A be AGRUPACION_B COMA bd 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<NavesCamino> e = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bd",82, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bw ::= ID DOS_PUNTOS AGRUPACION_A bd AGRUPACION_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<NavesCamino> b = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); ArrayList<DatosAcciones> listAcciones = new ArrayList<>(); listAcciones.add(datos); RESULT=listAcciones; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bw",81, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bw ::= ID DOS_PUNTOS AGRUPACION_A bd AGRUPACION_B bw 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		ArrayList<NavesCamino> b = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<DatosAcciones> c = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); c.add(datos); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bw",81, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bc ::= ACCIONES LLAVE_A LLAVE_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bc",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bc ::= ACCIONES LLAVE_A bw LLAVE_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bc",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p2 ::= bx bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListResumen()==null){ e.setListResumen(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // p2 ::= bf bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // p2 ::= bc bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bb ::= 
            {
              Replay RESULT =null;
		 RESULT=new Replay(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bb ::= COMA p2 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay a = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bb ::= bx bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListResumen()==null){ e.setListResumen(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bb ::= bf bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bb ::= bc bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ba ::= TURNO ENTERO LLAVE_A bb LLAVE_B 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Replay b = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 b.setNoTurno((Integer) a); ArrayList<Replay> listReplay = new ArrayList<>(); listReplay.add(b); RESULT=listReplay; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ba ::= TURNO ENTERO LLAVE_A bb LLAVE_B COMA ba 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Replay b = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Replay> c = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 b.setNoTurno((Integer) a); c.add(b); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // a2 ::= SECUENCIAS AGRUPACION_A AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a2 ::= SECUENCIAS AGRUPACION_A ba AGRUPACION_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Replay> a = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		   parser.traspasoDatosFlotas(parser.listReplay, a);         
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= a2 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = start_val;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxReplay$parser.done_parsing();
          return CUP$SintaxReplay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

