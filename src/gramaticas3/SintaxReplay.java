
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 26 10:29:12 CST 2020
//----------------------------------------------------

package gramaticas3;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.Impactos;
import Pollitos.DatosImpacto;
import Pollitos.NavesCamino;
import Pollitos.Replay;
import Pollitos.ResumenTurno;
import Pollitos.DatosAcciones;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;
import interfaz.VentanaPrincipal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 26 10:29:12 CST 2020
  */
public class SintaxReplay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxReplay() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\005\000\002\120\012\000\002\120\010" +
    "\000\002\120\004\000\002\121\004\000\002\121\004\000" +
    "\002\121\004\000\002\121\004\000\002\121\002\000\002" +
    "\121\004\000\002\122\004\000\002\122\004\000\002\122" +
    "\004\000\002\122\004\000\002\123\007\000\002\123\006" +
    "\000\002\124\010\000\002\124\007\000\002\125\010\000" +
    "\002\125\006\000\002\117\004\000\002\117\004\000\002" +
    "\117\004\000\002\117\004\000\002\117\004\000\002\117" +
    "\004\000\002\117\004\000\002\117\004\000\002\117\004" +
    "\000\002\117\004\000\002\117\002\000\002\117\004\000" +
    "\002\116\004\000\002\116\004\000\002\116\004\000\002" +
    "\116\004\000\002\116\004\000\002\116\004\000\002\116" +
    "\004\000\002\116\004\000\002\116\004\000\002\116\004" +
    "\000\002\105\005\000\002\106\005\000\002\107\005\000" +
    "\002\110\005\000\002\111\005\000\002\112\005\000\002" +
    "\113\005\000\002\114\005\000\002\115\005\000\002\115" +
    "\005\000\002\104\006\000\002\104\005\000\002\103\007" +
    "\000\002\103\006\000\002\102\010\000\002\102\006\000" +
    "\002\072\004\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\004\000\002\072" +
    "\004\000\002\072\002\000\002\072\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\074\005\000\002\075\005\000\002\075\005\000\002\100" +
    "\005\000\002\101\005\000\002\076\005\000\002\077\005" +
    "\000\002\131\006\000\002\130\004\000\002\130\004\000" +
    "\002\130\002\000\002\130\004\000\002\127\004\000\002" +
    "\127\004\000\002\126\006\000\002\126\006\000\002\006" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\056\005\001\002\000\004\106\324\001" +
    "\002\000\004\010\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\010\003\011\011\012\057" +
    "\013\001\002\000\006\003\011\057\013\001\002\000\004" +
    "\106\ufffe\001\002\000\004\045\016\001\002\000\004\011" +
    "\015\001\002\000\004\106\uffff\001\002\000\004\012\017" +
    "\001\002\000\004\006\020\001\002\000\016\003\031\007" +
    "\ufff6\013\021\060\025\072\022\101\024\001\002\000\012" +
    "\003\312\060\025\072\022\101\024\001\002\000\004\006" +
    "\212\001\002\000\016\003\031\007\ufff6\013\021\060\025" +
    "\072\022\101\024\001\002\000\004\006\167\001\002\000" +
    "\004\012\040\001\002\000\016\003\031\007\ufff6\013\021" +
    "\060\025\072\022\101\024\001\002\000\004\007\034\001" +
    "\002\000\016\003\031\007\ufff6\013\021\060\025\072\022" +
    "\101\024\001\002\000\016\003\031\007\ufff6\013\021\060" +
    "\025\072\022\101\024\001\002\000\004\007\ufff5\001\002" +
    "\000\004\007\ufff8\001\002\000\006\011\ufffc\013\035\001" +
    "\002\000\006\003\011\057\013\001\002\000\004\011\ufffd" +
    "\001\002\000\004\007\ufffa\001\002\000\004\006\041\001" +
    "\002\000\006\007\043\047\042\001\002\000\004\012\046" +
    "\001\002\000\016\003\uffef\007\uffef\013\uffef\060\uffef\072" +
    "\uffef\101\uffef\001\002\000\004\007\045\001\002\000\016" +
    "\003\ufff0\007\ufff0\013\ufff0\060\ufff0\072\ufff0\101\ufff0\001" +
    "\002\000\004\010\047\001\002\000\004\061\050\001\002" +
    "\000\004\010\054\001\002\000\004\011\052\001\002\000" +
    "\006\007\uffed\047\042\001\002\000\004\007\uffee\001\002" +
    "\000\032\003\075\011\uffe0\013\072\035\071\062\077\063" +
    "\073\064\076\065\070\066\100\070\067\071\074\077\063" +
    "\001\002\000\032\003\075\011\uffe0\013\072\035\071\062" +
    "\077\063\073\064\076\065\070\066\100\070\067\071\074" +
    "\077\063\001\002\000\032\003\075\011\uffe0\013\072\035" +
    "\071\062\077\063\073\064\076\065\070\066\100\070\067" +
    "\071\074\077\063\001\002\000\032\003\075\011\uffe0\013" +
    "\072\035\071\062\077\063\073\064\076\065\070\066\100" +
    "\070\067\071\074\077\063\001\002\000\032\003\075\011" +
    "\uffe0\013\072\035\071\062\077\063\073\064\076\065\070" +
    "\066\100\070\067\071\074\077\063\001\002\000\032\003" +
    "\075\011\uffe0\013\072\035\071\062\077\063\073\064\076" +
    "\065\070\066\100\070\067\071\074\077\063\001\002\000" +
    "\032\003\075\011\uffe0\013\072\035\071\062\077\063\073" +
    "\064\076\065\070\066\100\070\067\071\074\077\063\001" +
    "\002\000\004\012\157\001\002\000\032\003\075\011\uffe0" +
    "\013\072\035\071\062\077\063\073\064\076\065\070\066" +
    "\100\070\067\071\074\077\063\001\002\000\032\003\075" +
    "\011\uffe0\013\072\035\071\062\077\063\073\064\076\065" +
    "\070\066\100\070\067\071\074\077\063\001\002\000\004" +
    "\011\152\001\002\000\004\012\150\001\002\000\004\012" +
    "\146\001\002\000\004\012\144\001\002\000\026\003\127" +
    "\035\071\062\077\063\073\064\076\065\070\066\100\070" +
    "\067\071\074\077\063\001\002\000\004\012\115\001\002" +
    "\000\004\012\112\001\002\000\032\003\075\011\uffe0\013" +
    "\072\035\071\062\077\063\073\064\076\065\070\066\100" +
    "\070\067\071\074\077\063\001\002\000\004\012\107\001" +
    "\002\000\004\012\105\001\002\000\004\012\103\001\002" +
    "\000\032\003\075\011\uffe0\013\072\035\071\062\077\063" +
    "\073\064\076\065\070\066\100\070\067\071\074\077\063" +
    "\001\002\000\004\011\uffe2\001\002\000\004\045\104\001" +
    "\002\000\032\003\uffcf\011\uffcf\013\uffcf\035\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\070\uffcf\071\uffcf\077" +
    "\uffcf\001\002\000\004\047\106\001\002\000\032\003\uffd3" +
    "\011\uffd3\013\uffd3\035\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\070\uffd3\071\uffd3\077\uffd3\001\002\000\004" +
    "\045\110\001\002\000\032\003\uffd1\011\uffd1\013\uffd1\035" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1" +
    "\071\uffd1\077\uffd1\001\002\000\004\011\uffdf\001\002\000" +
    "\006\004\114\005\113\001\002\000\032\003\uffcb\011\uffcb" +
    "\013\uffcb\035\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\070\uffcb\071\uffcb\077\uffcb\001\002\000\032\003\uffcc" +
    "\011\uffcc\013\uffcc\035\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\070\uffcc\071\uffcc\077\uffcc\001\002\000\004" +
    "\047\116\001\002\000\032\003\uffd2\011\uffd2\013\uffd2\035" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2" +
    "\071\uffd2\077\uffd2\001\002\000\032\003\075\011\uffe0\013" +
    "\072\035\071\062\077\063\073\064\076\065\070\066\100" +
    "\070\067\071\074\077\063\001\002\000\032\003\075\011" +
    "\uffe0\013\072\035\071\062\077\063\073\064\076\065\070" +
    "\066\100\070\067\071\074\077\063\001\002\000\032\003" +
    "\075\011\uffe0\013\072\035\071\062\077\063\073\064\076" +
    "\065\070\066\100\070\067\071\074\077\063\001\002\000" +
    "\032\003\075\011\uffe0\013\072\035\071\062\077\063\073" +
    "\064\076\065\070\066\100\070\067\071\074\077\063\001" +
    "\002\000\032\003\075\011\uffe0\013\072\035\071\062\077" +
    "\063\073\064\076\065\070\066\100\070\067\071\074\077" +
    "\063\001\002\000\032\003\075\011\uffe0\013\072\035\071" +
    "\062\077\063\073\064\076\065\070\066\100\070\067\071" +
    "\074\077\063\001\002\000\032\003\075\011\uffe0\013\072" +
    "\035\071\062\077\063\073\064\076\065\070\066\100\070" +
    "\067\071\074\077\063\001\002\000\032\003\075\011\uffe0" +
    "\013\072\035\071\062\077\063\073\064\076\065\070\066" +
    "\100\070\067\071\074\077\063\001\002\000\032\003\075" +
    "\011\uffe0\013\072\035\071\062\077\063\073\064\076\065" +
    "\070\066\100\070\067\071\074\077\063\001\002\000\004" +
    "\011\uffe1\001\002\000\032\003\075\011\uffe0\013\072\035" +
    "\071\062\077\063\073\064\076\065\070\066\100\070\067" +
    "\071\074\077\063\001\002\000\004\011\uffd6\001\002\000" +
    "\004\011\uffd5\001\002\000\004\011\uffde\001\002\000\004" +
    "\011\uffdd\001\002\000\004\011\uffdc\001\002\000\004\011" +
    "\uffdb\001\002\000\004\011\uffda\001\002\000\004\011\uffd9" +
    "\001\002\000\004\011\uffd8\001\002\000\004\011\uffd7\001" +
    "\002\000\004\046\145\001\002\000\032\003\uffce\011\uffce" +
    "\013\uffce\035\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\070\uffce\071\uffce\077\uffce\001\002\000\004\045\147" +
    "\001\002\000\032\003\uffd0\011\uffd0\013\uffd0\035\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0" +
    "\077\uffd0\001\002\000\004\045\151\001\002\000\032\003" +
    "\uffcd\011\uffcd\013\uffcd\035\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\070\uffcd\071\uffcd\077\uffcd\001\002\000" +
    "\006\011\uffeb\013\153\001\002\000\004\061\050\001\002" +
    "\000\004\011\uffec\001\002\000\004\011\uffea\001\002\000" +
    "\004\011\uffe9\001\002\000\004\045\160\001\002\000\032" +
    "\003\uffd4\011\uffd4\013\uffd4\035\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4\077\uffd4\001\002" +
    "\000\004\011\uffe8\001\002\000\004\011\uffe7\001\002\000" +
    "\004\011\uffe6\001\002\000\004\011\uffe5\001\002\000\004" +
    "\011\uffe4\001\002\000\004\011\uffe3\001\002\000\012\003" +
    "\171\007\uffaa\013\170\074\174\001\002\000\006\003\204" +
    "\074\174\001\002\000\012\003\171\007\uffaa\013\170\074" +
    "\174\001\002\000\012\003\171\007\uffaa\013\170\074\174" +
    "\001\002\000\004\007\201\001\002\000\004\047\175\001" +
    "\002\000\004\012\176\001\002\000\006\004\200\005\177" +
    "\001\002\000\012\003\uffa5\007\uffa5\013\uffa5\074\uffa5\001" +
    "\002\000\012\003\uffa6\007\uffa6\013\uffa6\074\uffa6\001\002" +
    "\000\016\003\uffad\007\uffad\013\uffad\060\uffad\072\uffad\101" +
    "\uffad\001\002\000\004\007\uffac\001\002\000\004\007\uffa9" +
    "\001\002\000\012\003\171\007\uffaa\013\170\074\174\001" +
    "\002\000\004\007\uffab\001\002\000\012\003\171\007\uffaa" +
    "\013\170\074\174\001\002\000\004\007\uffa8\001\002\000" +
    "\004\007\uffa7\001\002\000\004\007\ufff9\001\002\000\006" +
    "\007\215\047\213\001\002\000\004\006\217\001\002\000" +
    "\004\007\216\001\002\000\016\003\uffc9\007\uffc9\013\uffc9" +
    "\060\uffc9\072\uffc9\101\uffc9\001\002\000\016\003\uffca\007" +
    "\uffca\013\uffca\060\uffca\072\uffca\101\uffca\001\002\000\004" +
    "\047\220\001\002\000\004\010\224\001\002\000\004\007" +
    "\222\001\002\000\006\007\uffc7\047\213\001\002\000\004" +
    "\007\uffc8\001\002\000\024\003\234\011\uffbd\013\225\073" +
    "\235\074\226\075\231\077\240\104\233\105\232\001\002" +
    "\000\020\003\276\073\235\074\226\075\231\077\240\104" +
    "\233\105\232\001\002\000\004\012\270\001\002\000\024" +
    "\003\234\011\uffbd\013\225\073\235\074\226\075\231\077" +
    "\240\104\233\105\232\001\002\000\024\003\234\011\uffbd" +
    "\013\225\073\235\074\226\075\231\077\240\104\233\105" +
    "\232\001\002\000\004\012\264\001\002\000\004\012\262" +
    "\001\002\000\004\012\260\001\002\000\024\003\234\011" +
    "\uffbd\013\225\073\235\074\226\075\231\077\240\104\233" +
    "\105\232\001\002\000\004\012\255\001\002\000\024\003" +
    "\234\011\uffbd\013\225\073\235\074\226\075\231\077\240" +
    "\104\233\105\232\001\002\000\024\003\234\011\uffbd\013" +
    "\225\073\235\074\226\075\231\077\240\104\233\105\232" +
    "\001\002\000\004\012\251\001\002\000\024\003\234\011" +
    "\uffbd\013\225\073\235\074\226\075\231\077\240\104\233" +
    "\105\232\001\002\000\024\003\234\011\uffbd\013\225\073" +
    "\235\074\226\075\231\077\240\104\233\105\232\001\002" +
    "\000\004\011\244\001\002\000\006\007\uffc5\013\245\001" +
    "\002\000\004\047\220\001\002\000\004\007\uffc6\001\002" +
    "\000\004\011\uffc4\001\002\000\004\011\uffc3\001\002\000" +
    "\004\045\252\001\002\000\024\003\uffae\011\uffae\013\uffae" +
    "\073\uffae\074\uffae\075\uffae\077\uffae\104\uffae\105\uffae\001" +
    "\002\000\004\011\uffc2\001\002\000\004\011\uffc1\001\002" +
    "\000\004\045\256\001\002\000\024\003\uffb4\011\uffb4\013" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\077\uffb4\104\uffb4\105\uffb4" +
    "\001\002\000\004\011\uffbc\001\002\000\004\045\261\001" +
    "\002\000\024\003\uffb1\011\uffb1\013\uffb1\073\uffb1\074\uffb1" +
    "\075\uffb1\077\uffb1\104\uffb1\105\uffb1\001\002\000\004\047" +
    "\263\001\002\000\024\003\uffb0\011\uffb0\013\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\077\uffb0\104\uffb0\105\uffb0\001\002\000" +
    "\004\047\265\001\002\000\024\003\uffaf\011\uffaf\013\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\077\uffaf\104\uffaf\105\uffaf\001" +
    "\002\000\004\011\uffc0\001\002\000\004\011\uffbf\001\002" +
    "\000\006\067\272\100\271\001\002\000\024\003\uffb3\011" +
    "\uffb3\013\uffb3\073\uffb3\074\uffb3\075\uffb3\077\uffb3\104\uffb3" +
    "\105\uffb3\001\002\000\024\003\uffb2\011\uffb2\013\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\077\uffb2\104\uffb2\105\uffb2\001\002" +
    "\000\024\003\234\011\uffbd\013\225\073\235\074\226\075" +
    "\231\077\240\104\233\105\232\001\002\000\024\003\234" +
    "\011\uffbd\013\225\073\235\074\226\075\231\077\240\104" +
    "\233\105\232\001\002\000\004\011\uffbe\001\002\000\024" +
    "\003\234\011\uffbd\013\225\073\235\074\226\075\231\077" +
    "\240\104\233\105\232\001\002\000\024\003\234\011\uffbd" +
    "\013\225\073\235\074\226\075\231\077\240\104\233\105" +
    "\232\001\002\000\024\003\234\011\uffbd\013\225\073\235" +
    "\074\226\075\231\077\240\104\233\105\232\001\002\000" +
    "\024\003\234\011\uffbd\013\225\073\235\074\226\075\231" +
    "\077\240\104\233\105\232\001\002\000\024\003\234\011" +
    "\uffbd\013\225\073\235\074\226\075\231\077\240\104\233" +
    "\105\232\001\002\000\004\011\uffbb\001\002\000\004\011" +
    "\uffba\001\002\000\004\011\uffb9\001\002\000\004\011\uffb8" +
    "\001\002\000\004\011\uffb5\001\002\000\004\011\uffb7\001" +
    "\002\000\004\011\uffb6\001\002\000\016\003\031\007\ufff6" +
    "\013\021\060\025\072\022\101\024\001\002\000\016\003" +
    "\031\007\ufff6\013\021\060\025\072\022\101\024\001\002" +
    "\000\016\003\031\007\ufff6\013\021\060\025\072\022\101" +
    "\024\001\002\000\004\007\ufff7\001\002\000\016\003\031" +
    "\007\ufff6\013\021\060\025\072\022\101\024\001\002\000" +
    "\004\007\ufff2\001\002\000\004\007\ufff4\001\002\000\004" +
    "\007\ufff3\001\002\000\004\007\ufff1\001\002\000\004\011" +
    "\ufffb\001\002\000\004\012\326\001\002\000\004\002\000" +
    "\001\002\000\004\045\327\001\002\000\004\002\uffa4\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\002\005\005\003\001\001\000\004\006" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\013\001\001\000\004\120\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\104\022\121\026\123\025\131\027\001\001\000\012" +
    "\104\312\122\314\123\313\131\315\001\001\000\002\001" +
    "\001\000\012\104\022\121\210\123\025\131\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\104\022\121" +
    "\036\123\025\131\027\001\001\000\002\001\001\000\012" +
    "\104\022\121\032\123\025\131\027\001\001\000\012\104" +
    "\022\121\031\123\025\131\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\120\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\052\001\001\000\002\001\001\000\026" +
    "\105\064\106\063\107\061\110\060\111\057\112\056\113" +
    "\055\114\054\115\100\117\065\001\001\000\026\105\064" +
    "\106\063\107\061\110\060\111\057\112\056\113\055\114" +
    "\054\115\100\117\165\001\001\000\026\105\064\106\063" +
    "\107\061\110\060\111\057\112\056\113\055\114\054\115" +
    "\100\117\164\001\001\000\026\105\064\106\063\107\061" +
    "\110\060\111\057\112\056\113\055\114\054\115\100\117" +
    "\163\001\001\000\026\105\064\106\063\107\061\110\060" +
    "\111\057\112\056\113\055\114\054\115\100\117\162\001" +
    "\001\000\026\105\064\106\063\107\061\110\060\111\057" +
    "\112\056\113\055\114\054\115\100\117\161\001\001\000" +
    "\026\105\064\106\063\107\061\110\060\111\057\112\056" +
    "\113\055\114\054\115\100\117\160\001\001\000\002\001" +
    "\001\000\026\105\064\106\063\107\061\110\060\111\057" +
    "\112\056\113\055\114\054\115\100\117\155\001\001\000" +
    "\026\105\064\106\063\107\061\110\060\111\057\112\056" +
    "\113\055\114\054\115\100\117\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\105\125\106\124\107\123\110\122\111\121\112" +
    "\120\113\117\114\116\115\130\116\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\105\064\106\063\107" +
    "\061\110\060\111\057\112\056\113\055\114\054\115\100" +
    "\117\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\105\064\106\063\107\061\110\060" +
    "\111\057\112\056\113\055\114\054\115\100\117\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\105\064\106\063\107\061\110\060\111\057" +
    "\112\056\113\055\114\054\115\100\117\142\001\001\000" +
    "\026\105\064\106\063\107\061\110\060\111\057\112\056" +
    "\113\055\114\054\115\100\117\141\001\001\000\026\105" +
    "\064\106\063\107\061\110\060\111\057\112\056\113\055" +
    "\114\054\115\100\117\140\001\001\000\026\105\064\106" +
    "\063\107\061\110\060\111\057\112\056\113\055\114\054" +
    "\115\100\117\137\001\001\000\026\105\064\106\063\107" +
    "\061\110\060\111\057\112\056\113\055\114\054\115\100" +
    "\117\136\001\001\000\026\105\064\106\063\107\061\110" +
    "\060\111\057\112\056\113\055\114\054\115\100\117\135" +
    "\001\001\000\026\105\064\106\063\107\061\110\060\111" +
    "\057\112\056\113\055\114\054\115\100\117\134\001\001" +
    "\000\026\105\064\106\063\107\061\110\060\111\057\112" +
    "\056\113\055\114\054\115\100\117\133\001\001\000\026" +
    "\105\064\106\063\107\061\110\060\111\057\112\056\113" +
    "\055\114\054\115\100\117\132\001\001\000\002\001\001" +
    "\000\026\105\064\106\063\107\061\110\060\111\057\112" +
    "\056\113\055\114\054\115\100\117\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\125\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\126\171\130\172\001\001\000\006\126\205\127\204" +
    "\001\001\000\006\126\171\130\202\001\001\000\006\126" +
    "\171\130\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\126\171\130\207\001\001\000\002\001" +
    "\001\000\006\126\171\130\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\222\001\001\000\002" +
    "\001\001\000\020\072\242\074\241\075\240\076\236\077" +
    "\235\100\227\101\226\001\001\000\020\073\274\074\301" +
    "\075\300\076\277\077\276\100\273\101\272\001\001\000" +
    "\002\001\001\000\020\072\266\074\241\075\240\076\236" +
    "\077\235\100\227\101\226\001\001\000\020\072\265\074" +
    "\241\075\240\076\236\077\235\100\227\101\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\072\256\074\241\075\240\076\236\077\235\100\227" +
    "\101\226\001\001\000\002\001\001\000\020\072\253\074" +
    "\241\075\240\076\236\077\235\100\227\101\226\001\001" +
    "\000\020\072\252\074\241\075\240\076\236\077\235\100" +
    "\227\101\226\001\001\000\002\001\001\000\020\072\247" +
    "\074\241\075\240\076\236\077\235\100\227\101\226\001" +
    "\001\000\020\072\246\074\241\075\240\076\236\077\235" +
    "\100\227\101\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\072\310\074\241\075\240\076\236\077\235\100" +
    "\227\101\226\001\001\000\020\072\307\074\241\075\240" +
    "\076\236\077\235\100\227\101\226\001\001\000\002\001" +
    "\001\000\020\072\306\074\241\075\240\076\236\077\235" +
    "\100\227\101\226\001\001\000\020\072\305\074\241\075" +
    "\240\076\236\077\235\100\227\101\226\001\001\000\020" +
    "\072\304\074\241\075\240\076\236\077\235\100\227\101" +
    "\226\001\001\000\020\072\303\074\241\075\240\076\236" +
    "\077\235\100\227\101\226\001\001\000\020\072\302\074" +
    "\241\075\240\076\236\077\235\100\227\101\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\104\022\121\321\123\025\131\027\001" +
    "\001\000\012\104\022\121\320\123\025\131\027\001\001" +
    "\000\012\104\022\121\317\123\025\131\027\001\001\000" +
    "\002\001\001\000\012\104\022\121\316\123\025\131\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxReplay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxReplay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxReplay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;
    public String nombreJugador = "";
    public Integer noTurno = 0;
    public ArrayList<Replay> listReplay;

    public SintaxReplay(AnalizadorLexico3 lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas, ArrayList<Replay> listReplay){
        super(lex);
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnDistancia = btnDistancia;
        this.btnFlotas = btnFlotas;
        this.listReplay = listReplay;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }


    public void traspasoDatosFlotas(ArrayList<Replay> listReplay, ArrayList<Replay> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listReplay.add(listTemporal.get(i));
        }

    }

  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxReplay$actions {
  private final SintaxReplay parser;

  /** Constructor */
  CUP$SintaxReplay$actions(SintaxReplay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxReplay$do_action(
    int                        CUP$SintaxReplay$act_num,
    java_cup.runtime.lr_parser CUP$SintaxReplay$parser,
    java.util.Stack            CUP$SintaxReplay$stack,
    int                        CUP$SintaxReplay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxReplay$result;

      /* select the action based on the action number */
      switch (CUP$SintaxReplay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // a3 ::= turnoJugador DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 VentanaPrincipal.contador = (Integer) a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a3",4, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bz ::= estado ID DOS_PUNTOS FALSO 
            {
              ResumenTurno RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString()); resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bz",84, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bz ::= estado ID DOS_PUNTOS VERDADERO 
            {
              ResumenTurno RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString());  resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bz",84, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // p6 ::= error by 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> e = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p6",85, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // p6 ::= bz by 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ResumenTurno a = (ResumenTurno)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> e = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 e.add(a); RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p6",85, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // by ::= error by 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> e = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",86, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // by ::= 
            {
              ArrayList<ResumenTurno> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",86, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // by ::= COMA p6 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",86, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // by ::= bz by 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ResumenTurno a = (ResumenTurno)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<ResumenTurno> e = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 e.add(a); RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("by",86, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bx ::= RESUMEN LLAVE_A by LLAVE_B 
            {
              ArrayList<ResumenTurno> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bx",87, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bu ::= noFlota DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setNoFlota((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bu",61, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bt ::= mensaje DOS_PUNTOS ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos();  impacto.setMensaje(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bt",60, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc ::= planetaAtacante DOS_PUNTOS ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setPlanetaAtacante(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("cc",63, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cb ::= jugadorAtacante DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setJugadorAtacante((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("cb",62, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bs ::= estado DOS_PUNTOS CONQUISTADO 
            {
              Impactos RESULT =null;
		 Impactos impacto = new Impactos(); impacto.setEstado("CONQUISTADO"); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bs",59, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bs ::= estado DOS_PUNTOS VIVO 
            {
              Impactos RESULT =null;
		 Impactos impacto = new Impactos(); impacto.setEstado("VIVO"); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bs",59, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // br ::= navesRestantes DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setNavesRestantes((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("br",58, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // p7 ::= error bq 
            {
              Impactos RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // p7 ::= cc bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getPlanetaAtacante()==null){ e.setPlanetaAtacante(a.getPlanetaAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // p7 ::= cb bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getJugadorAtacante()==null){ e.setJugadorAtacante(a.getJugadorAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // p7 ::= bu bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // p7 ::= bt bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMensaje()==null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // p7 ::= bs bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getEstado()==null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // p7 ::= br bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNavesRestantes()==null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bq ::= error bq 
            {
              Impactos RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bq ::= 
            {
              Impactos RESULT =null;
		 RESULT=new Impactos(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bq ::= COMA p7 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bq ::= cc bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getPlanetaAtacante()==null){ e.setPlanetaAtacante(a.getPlanetaAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bq ::= cb bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getJugadorAtacante()==null){ e.setJugadorAtacante(a.getJugadorAtacante()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bq ::= bu bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bq ::= bt bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMensaje()==null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bq ::= bs bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getEstado()==null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bq ::= br bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNavesRestantes()==null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bv ::= ID AGRUPACION_A bq AGRUPACION_B 
            {
              ArrayList<Impactos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {  a.setNombrePlaneta(c.toString());  ArrayList<Impactos> listImpactos = new ArrayList<>();  listImpactos.add(a);  RESULT=listImpactos; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bv",64, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bv ::= ID AGRUPACION_A bq AGRUPACION_B COMA bv 
            {
              ArrayList<Impactos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Impactos> e = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {    a.setNombrePlaneta(c.toString()); e.add(a);   RESULT=e;  }  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bv",64, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bp ::= ID LLAVE_A bv LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Impactos> b = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString()); datos.setListImpactos(b); ArrayList<DatosImpacto> listDatos = new ArrayList<>(); listDatos.add(datos); RESULT=listDatos; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bp",65, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bp ::= ID LLAVE_A bv LLAVE_B bp 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		ArrayList<Impactos> b = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<DatosImpacto> c = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString());  datos.setListImpactos(b); c.add(datos); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bp",65, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bf ::= IMPACTOS LLAVE_A LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bf",66, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bf ::= IMPACTOS LLAVE_A bp LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bf",66, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bo ::= verificador DOS_PUNTOS FALSO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bo",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bo ::= verificador DOS_PUNTOS VERDADERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bo",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bn ::= turnoLlegada DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bn",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bm ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bm",73, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bl ::= noJugadorAtaque DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a);  RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bl",72, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bk ::= noJugadorEnvio DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bk",71, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bj ::= noNaves DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bj",70, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bi ::= planetaDestino DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bi",69, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bh ::= planetaOrigen DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bh",68, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bg ::= noFlota DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bg",67, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // p5 ::= error be 
            {
              NavesCamino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // p5 ::= bo be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // p5 ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // p5 ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // p5 ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // p5 ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // p5 ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // p5 ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // p5 ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // p5 ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // be ::= error be 
            {
              NavesCamino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // be ::= 
            {
              NavesCamino RESULT =null;
		 RESULT=new NavesCamino(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // be ::= COMA p5 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // be ::= bo be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // be ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // be ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // be ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // be ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // be ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // be ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // be ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // be ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bd ::= Flota AGRUPACION_A be AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { ArrayList<NavesCamino> listNaves = new ArrayList<>(); listNaves.add(a); RESULT=listNaves; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bd",83, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bd ::= Flota AGRUPACION_A be AGRUPACION_B COMA bd 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<NavesCamino> e = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bd",83, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bw ::= ID DOS_PUNTOS AGRUPACION_A bd AGRUPACION_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<NavesCamino> b = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); ArrayList<DatosAcciones> listAcciones = new ArrayList<>(); listAcciones.add(datos); RESULT=listAcciones; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bw",82, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bw ::= ID DOS_PUNTOS AGRUPACION_A bd AGRUPACION_B bw 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		ArrayList<NavesCamino> b = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<DatosAcciones> c = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); c.add(datos); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bw",82, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bc ::= ACCIONES DOS_PUNTOS LLAVE_A LLAVE_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bc",81, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bc ::= ACCIONES DOS_PUNTOS LLAVE_A bw LLAVE_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bc",81, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // p2 ::= error bb 
            {
              Replay RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // p2 ::= bx bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListResumen()==null){ e.setListResumen(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p2 ::= bf bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p2 ::= bc bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bb ::= error bb 
            {
              Replay RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bb ::= 
            {
              Replay RESULT =null;
		 RESULT=new Replay(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bb ::= COMA p2 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay a = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bb ::= bx bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<ResumenTurno> a = (ArrayList<ResumenTurno>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListResumen()==null){ e.setListResumen(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bb ::= bf bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bb ::= bc bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ba ::= error ba 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Replay> a = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ba ::= TURNO ENTERO DOS_PUNTOS LLAVE_A bb LLAVE_B 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Replay b = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 b.setNoTurno((Integer) a); ArrayList<Replay> listReplay = new ArrayList<>(); listReplay.add(b); RESULT=listReplay; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ba ::= TURNO ENTERO DOS_PUNTOS LLAVE_A bb LLAVE_B COMA ba 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Replay b = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Replay> c = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 b.setNoTurno((Integer) a); c.add(b); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // a2 ::= SECUENCIAS AGRUPACION_A AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a2 ::= SECUENCIAS AGRUPACION_A ba AGRUPACION_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Replay> a = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		   parser.traspasoDatosFlotas(parser.listReplay, a);         
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= a2 a3 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = start_val;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxReplay$parser.done_parsing();
          return CUP$SintaxReplay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

