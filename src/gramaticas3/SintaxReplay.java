
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 20 23:36:44 CST 2020
//----------------------------------------------------

package gramaticas3;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.Impactos;
import Pollitos.DatosImpacto;
import Pollitos.NavesCamino;
import Pollitos.Replay;
import Pollitos.DatosAcciones;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 20 23:36:44 CST 2020
  */
public class SintaxReplay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxReplay() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\320\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\002\000" +
    "\002\012\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\027" +
    "\006\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\015\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\017\007\000\002\020\005\000\002" +
    "\020\005\000\002\021\011\000\002\021\011\000\002\014" +
    "\007\000\002\016\005\000\002\022\005\000\002\022\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\007\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\002\000\002\053\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\050\005\000\002\050\005\000\002\051\005\000" +
    "\002\051\005\000\002\052\005\000\002\026\005\000\002" +
    "\065\007\000\002\065\006\000\002\064\007\000\002\064" +
    "\005\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\002\000\002\031\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\030\007\000\002\033\005\000\002\034\005\000" +
    "\002\035\005\000\002\036\005\000\002\037\005\000\002" +
    "\067\007\000\002\067\006\000\002\066\007\000\002\066" +
    "\005\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\002\000\002\042\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\044\007\000\002\045\005\000\002\046\005\000" +
    "\002\047\005\000\002\040\005\000\002\041\005\000\002" +
    "\070\007\000\002\070\006\000\002\071\007\000\002\071" +
    "\005\000\002\055\004\000\002\055\004\000\002\055\004" +
    "\000\002\055\004\000\002\055\004\000\002\055\002\000" +
    "\002\055\004\000\002\056\004\000\002\056\004\000\002" +
    "\056\004\000\002\056\004\000\002\056\004\000\002\057" +
    "\007\000\002\060\007\000\002\063\007\000\002\063\006" +
    "\000\002\063\002\000\002\061\007\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\005\006\000\002" +
    "\005\005\000\002\116\011\000\002\116\007\000\002\117" +
    "\004\000\002\117\004\000\002\117\004\000\002\117\002" +
    "\000\002\120\004\000\002\120\004\000\002\121\006\000" +
    "\002\121\005\000\002\122\010\000\002\122\007\000\002" +
    "\123\010\000\002\123\006\000\002\115\004\000\002\115" +
    "\004\000\002\115\004\000\002\115\004\000\002\115\004" +
    "\000\002\115\004\000\002\115\004\000\002\115\004\000" +
    "\002\115\004\000\002\115\004\000\002\115\002\000\002" +
    "\114\004\000\002\114\004\000\002\114\004\000\002\114" +
    "\004\000\002\114\004\000\002\114\004\000\002\114\004" +
    "\000\002\114\004\000\002\114\004\000\002\103\005\000" +
    "\002\104\005\000\002\105\005\000\002\106\005\000\002" +
    "\107\005\000\002\110\005\000\002\111\005\000\002\112" +
    "\005\000\002\113\005\000\002\113\005\000\002\102\006" +
    "\000\002\102\005\000\002\101\010\000\002\101\006\000" +
    "\002\100\010\000\002\100\006\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\004\000\002\072" +
    "\004\000\002\072\002\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\004\000\002\074\005\000" +
    "\002\075\005\000\002\075\006\000\002\076\005\000\002" +
    "\077\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\004\006\006\001\002\000\004\056\u014d\001" +
    "\002\000\004\002\u014b\001\002\000\020\003\016\007\ufff9" +
    "\013\010\016\014\032\007\036\011\037\020\001\002\000" +
    "\004\012\u010f\001\002\000\014\003\u0107\016\014\032\007" +
    "\036\011\037\020\001\002\000\004\012\310\001\002\000" +
    "\020\003\016\007\ufff9\013\010\016\014\032\007\036\011" +
    "\037\020\001\002\000\020\003\016\007\ufff9\013\010\016" +
    "\014\032\007\036\011\037\020\001\002\000\004\012\120" +
    "\001\002\000\004\007\117\001\002\000\020\003\016\007" +
    "\ufff9\013\010\016\014\032\007\036\011\037\020\001\002" +
    "\000\020\003\016\007\ufff9\013\010\016\014\032\007\036" +
    "\011\037\020\001\002\000\004\012\023\001\002\000\020" +
    "\003\016\007\ufff9\013\010\016\014\032\007\036\011\037" +
    "\020\001\002\000\004\007\ufffb\001\002\000\004\010\024" +
    "\001\002\000\006\006\027\011\026\001\002\000\004\011" +
    "\114\001\002\000\020\003\uff8c\007\uff8c\013\uff8c\016\uff8c" +
    "\032\uff8c\036\uff8c\037\uff8c\001\002\000\020\003\034\007" +
    "\uff84\013\030\033\042\040\033\041\037\052\031\001\002" +
    "\000\014\003\103\033\042\040\033\041\037\052\031\001" +
    "\002\000\004\012\075\001\002\000\020\003\034\007\uff84" +
    "\013\030\033\042\040\033\041\037\052\031\001\002\000" +
    "\004\012\062\001\002\000\020\003\034\007\uff84\013\030" +
    "\033\042\040\033\041\037\052\031\001\002\000\020\003" +
    "\034\007\uff84\013\030\033\042\040\033\041\037\052\031" +
    "\001\002\000\020\003\034\007\uff84\013\030\033\042\040" +
    "\033\041\037\052\031\001\002\000\004\012\053\001\002" +
    "\000\020\003\034\007\uff84\013\030\033\042\040\033\041" +
    "\037\052\031\001\002\000\004\007\047\001\002\000\004" +
    "\012\043\001\002\000\004\015\044\001\002\000\004\047" +
    "\045\001\002\000\004\015\046\001\002\000\020\003\uff7d" +
    "\007\uff7d\013\uff7d\033\uff7d\040\uff7d\041\uff7d\052\uff7d\001" +
    "\002\000\006\011\uff8a\013\050\001\002\000\004\006\027" +
    "\001\002\000\004\011\uff8b\001\002\000\004\007\uff89\001" +
    "\002\000\010\042\054\043\055\044\056\001\002\000\020" +
    "\003\uff75\007\uff75\013\uff75\033\uff75\040\uff75\041\uff75\052" +
    "\uff75\001\002\000\020\003\uff76\007\uff76\013\uff76\033\uff76" +
    "\040\uff76\041\uff76\052\uff76\001\002\000\020\003\uff77\007" +
    "\uff77\013\uff77\033\uff77\040\uff77\041\uff77\052\uff77\001\002" +
    "\000\004\007\uff88\001\002\000\004\007\uff87\001\002\000" +
    "\004\007\uff83\001\002\000\004\010\063\001\002\000\006" +
    "\011\uff79\015\065\001\002\000\004\011\073\001\002\000" +
    "\004\047\066\001\002\000\004\015\067\001\002\000\010" +
    "\011\uff79\013\070\015\065\001\002\000\006\011\uff79\015" +
    "\065\001\002\000\004\011\uff7a\001\002\000\004\011\uff7b" +
    "\001\002\000\020\003\uff7c\007\uff7c\013\uff7c\033\uff7c\040" +
    "\uff7c\041\uff7c\052\uff7c\001\002\000\004\007\uff86\001\002" +
    "\000\004\015\076\001\002\000\004\055\077\001\002\000" +
    "\004\015\100\001\002\000\020\003\uff78\007\uff78\013\uff78" +
    "\033\uff78\040\uff78\041\uff78\052\uff78\001\002\000\004\007" +
    "\uff85\001\002\000\020\003\034\007\uff84\013\030\033\042" +
    "\040\033\041\037\052\031\001\002\000\020\003\034\007" +
    "\uff84\013\030\033\042\040\033\041\037\052\031\001\002" +
    "\000\020\003\034\007\uff84\013\030\033\042\040\033\041" +
    "\037\052\031\001\002\000\020\003\034\007\uff84\013\030" +
    "\033\042\040\033\041\037\052\031\001\002\000\020\003" +
    "\034\007\uff84\013\030\033\042\040\033\041\037\052\031" +
    "\001\002\000\004\007\uff82\001\002\000\004\007\uff81\001" +
    "\002\000\004\007\uff80\001\002\000\004\007\uff7e\001\002" +
    "\000\004\007\uff7f\001\002\000\020\003\uff8d\007\uff8d\013" +
    "\uff8d\016\uff8d\032\uff8d\036\uff8d\037\uff8d\001\002\000\004" +
    "\007\ufffe\001\002\000\004\007\ufff8\001\002\000\004\056" +
    "\uffff\001\002\000\004\006\121\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\004\012\303" +
    "\001\002\000\004\012\300\001\002\000\024\003\257\017" +
    "\130\020\127\021\124\022\144\023\126\024\145\025\131" +
    "\031\123\001\002\000\004\012\252\001\002\000\004\012" +
    "\230\001\002\000\004\012\224\001\002\000\004\012\163" +
    "\001\002\000\030\003\132\007\135\013\125\017\130\020" +
    "\127\021\124\022\144\023\126\024\145\025\131\031\123" +
    "\001\002\000\030\003\132\007\135\013\125\017\130\020" +
    "\127\021\124\022\144\023\126\024\145\025\131\031\123" +
    "\001\002\000\030\003\132\007\135\013\125\017\130\020" +
    "\127\021\124\022\144\023\126\024\145\025\131\031\123" +
    "\001\002\000\020\003\uffe8\007\uffe8\013\uffe8\016\uffe8\032" +
    "\uffe8\036\uffe8\037\uffe8\001\002\000\030\003\132\007\135" +
    "\013\125\017\130\020\127\021\124\022\144\023\126\024" +
    "\145\025\131\031\123\001\002\000\030\003\132\007\135" +
    "\013\125\017\130\020\127\021\124\022\144\023\126\024" +
    "\145\025\131\031\123\001\002\000\030\003\132\007\135" +
    "\013\125\017\130\020\127\021\124\022\144\023\126\024" +
    "\145\025\131\031\123\001\002\000\030\003\132\007\135" +
    "\013\125\017\130\020\127\021\124\022\144\023\126\024" +
    "\145\025\131\031\123\001\002\000\030\003\132\007\135" +
    "\013\125\017\130\020\127\021\124\022\144\023\126\024" +
    "\145\025\131\031\123\001\002\000\020\003\ufff2\007\ufff2" +
    "\013\ufff2\016\ufff2\032\ufff2\036\ufff2\037\ufff2\001\002\000" +
    "\004\012\151\001\002\000\004\012\146\001\002\000\006" +
    "\004\150\005\147\001\002\000\030\003\uffd3\007\uffd3\013" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\031\uffd3\001\002\000\030\003\uffd4\007\uffd4\013" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\031\uffd4\001\002\000\004\045\152\001\002\000" +
    "\030\003\uffd7\007\uffd7\013\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7\001\002\000" +
    "\020\003\ufff1\007\ufff1\013\ufff1\016\ufff1\032\ufff1\036\ufff1" +
    "\037\ufff1\001\002\000\020\003\uffef\007\uffef\013\uffef\016" +
    "\uffef\032\uffef\036\uffef\037\uffef\001\002\000\020\003\uffee" +
    "\007\uffee\013\uffee\016\uffee\032\uffee\036\uffee\037\uffee\001" +
    "\002\000\020\003\ufff0\007\ufff0\013\ufff0\016\ufff0\032\ufff0" +
    "\036\ufff0\037\ufff0\001\002\000\020\003\uffed\007\uffed\013" +
    "\uffed\016\uffed\032\uffed\036\uffed\037\uffed\001\002\000\020" +
    "\003\uffec\007\uffec\013\uffec\016\uffec\032\uffec\036\uffec\037" +
    "\uffec\001\002\000\020\003\uffea\007\uffea\013\uffea\016\uffea" +
    "\032\uffea\036\uffea\037\uffea\001\002\000\020\003\uffe7\007" +
    "\uffe7\013\uffe7\016\uffe7\032\uffe7\036\uffe7\037\uffe7\001\002" +
    "\000\004\006\164\001\002\000\016\003\175\007\uffcd\013" +
    "\165\026\173\027\166\030\174\001\002\000\012\003\214" +
    "\026\173\027\166\030\174\001\002\000\004\012\210\001" +
    "\002\000\016\003\175\007\uffcd\013\165\026\173\027\166" +
    "\030\174\001\002\000\016\003\175\007\uffcd\013\165\026" +
    "\173\027\166\030\174\001\002\000\016\003\175\007\uffcd" +
    "\013\165\026\173\027\166\030\174\001\002\000\004\007" +
    "\204\001\002\000\004\012\201\001\002\000\004\012\177" +
    "\001\002\000\016\003\175\007\uffcd\013\165\026\173\027" +
    "\166\030\174\001\002\000\004\007\uffcc\001\002\000\004" +
    "\045\200\001\002\000\016\003\uffc3\007\uffc3\013\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\001\002\000\006\004\203\005\202" +
    "\001\002\000\016\003\uffc6\007\uffc6\013\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\001\002\000\016\003\uffc7\007\uffc7\013\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\001\002\000\030\003\uffd2\007" +
    "\uffd2\013\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\031\uffd2\001\002\000\004\007\uffd1\001" +
    "\002\000\004\007\uffd0\001\002\000\004\007\uffcf\001\002" +
    "\000\006\004\212\005\211\001\002\000\016\003\uffc4\007" +
    "\uffc4\013\uffc4\026\uffc4\027\uffc4\030\uffc4\001\002\000\016" +
    "\003\uffc5\007\uffc5\013\uffc5\026\uffc5\027\uffc5\030\uffc5\001" +
    "\002\000\016\003\175\007\uffcd\013\165\026\173\027\166" +
    "\030\174\001\002\000\016\003\175\007\uffcd\013\165\026" +
    "\173\027\166\030\174\001\002\000\004\007\uffce\001\002" +
    "\000\016\003\175\007\uffcd\013\165\026\173\027\166\030" +
    "\174\001\002\000\016\003\175\007\uffcd\013\165\026\173" +
    "\027\166\030\174\001\002\000\004\007\uffca\001\002\000" +
    "\004\007\uffc9\001\002\000\004\007\uffc8\001\002\000\004" +
    "\007\uffcb\001\002\000\004\015\225\001\002\000\004\047" +
    "\226\001\002\000\004\015\227\001\002\000\030\003\uffd8" +
    "\007\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\031\uffd8\001\002\000\004\006\231" +
    "\001\002\000\006\050\234\051\233\001\002\000\004\007" +
    "\251\001\002\000\004\012\243\001\002\000\004\012\235" +
    "\001\002\000\004\045\236\001\002\000\004\013\237\001" +
    "\002\000\004\051\240\001\002\000\004\012\241\001\002" +
    "\000\004\045\242\001\002\000\004\007\uffda\001\002\000" +
    "\004\045\244\001\002\000\004\013\245\001\002\000\004" +
    "\050\246\001\002\000\004\012\247\001\002\000\004\045" +
    "\250\001\002\000\004\007\uffd9\001\002\000\030\003\uffdd" +
    "\007\uffdd\013\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\031\uffdd\001\002\000\006\004\254" +
    "\005\253\001\002\000\030\003\uffd5\007\uffd5\013\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\031\uffd5\001\002\000\030\003\uffd6\007\uffd6\013\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\031\uffd6\001\002\000\030\003\132\007\135\013\125\017" +
    "\130\020\127\021\124\022\144\023\126\024\145\025\131" +
    "\031\123\001\002\000\020\003\uffe9\007\uffe9\013\uffe9\016" +
    "\uffe9\032\uffe9\036\uffe9\037\uffe9\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\030\003\132" +
    "\007\135\013\125\017\130\020\127\021\124\022\144\023" +
    "\126\024\145\025\131\031\123\001\002\000\020\003\uffe6" +
    "\007\uffe6\013\uffe6\016\uffe6\032\uffe6\036\uffe6\037\uffe6\001" +
    "\002\000\020\003\uffe4\007\uffe4\013\uffe4\016\uffe4\032\uffe4" +
    "\036\uffe4\037\uffe4\001\002\000\020\003\uffe3\007\uffe3\013" +
    "\uffe3\016\uffe3\032\uffe3\036\uffe3\037\uffe3\001\002\000\020" +
    "\003\uffe5\007\uffe5\013\uffe5\016\uffe5\032\uffe5\036\uffe5\037" +
    "\uffe5\001\002\000\020\003\uffe2\007\uffe2\013\uffe2\016\uffe2" +
    "\032\uffe2\036\uffe2\037\uffe2\001\002\000\020\003\uffe1\007" +
    "\uffe1\013\uffe1\016\uffe1\032\uffe1\036\uffe1\037\uffe1\001\002" +
    "\000\020\003\uffdf\007\uffdf\013\uffdf\016\uffdf\032\uffdf\036" +
    "\uffdf\037\uffdf\001\002\000\020\003\uffde\007\uffde\013\uffde" +
    "\016\uffde\032\uffde\036\uffde\037\uffde\001\002\000\020\003" +
    "\uffe0\007\uffe0\013\uffe0\016\uffe0\032\uffe0\036\uffe0\037\uffe0" +
    "\001\002\000\006\004\302\005\301\001\002\000\030\003" +
    "\uffdb\007\uffdb\013\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\031\uffdb\001\002\000\030\003" +
    "\uffdc\007\uffdc\013\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\031\uffdc\001\002\000\004\045" +
    "\304\001\002\000\030\003\uffc2\007\uffc2\013\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\031" +
    "\uffc2\001\002\000\020\003\uffeb\007\uffeb\013\uffeb\016\uffeb" +
    "\032\uffeb\036\uffeb\037\uffeb\001\002\000\004\007\ufffc\001" +
    "\002\000\004\007\ufffd\001\002\000\004\010\311\001\002" +
    "\000\006\006\314\011\313\001\002\000\004\011\u0103\001" +
    "\002\000\020\003\uffa6\007\uffa6\013\uffa6\016\uffa6\032\uffa6" +
    "\036\uffa6\037\uffa6\001\002\000\024\003\326\007\uff9c\013" +
    "\320\030\321\033\330\034\324\035\331\053\317\054\315" +
    "\001\002\000\004\012\u0101\001\002\000\024\003\326\007" +
    "\uff9c\013\320\030\321\033\330\034\324\035\331\053\317" +
    "\054\315\001\002\000\004\012\376\001\002\000\020\003" +
    "\364\030\321\033\330\034\324\035\331\053\317\054\315" +
    "\001\002\000\004\012\355\001\002\000\024\003\326\007" +
    "\uff9c\013\320\030\321\033\330\034\324\035\331\053\317" +
    "\054\315\001\002\000\024\003\326\007\uff9c\013\320\030" +
    "\321\033\330\034\324\035\331\053\317\054\315\001\002" +
    "\000\004\012\351\001\002\000\024\003\326\007\uff9c\013" +
    "\320\030\321\033\330\034\324\035\331\053\317\054\315" +
    "\001\002\000\024\003\326\007\uff9c\013\320\030\321\033" +
    "\330\034\324\035\331\053\317\054\315\001\002\000\004" +
    "\007\344\001\002\000\004\012\340\001\002\000\004\012" +
    "\336\001\002\000\024\003\326\007\uff9c\013\320\030\321" +
    "\033\330\034\324\035\331\053\317\054\315\001\002\000" +
    "\024\003\326\007\uff9c\013\320\030\321\033\330\034\324" +
    "\035\331\053\317\054\315\001\002\000\004\007\uffa1\001" +
    "\002\000\004\007\uffa0\001\002\000\004\046\337\001\002" +
    "\000\024\003\uff90\007\uff90\013\uff90\030\uff90\033\uff90\034" +
    "\uff90\035\uff90\053\uff90\054\uff90\001\002\000\004\015\341" +
    "\001\002\000\004\047\342\001\002\000\004\015\343\001" +
    "\002\000\024\003\uff93\007\uff93\013\uff93\030\uff93\033\uff93" +
    "\034\uff93\035\uff93\053\uff93\054\uff93\001\002\000\006\011" +
    "\uffa4\013\345\001\002\000\004\006\314\001\002\000\004" +
    "\011\uffa5\001\002\000\004\007\uff9b\001\002\000\004\007" +
    "\uffa3\001\002\000\004\045\352\001\002\000\024\003\uff92" +
    "\007\uff92\013\uff92\030\uff92\033\uff92\034\uff92\035\uff92\053" +
    "\uff92\054\uff92\001\002\000\004\007\uff9f\001\002\000\004" +
    "\007\uff9e\001\002\000\004\045\356\001\002\000\024\003" +
    "\uff91\007\uff91\013\uff91\030\uff91\033\uff91\034\uff91\035\uff91" +
    "\053\uff91\054\uff91\001\002\000\024\003\326\007\uff9c\013" +
    "\320\030\321\033\330\034\324\035\331\053\317\054\315" +
    "\001\002\000\004\007\uff9d\001\002\000\024\003\326\007" +
    "\uff9c\013\320\030\321\033\330\034\324\035\331\053\317" +
    "\054\315\001\002\000\024\003\326\007\uff9c\013\320\030" +
    "\321\033\330\034\324\035\331\053\317\054\315\001\002" +
    "\000\024\003\326\007\uff9c\013\320\030\321\033\330\034" +
    "\324\035\331\053\317\054\315\001\002\000\024\003\326" +
    "\007\uff9c\013\320\030\321\033\330\034\324\035\331\053" +
    "\317\054\315\001\002\000\024\003\326\007\uff9c\013\320" +
    "\030\321\033\330\034\324\035\331\053\317\054\315\001" +
    "\002\000\024\003\326\007\uff9c\013\320\030\321\033\330" +
    "\034\324\035\331\053\317\054\315\001\002\000\004\007" +
    "\uff98\001\002\000\004\007\uff97\001\002\000\004\007\uff94" +
    "\001\002\000\004\007\uff9a\001\002\000\004\007\uff96\001" +
    "\002\000\004\007\uff95\001\002\000\004\007\uff99\001\002" +
    "\000\004\045\377\001\002\000\024\003\uff8f\007\uff8f\013" +
    "\uff8f\030\uff8f\033\uff8f\034\uff8f\035\uff8f\053\uff8f\054\uff8f" +
    "\001\002\000\004\007\uffa2\001\002\000\004\045\u0102\001" +
    "\002\000\024\003\uff8e\007\uff8e\013\uff8e\030\uff8e\033\uff8e" +
    "\034\uff8e\035\uff8e\053\uff8e\054\uff8e\001\002\000\020\003" +
    "\uffa7\007\uffa7\013\uffa7\016\uffa7\032\uffa7\036\uffa7\037\uffa7" +
    "\001\002\000\020\003\016\007\ufff9\013\010\016\014\032" +
    "\007\036\011\037\020\001\002\000\020\003\016\007\ufff9" +
    "\013\010\016\014\032\007\036\011\037\020\001\002\000" +
    "\004\007\ufffa\001\002\000\020\003\016\007\ufff9\013\010" +
    "\016\014\032\007\036\011\037\020\001\002\000\020\003" +
    "\016\007\ufff9\013\010\016\014\032\007\036\011\037\020" +
    "\001\002\000\020\003\016\007\ufff9\013\010\016\014\032" +
    "\007\036\011\037\020\001\002\000\004\007\ufff4\001\002" +
    "\000\004\007\ufff7\001\002\000\004\007\ufff3\001\002\000" +
    "\004\007\ufff5\001\002\000\004\007\ufff6\001\002\000\004" +
    "\010\u0110\001\002\000\006\006\u0113\011\u0112\001\002\000" +
    "\004\011\u014a\001\002\000\020\003\uffc0\007\uffc0\013\uffc0" +
    "\016\uffc0\032\uffc0\036\uffc0\037\uffc0\001\002\000\024\003" +
    "\u011b\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a\035\u0120" +
    "\053\u0115\054\u0114\001\002\000\004\012\u0148\001\002\000" +
    "\004\012\u0146\001\002\000\020\003\u013a\030\u0117\033\u011f" +
    "\034\u011a\035\u0120\053\u0115\054\u0114\001\002\000\004\012" +
    "\u0135\001\002\000\024\003\u011b\007\uffb6\013\u0116\030\u0117" +
    "\033\u011f\034\u011a\035\u0120\053\u0115\054\u0114\001\002\000" +
    "\024\003\u011b\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a" +
    "\035\u0120\053\u0115\054\u0114\001\002\000\004\012\u0131\001" +
    "\002\000\024\003\u011b\007\uffb6\013\u0116\030\u0117\033\u011f" +
    "\034\u011a\035\u0120\053\u0115\054\u0114\001\002\000\024\003" +
    "\u011b\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a\035\u0120" +
    "\053\u0115\054\u0114\001\002\000\024\003\u011b\007\uffb6\013" +
    "\u0116\030\u0117\033\u011f\034\u011a\035\u0120\053\u0115\054\u0114" +
    "\001\002\000\024\003\u011b\007\uffb6\013\u0116\030\u0117\033" +
    "\u011f\034\u011a\035\u0120\053\u0115\054\u0114\001\002\000\004" +
    "\012\u0129\001\002\000\004\012\u0127\001\002\000\024\003" +
    "\u011b\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a\035\u0120" +
    "\053\u0115\054\u0114\001\002\000\004\007\u0123\001\002\000" +
    "\006\011\uffbe\013\u0124\001\002\000\004\006\u0113\001\002" +
    "\000\004\011\uffbf\001\002\000\004\007\uffbd\001\002\000" +
    "\004\046\u0128\001\002\000\024\003\uffaa\007\uffaa\013\uffaa" +
    "\030\uffaa\033\uffaa\034\uffaa\035\uffaa\053\uffaa\054\uffaa\001" +
    "\002\000\004\015\u012a\001\002\000\004\047\u012b\001\002" +
    "\000\004\015\u012c\001\002\000\024\003\uffad\007\uffad\013" +
    "\uffad\030\uffad\033\uffad\034\uffad\035\uffad\053\uffad\054\uffad" +
    "\001\002\000\004\007\uffbc\001\002\000\004\007\uffbb\001" +
    "\002\000\004\007\uffba\001\002\000\004\007\uffb5\001\002" +
    "\000\004\045\u0132\001\002\000\024\003\uffac\007\uffac\013" +
    "\uffac\030\uffac\033\uffac\034\uffac\035\uffac\053\uffac\054\uffac" +
    "\001\002\000\004\007\uffb9\001\002\000\004\007\uffb8\001" +
    "\002\000\004\045\u0136\001\002\000\024\003\uffab\007\uffab" +
    "\013\uffab\030\uffab\033\uffab\034\uffab\035\uffab\053\uffab\054" +
    "\uffab\001\002\000\004\007\uffb7\001\002\000\024\003\u011b" +
    "\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a\035\u0120\053" +
    "\u0115\054\u0114\001\002\000\024\003\u011b\007\uffb6\013\u0116" +
    "\030\u0117\033\u011f\034\u011a\035\u0120\053\u0115\054\u0114\001" +
    "\002\000\024\003\u011b\007\uffb6\013\u0116\030\u0117\033\u011f" +
    "\034\u011a\035\u0120\053\u0115\054\u0114\001\002\000\024\003" +
    "\u011b\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a\035\u0120" +
    "\053\u0115\054\u0114\001\002\000\024\003\u011b\007\uffb6\013" +
    "\u0116\030\u0117\033\u011f\034\u011a\035\u0120\053\u0115\054\u0114" +
    "\001\002\000\024\003\u011b\007\uffb6\013\u0116\030\u0117\033" +
    "\u011f\034\u011a\035\u0120\053\u0115\054\u0114\001\002\000\024" +
    "\003\u011b\007\uffb6\013\u0116\030\u0117\033\u011f\034\u011a\035" +
    "\u0120\053\u0115\054\u0114\001\002\000\004\007\uffb4\001\002" +
    "\000\004\007\uffb3\001\002\000\004\007\uffb2\001\002\000" +
    "\004\007\uffb1\001\002\000\004\007\uffae\001\002\000\004" +
    "\007\uffb0\001\002\000\004\007\uffaf\001\002\000\004\045" +
    "\u0147\001\002\000\024\003\uffa9\007\uffa9\013\uffa9\030\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\053\uffa9\054\uffa9\001\002\000" +
    "\004\045\u0149\001\002\000\024\003\uffa8\007\uffa8\013\uffa8" +
    "\030\uffa8\033\uffa8\034\uffa8\035\uffa8\053\uffa8\054\uffa8\001" +
    "\002\000\020\003\uffc1\007\uffc1\013\uffc1\016\uffc1\032\uffc1" +
    "\036\uffc1\037\uffc1\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\010\u014e\001\002\000\006" +
    "\011\u0150\057\u014f\001\002\000\004\045\u0153\001\002\000" +
    "\004\002\uff73\001\002\000\004\011\u0152\001\002\000\004" +
    "\002\uff74\001\002\000\004\006\u0154\001\002\000\012\007" +
    "\uff6d\013\u0155\060\u0159\072\u0157\001\002\000\006\060\u0159" +
    "\072\u0157\001\002\000\012\007\uff6d\013\u0155\060\u0159\072" +
    "\u0157\001\002\000\004\006\u01b1\001\002\000\012\007\uff6d" +
    "\013\u0155\060\u0159\072\u0157\001\002\000\004\006\u015e\001" +
    "\002\000\004\007\u015b\001\002\000\006\011\uff71\013\u015c" +
    "\001\002\000\004\057\u014f\001\002\000\004\011\uff72\001" +
    "\002\000\006\007\u0160\047\u015f\001\002\000\004\012\u0163" +
    "\001\002\000\012\007\uff69\013\uff69\060\uff69\072\uff69\001" +
    "\002\000\004\007\u0162\001\002\000\012\007\uff6a\013\uff6a" +
    "\060\uff6a\072\uff6a\001\002\000\004\010\u0164\001\002\000" +
    "\004\061\u0165\001\002\000\004\010\u0169\001\002\000\004" +
    "\011\u0167\001\002\000\006\007\uff67\047\u015f\001\002\000" +
    "\004\007\uff68\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\030\011\uff5a\013\u0177\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\004\012\u01a8\001\002\000\030" +
    "\011\uff5a\013\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065" +
    "\u0175\066\u017c\070\u0174\071\u0179\077\u0170\001\002\000\030" +
    "\011\uff5a\013\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065" +
    "\u0175\066\u017c\070\u0174\071\u0179\077\u0170\001\002\000\004" +
    "\011\u01a3\001\002\000\004\012\u01a1\001\002\000\004\012" +
    "\u019f\001\002\000\004\012\u019d\001\002\000\024\035\u0176" +
    "\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c\070\u0174\071" +
    "\u0179\077\u0170\001\002\000\004\012\u0188\001\002\000\004" +
    "\012\u0185\001\002\000\004\012\u0183\001\002\000\004\012" +
    "\u0181\001\002\000\004\012\u017f\001\002\000\030\011\uff5a" +
    "\013\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066" +
    "\u017c\070\u0174\071\u0179\077\u0170\001\002\000\004\011\uff5c" +
    "\001\002\000\004\045\u0180\001\002\000\030\011\uff4b\013" +
    "\uff4b\035\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b" +
    "\070\uff4b\071\uff4b\077\uff4b\001\002\000\004\047\u0182\001" +
    "\002\000\030\011\uff4f\013\uff4f\035\uff4f\062\uff4f\063\uff4f" +
    "\064\uff4f\065\uff4f\066\uff4f\070\uff4f\071\uff4f\077\uff4f\001" +
    "\002\000\004\045\u0184\001\002\000\030\011\uff4d\013\uff4d" +
    "\035\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066\uff4d\070" +
    "\uff4d\071\uff4d\077\uff4d\001\002\000\006\004\u0187\005\u0186" +
    "\001\002\000\030\011\uff47\013\uff47\035\uff47\062\uff47\063" +
    "\uff47\064\uff47\065\uff47\066\uff47\070\uff47\071\uff47\077\uff47" +
    "\001\002\000\030\011\uff48\013\uff48\035\uff48\062\uff48\063" +
    "\uff48\064\uff48\065\uff48\066\uff48\070\uff48\071\uff48\077\uff48" +
    "\001\002\000\004\047\u0189\001\002\000\030\011\uff4e\013" +
    "\uff4e\035\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e" +
    "\070\uff4e\071\uff4e\077\uff4e\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\030\011\uff5a\013" +
    "\u0177\035\u0176\062\u017b\063\u0178\064\u017a\065\u0175\066\u017c" +
    "\070\u0174\071\u0179\077\u0170\001\002\000\004\011\uff5b\001" +
    "\002\000\030\011\uff5a\013\u0177\035\u0176\062\u017b\063\u0178" +
    "\064\u017a\065\u0175\066\u017c\070\u0174\071\u0179\077\u0170\001" +
    "\002\000\004\011\uff51\001\002\000\004\011\uff59\001\002" +
    "\000\004\011\uff58\001\002\000\004\011\uff57\001\002\000" +
    "\004\011\uff56\001\002\000\004\011\uff55\001\002\000\004" +
    "\011\uff54\001\002\000\004\011\uff53\001\002\000\004\011" +
    "\uff52\001\002\000\004\046\u019e\001\002\000\030\011\uff4a" +
    "\013\uff4a\035\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066" +
    "\uff4a\070\uff4a\071\uff4a\077\uff4a\001\002\000\004\045\u01a0" +
    "\001\002\000\030\011\uff4c\013\uff4c\035\uff4c\062\uff4c\063" +
    "\uff4c\064\uff4c\065\uff4c\066\uff4c\070\uff4c\071\uff4c\077\uff4c" +
    "\001\002\000\004\045\u01a2\001\002\000\030\011\uff49\013" +
    "\uff49\035\uff49\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49" +
    "\070\uff49\071\uff49\077\uff49\001\002\000\006\011\uff65\013" +
    "\u01a4\001\002\000\004\061\u0165\001\002\000\004\011\uff66" +
    "\001\002\000\004\011\uff64\001\002\000\004\011\uff63\001" +
    "\002\000\004\045\u01a9\001\002\000\030\011\uff50\013\uff50" +
    "\035\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50\070" +
    "\uff50\071\uff50\077\uff50\001\002\000\004\011\uff62\001\002" +
    "\000\004\011\uff61\001\002\000\004\011\uff60\001\002\000" +
    "\004\011\uff5f\001\002\000\004\011\uff5e\001\002\000\004" +
    "\011\uff5d\001\002\000\004\007\uff70\001\002\000\006\007" +
    "\u01b4\047\u01b2\001\002\000\004\006\u01b6\001\002\000\004" +
    "\007\u01b5\001\002\000\012\007\uff45\013\uff45\060\uff45\072" +
    "\uff45\001\002\000\012\007\uff46\013\uff46\060\uff46\072\uff46" +
    "\001\002\000\004\047\u01b7\001\002\000\004\010\u01bc\001" +
    "\002\000\004\007\u01b9\001\002\000\006\007\uff43\013\u01ba" +
    "\001\002\000\004\047\u01b2\001\002\000\004\007\uff44\001" +
    "\002\000\016\011\uff3b\013\u01bd\073\u01c0\074\u01be\075\u01bf" +
    "\077\u01c3\001\002\000\012\073\u01c0\074\u01be\075\u01bf\077" +
    "\u01c3\001\002\000\004\012\u01d4\001\002\000\004\012\u01d2" +
    "\001\002\000\004\012\u01d0\001\002\000\016\011\uff3b\013" +
    "\u01bd\073\u01c0\074\u01be\075\u01bf\077\u01c3\001\002\000\016" +
    "\011\uff3b\013\u01bd\073\u01c0\074\u01be\075\u01bf\077\u01c3\001" +
    "\002\000\004\012\u01cc\001\002\000\016\011\uff3b\013\u01bd" +
    "\073\u01c0\074\u01be\075\u01bf\077\u01c3\001\002\000\016\011" +
    "\uff3b\013\u01bd\073\u01c0\074\u01be\075\u01bf\077\u01c3\001\002" +
    "\000\004\011\u01c7\001\002\000\006\007\uff41\013\u01c8\001" +
    "\002\000\004\047\u01b7\001\002\000\004\007\uff42\001\002" +
    "\000\004\011\uff40\001\002\000\004\011\uff3f\001\002\000" +
    "\004\045\u01cd\001\002\000\016\011\uff32\013\uff32\073\uff32" +
    "\074\uff32\075\uff32\077\uff32\001\002\000\004\011\uff3e\001" +
    "\002\000\004\011\uff3d\001\002\000\004\045\u01d1\001\002" +
    "\000\016\011\uff36\013\uff36\073\uff36\074\uff36\075\uff36\077" +
    "\uff36\001\002\000\004\047\u01d3\001\002\000\016\011\uff33" +
    "\013\uff33\073\uff33\074\uff33\075\uff33\077\uff33\001\002\000" +
    "\006\067\u01d6\100\u01d5\001\002\000\016\011\uff35\013\uff35" +
    "\073\uff35\074\uff35\075\uff35\077\uff35\001\002\000\004\047" +
    "\u01d7\001\002\000\016\011\uff34\013\uff34\073\uff34\074\uff34" +
    "\075\uff34\077\uff34\001\002\000\004\011\uff3c\001\002\000" +
    "\016\011\uff3b\013\u01bd\073\u01c0\074\u01be\075\u01bf\077\u01c3" +
    "\001\002\000\016\011\uff3b\013\u01bd\073\u01c0\074\u01be\075" +
    "\u01bf\077\u01c3\001\002\000\016\011\uff3b\013\u01bd\073\u01c0" +
    "\074\u01be\075\u01bf\077\u01c3\001\002\000\016\011\uff3b\013" +
    "\u01bd\073\u01c0\074\u01be\075\u01bf\077\u01c3\001\002\000\004" +
    "\011\uff3a\001\002\000\004\011\uff39\001\002\000\004\011" +
    "\uff38\001\002\000\004\011\uff37\001\002\000\004\007\uff6f" +
    "\001\002\000\012\007\uff6d\013\u0155\060\u0159\072\u0157\001" +
    "\002\000\012\007\uff6d\013\u0155\060\u0159\072\u0157\001\002" +
    "\000\004\007\uff6e\001\002\000\004\007\uff6c\001\002\000" +
    "\004\007\uff6b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\006\002\004\003\003\001\001\000\004\005" +
    "\u014b\001\001\000\002\001\001\000\014\012\014\027\016" +
    "\065\011\067\012\070\020\001\001\000\002\001\001\000" +
    "\014\013\u0105\027\u0107\065\u0103\067\u0104\070\u0108\001\001" +
    "\000\002\001\001\000\014\012\306\027\016\065\011\067" +
    "\012\070\020\001\001\000\014\012\305\027\016\065\011" +
    "\067\012\070\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\115\027\016\065\011\067\012\070\020" +
    "\001\001\000\014\012\114\027\016\065\011\067\012\070" +
    "\020\001\001\000\002\001\001\000\014\012\021\027\016" +
    "\065\011\067\012\070\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\055\040\057\037\060\035\061" +
    "\031\062\034\001\001\000\014\056\100\057\105\060\104" +
    "\061\101\062\103\001\001\000\002\001\001\000\014\055" +
    "\073\057\037\060\035\061\031\062\034\001\001\000\002" +
    "\001\001\000\014\055\060\057\037\060\035\061\031\062" +
    "\034\001\001\000\014\055\057\057\037\060\035\061\031" +
    "\062\034\001\001\000\014\055\056\057\037\060\035\061" +
    "\031\062\034\001\001\000\002\001\001\000\014\055\051" +
    "\057\037\060\035\061\031\062\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\070\001\001\000\004\063\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\055\112\057\037" +
    "\060\035\061\031\062\034\001\001\000\014\055\111\057" +
    "\037\060\035\061\031\062\034\001\001\000\014\055\110" +
    "\057\037\060\035\061\031\062\034\001\001\000\014\055" +
    "\107\057\037\060\035\061\031\062\034\001\001\000\014" +
    "\055\106\057\037\060\035\061\031\062\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\141\015\142\016\136\017\140\020\137\022" +
    "\135\023\133\024\121\026\132\001\001\000\024\014\141" +
    "\015\304\016\136\017\140\020\137\022\135\023\133\024" +
    "\121\026\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\265\016\262\017\264\020\263\022\261\023" +
    "\260\024\254\025\255\026\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\141\015\161\016\136\017\140\020\137\022\135" +
    "\023\133\024\121\026\132\001\001\000\024\014\141\015" +
    "\160\016\136\017\140\020\137\022\135\023\133\024\121" +
    "\026\132\001\001\000\024\014\141\015\157\016\136\017" +
    "\140\020\137\022\135\023\133\024\121\026\132\001\001" +
    "\000\002\001\001\000\024\014\141\015\156\016\136\017" +
    "\140\020\137\022\135\023\133\024\121\026\132\001\001" +
    "\000\024\014\141\015\155\016\136\017\140\020\137\022" +
    "\135\023\133\024\121\026\132\001\001\000\024\014\141" +
    "\015\154\016\136\017\140\020\137\022\135\023\133\024" +
    "\121\026\132\001\001\000\024\014\141\015\153\016\136" +
    "\017\140\020\137\022\135\023\133\024\121\026\132\001" +
    "\001\000\024\014\141\015\152\016\136\017\140\020\137" +
    "\022\135\023\133\024\121\026\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\050\170\051\167\052\166\053\171\001\001\000" +
    "\012\050\212\051\216\052\215\054\214\001\001\000\002" +
    "\001\001\000\012\050\170\051\167\052\166\053\206\001" +
    "\001\000\012\050\170\051\167\052\166\053\205\001\001" +
    "\000\012\050\170\051\167\052\166\053\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\050\170\051\167\052\166\053\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\050" +
    "\170\051\167\052\166\053\222\001\001\000\012\050\170" +
    "\051\167\052\166\053\221\001\001\000\002\001\001\000" +
    "\012\050\170\051\167\052\166\053\220\001\001\000\012" +
    "\050\170\051\167\052\166\053\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\141\015\276\016\136\017\140\020\137\022\135\023" +
    "\133\024\121\026\132\001\001\000\002\001\001\000\024" +
    "\014\141\015\275\016\136\017\140\020\137\022\135\023" +
    "\133\024\121\026\132\001\001\000\024\014\141\015\274" +
    "\016\136\017\140\020\137\022\135\023\133\024\121\026" +
    "\132\001\001\000\024\014\141\015\273\016\136\017\140" +
    "\020\137\022\135\023\133\024\121\026\132\001\001\000" +
    "\024\014\141\015\272\016\136\017\140\020\137\022\135" +
    "\023\133\024\121\026\132\001\001\000\024\014\141\015" +
    "\271\016\136\017\140\020\137\022\135\023\133\024\121" +
    "\026\132\001\001\000\024\014\141\015\270\016\136\017" +
    "\140\020\137\022\135\023\133\024\121\026\132\001\001" +
    "\000\024\014\141\015\267\016\136\017\140\020\137\022" +
    "\135\023\133\024\121\026\132\001\001\000\024\014\141" +
    "\015\266\016\136\017\140\020\137\022\135\023\133\024" +
    "\121\026\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\040\322\041\321\042\326\044\324\045\315\046" +
    "\332\047\331\001\001\000\002\001\001\000\020\040\322" +
    "\041\321\042\377\044\324\045\315\046\332\047\331\001" +
    "\001\000\002\001\001\000\020\040\361\041\360\043\357" +
    "\044\362\045\356\046\365\047\364\001\001\000\002\001" +
    "\001\000\020\040\322\041\321\042\353\044\324\045\315" +
    "\046\332\047\331\001\001\000\020\040\322\041\321\042" +
    "\352\044\324\045\315\046\332\047\331\001\001\000\002" +
    "\001\001\000\020\040\322\041\321\042\347\044\324\045" +
    "\315\046\332\047\331\001\001\000\020\040\322\041\321" +
    "\042\346\044\324\045\315\046\332\047\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\040\322\041\321\042\334\044\324\045\315\046\332\047" +
    "\331\001\001\000\020\040\322\041\321\042\333\044\324" +
    "\045\315\046\332\047\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\040\322\041" +
    "\321\042\374\044\324\045\315\046\332\047\331\001\001" +
    "\000\002\001\001\000\020\040\322\041\321\042\373\044" +
    "\324\045\315\046\332\047\331\001\001\000\020\040\322" +
    "\041\321\042\372\044\324\045\315\046\332\047\331\001" +
    "\001\000\020\040\322\041\321\042\371\044\324\045\315" +
    "\046\332\047\331\001\001\000\020\040\322\041\321\042" +
    "\370\044\324\045\315\046\332\047\331\001\001\000\020" +
    "\040\322\041\321\042\367\044\324\045\315\046\332\047" +
    "\331\001\001\000\020\040\322\041\321\042\366\044\324" +
    "\045\315\046\332\047\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\u010d\027" +
    "\016\065\011\067\012\070\020\001\001\000\014\012\u010c" +
    "\027\016\065\011\067\012\070\020\001\001\000\002\001" +
    "\001\000\014\012\u010b\027\016\065\011\067\012\070\020" +
    "\001\001\000\014\012\u010a\027\016\065\011\067\012\070" +
    "\020\001\001\000\014\012\u0109\027\016\065\011\067\012" +
    "\070\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\030\u0120\031\u0121\033\u011d\034\u011c" +
    "\035\u011b\036\u0118\037\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\030\u013d\032\u0136\033\u013c\034\u013b" +
    "\035\u013a\036\u0138\037\u0137\001\001\000\002\001\001\000" +
    "\020\030\u0120\031\u0133\033\u011d\034\u011c\035\u011b\036\u0118" +
    "\037\u0117\001\001\000\020\030\u0120\031\u0132\033\u011d\034" +
    "\u011c\035\u011b\036\u0118\037\u0117\001\001\000\002\001\001" +
    "\000\020\030\u0120\031\u012f\033\u011d\034\u011c\035\u011b\036" +
    "\u0118\037\u0117\001\001\000\020\030\u0120\031\u012e\033\u011d" +
    "\034\u011c\035\u011b\036\u0118\037\u0117\001\001\000\020\030" +
    "\u0120\031\u012d\033\u011d\034\u011c\035\u011b\036\u0118\037\u0117" +
    "\001\001\000\020\030\u0120\031\u012c\033\u011d\034\u011c\035" +
    "\u011b\036\u0118\037\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\030\u0120\031\u0125\033\u011d\034\u011c\035" +
    "\u011b\036\u0118\037\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\030\u0120\031\u0144\033" +
    "\u011d\034\u011c\035\u011b\036\u0118\037\u0117\001\001\000\020" +
    "\030\u0120\031\u0143\033\u011d\034\u011c\035\u011b\036\u0118\037" +
    "\u0117\001\001\000\020\030\u0120\031\u0142\033\u011d\034\u011c" +
    "\035\u011b\036\u0118\037\u0117\001\001\000\020\030\u0120\031" +
    "\u0141\033\u011d\034\u011c\035\u011b\036\u0118\037\u0117\001\001" +
    "\000\020\030\u0120\031\u0140\033\u011d\034\u011c\035\u011b\036" +
    "\u0118\037\u0117\001\001\000\020\030\u0120\031\u013f\033\u011d" +
    "\034\u011c\035\u011b\036\u0118\037\u0117\001\001\000\020\030" +
    "\u0120\031\u013e\033\u011d\034\u011c\035\u011b\036\u0118\037\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\116" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\102" +
    "\u0155\117\u0159\121\u0157\001\001\000\010\102\u01e1\120\u01e3" +
    "\121\u01e2\001\001\000\010\102\u0155\117\u01e0\121\u0157\001" +
    "\001\000\002\001\001\000\010\102\u0155\117\u01af\121\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\u015c\001\001\000\002\001\001\000\004" +
    "\122\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\u0165\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u0167\001\001\000\002\001\001\000\026\103\u0171" +
    "\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a\112" +
    "\u0169\113\u017c\115\u0172\001\001\000\026\103\u0171\104\u0170" +
    "\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a\112\u0169\113" +
    "\u017c\115\u01ae\001\001\000\026\103\u0171\104\u0170\105\u016e" +
    "\106\u016d\107\u016c\110\u016b\111\u016a\112\u0169\113\u017c\115" +
    "\u01ad\001\001\000\026\103\u0171\104\u0170\105\u016e\106\u016d" +
    "\107\u016c\110\u016b\111\u016a\112\u0169\113\u017c\115\u01ac\001" +
    "\001\000\026\103\u0171\104\u0170\105\u016e\106\u016d\107\u016c" +
    "\110\u016b\111\u016a\112\u0169\113\u017c\115\u01ab\001\001\000" +
    "\026\103\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b" +
    "\111\u016a\112\u0169\113\u017c\115\u01aa\001\001\000\026\103" +
    "\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a" +
    "\112\u0169\113\u017c\115\u01a9\001\001\000\002\001\001\000" +
    "\026\103\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b" +
    "\111\u016a\112\u0169\113\u017c\115\u01a6\001\001\000\026\103" +
    "\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a" +
    "\112\u0169\113\u017c\115\u01a5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\103\u0190\104\u018f\105\u018e\106\u018d\107\u018c\110\u018b\111" +
    "\u018a\112\u0189\113\u0192\114\u0191\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\103\u0171\104\u0170\105\u016e\106\u016d" +
    "\107\u016c\110\u016b\111\u016a\112\u0169\113\u017c\115\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\103" +
    "\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a" +
    "\112\u0169\113\u017c\115\u019b\001\001\000\026\103\u0171\104" +
    "\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a\112\u0169" +
    "\113\u017c\115\u019a\001\001\000\026\103\u0171\104\u0170\105" +
    "\u016e\106\u016d\107\u016c\110\u016b\111\u016a\112\u0169\113\u017c" +
    "\115\u0199\001\001\000\026\103\u0171\104\u0170\105\u016e\106" +
    "\u016d\107\u016c\110\u016b\111\u016a\112\u0169\113\u017c\115\u0198" +
    "\001\001\000\026\103\u0171\104\u0170\105\u016e\106\u016d\107" +
    "\u016c\110\u016b\111\u016a\112\u0169\113\u017c\115\u0197\001\001" +
    "\000\026\103\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110" +
    "\u016b\111\u016a\112\u0169\113\u017c\115\u0196\001\001\000\026" +
    "\103\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111" +
    "\u016a\112\u0169\113\u017c\115\u0195\001\001\000\026\103\u0171" +
    "\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111\u016a\112" +
    "\u0169\113\u017c\115\u0194\001\001\000\002\001\001\000\026" +
    "\103\u0171\104\u0170\105\u016e\106\u016d\107\u016c\110\u016b\111" +
    "\u016a\112\u0169\113\u017c\115\u0193\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\123\u01a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u01b2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u01b7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u01ba\001\001\000\002\001\001\000\014\072\u01c5\074" +
    "\u01c4\075\u01c3\076\u01c1\077\u01c0\001\001\000\014\073\u01d7" +
    "\074\u01db\075\u01da\076\u01d9\077\u01d8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\072\u01ce" +
    "\074\u01c4\075\u01c3\076\u01c1\077\u01c0\001\001\000\014\072" +
    "\u01cd\074\u01c4\075\u01c3\076\u01c1\077\u01c0\001\001\000\002" +
    "\001\001\000\014\072\u01ca\074\u01c4\075\u01c3\076\u01c1\077" +
    "\u01c0\001\001\000\014\072\u01c9\074\u01c4\075\u01c3\076\u01c1" +
    "\077\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\072\u01df\074\u01c4\075\u01c3\076" +
    "\u01c1\077\u01c0\001\001\000\014\072\u01de\074\u01c4\075\u01c3" +
    "\076\u01c1\077\u01c0\001\001\000\014\072\u01dd\074\u01c4\075" +
    "\u01c3\076\u01c1\077\u01c0\001\001\000\014\072\u01dc\074\u01c4" +
    "\075\u01c3\076\u01c1\077\u01c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\102\u0155\117\u01e5\121\u0157\001\001\000" +
    "\010\102\u0155\117\u01e4\121\u0157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxReplay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxReplay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxReplay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;
    public String nombreJugador = "";
    public ArrayList<Impactos> listImpactos = new ArrayList<>();
    public Integer noTurno = 0;

    public SintaxReplay(AnalizadorLexico3 lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas){
        super(lex);
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnDistancia = btnDistancia;
        this.btnFlotas = btnFlotas;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }

    public void crearCuadriculaJuego(Juego misDatos){
        tablero.creacionCuadricula(misDatos, txtNaves, contador, navesCamino, btnTurno, btnDistancia, btnFlotas);
    }

    public boolean verificadorNombresJugadores(ArrayList<Jugadores> listJugadores, boolean verificador){
        if(verificador == true){
            for(int i = 0; i < listJugadores.size(); i++){
                String jugador1 = listJugadores.get(i).getNombre();
                    if(jugador1.length() > 10){
                        System.out.println("exceso de letras");
                        verificador = false;
                        break;
                    }
                
                for(int j = i+1; j < listJugadores.size()+1; j++){
                        if(j!=listJugadores.size()){
                        String jugador2 = listJugadores.get(j).getNombre();
                        if(jugador1.equals(jugador2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        } 
        return verificador;
    }


    public boolean verificadorNombresPlanetas(boolean verificador, ArrayList<Planetas> listPlanetas){
        if(verificador == true){
            for(int i = 0; i < listPlanetas.size(); i++){
                String nombrePlaneta = listPlanetas.get(i).getNombre();
                if(nombrePlaneta.length() > 3){
                    System.out.println("exceso de letras");
                    verificador = false;
                    break;
                } else {
                    for(int j = i+1; j < listPlanetas.size()+1; j++){
                        if(j!=listPlanetas.size()){
                            String nombrePlaneta2 = listPlanetas.get(j).getNombre();
                            if(nombrePlaneta.equals(nombrePlaneta2)){
                                System.out.println("Dos nombres son iguales");
                                verificador = false;
                                break;
                            }
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public boolean verificadorNombresPlanetasNeutrales(boolean verificador, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
        if(listNeutrales != null){
            for(int i = 0; i < listNeutrales.size(); i ++){
                String neutral1 = listNeutrales.get(i).getNombre();
                if(neutral1.length() > 3 ){
                    System.out.println("exceso de letras"); 
                    verificador = false;
                    break;
                }   
                for(int j = i+1; j < listNeutrales.size()+1; j++){
                    if(j!=listNeutrales.size()){
                        String neutral2 = listNeutrales.get(j).getNombre();
                        if(neutral1.equals(neutral2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        }
        return verificador;
    }

    public void creacionMapa(Juego misDatos, boolean verificador, JTextArea panelMensajes, String totalErroress){
        if(verificador == true){
            tablero.agregarPlanetasTablero(Integer.parseInt(misDatos.getMapa().getSize_filas()), Integer.parseInt(misDatos.getMapa().getSize_columnas()), misDatos.getJugadores(), misDatos.getPlanetas());
            if(!misDatos.getPlanetas().isEmpty()){
                verificador = false;
                totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                panelMensajes.setText(totalErroress);
            }
            for(int i = 0; i < misDatos.getJugadores().size(); i++){
                if(!misDatos.getJugadores().get(i).getPlanetas().isEmpty()){
                    verificador = false;
                    totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                    panelMensajes.setText(totalErroress);
                    break;
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosPlanetas(misDatos.getMapa(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Algun planeta esta situado en una posicion que no existe dentro del mapa\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosNeutrales(misDatos.getMapa(), misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Algun planeta neutral esta situado en una posicion que no existe dentro del mapa\n";
                    System.out.println("Algun planeta neutral esta situado en una posicion que no existe dentro del mapa");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPosPlanetas(misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Dos planetas estan situados en la misma posicion\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionNeutralaNeutral(misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas neutrales estan situados en la misma posicion\n";
                    System.out.println("Dos planetas neutrales estan situados en la misma posicion");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPlanetasyNeutrales(misDatos.getpNeutrales(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas (normal y un neutral) estan situados en la misma posicion\n";
                    System.out.println("Dos planetas(normal y un neutral) estan situados en la misma posicion\n");
                }
            }
            if(verificador == true) {
                crearCuadriculaJuego(misDatos);
            } else { 
                panelMensajes.setText(totalErroress);
            }  
        }
        
    }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxReplay$actions {
  private final SintaxReplay parser;

  /** Constructor */
  CUP$SintaxReplay$actions(SintaxReplay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxReplay$do_action(
    int                        CUP$SintaxReplay$act_num,
    java_cup.runtime.lr_parser CUP$SintaxReplay$parser,
    java.util.Stack            CUP$SintaxReplay$stack,
    int                        CUP$SintaxReplay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxReplay$result;

      /* select the action based on the action number */
      switch (CUP$SintaxReplay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // bu ::= noFlota DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setNoFlota((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bu",61, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // bt ::= mensaje DOS_PUNTOS ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos();  impacto.setMensaje(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bt",60, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // bs ::= estado DOS_PUNTOS CONQUISTADO ID 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setEstado(a.toString()); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bs",59, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bs ::= estado DOS_PUNTOS VIVO 
            {
              Impactos RESULT =null;
		 Impactos impacto = new Impactos(); impacto.setEstado(""); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bs",59, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // br ::= navesRestantes DOS_PUNTOS ENTERO 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Impactos impacto = new Impactos(); impacto.setNavesRestantes((Integer) a); RESULT=impacto; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("br",58, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // p7 ::= bu bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNoFlota()!=null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // p7 ::= bt bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMensaje()!=null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // p7 ::= bs bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getEstado()!=null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // p7 ::= br bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNavesRestantes()!=null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p7",57, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // bq ::= 
            {
              Impactos RESULT =null;
		 RESULT=new Impactos(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // bq ::= COMA p7 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bq ::= bu bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNoFlota()!=null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bq ::= bt bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMensaje()!=null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // bq ::= bs bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getEstado()!=null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // bq ::= br bq 
            {
              Impactos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Impactos e = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getNavesRestantes()!=null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bq",56, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // bv ::= ID AGRUPACION_A bq AGRUPACION_B 
            {
              ArrayList<Impactos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {  a.setNombrePlaneta(c.toString());  ArrayList<Impactos> listImpactos = new ArrayList<>();  listImpactos.add(a);  RESULT=listImpactos; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bv",62, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // bv ::= ID AGRUPACION_A bq AGRUPACION_B COMA bv 
            {
              ArrayList<Impactos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Impactos a = (Impactos)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Impactos> e = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {    a.setNombrePlaneta(c.toString()); e.add(a);   parser.listImpactos.add(a);  RESULT=e;  }  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bv",62, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bp ::= ID LLAVE_A bv LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Impactos> b = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString()); datos.setListImpactos(b); ArrayList<DatosImpacto> listDatos = new ArrayList<>(); listDatos.add(datos); RESULT=listDatos; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bp",63, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // bp ::= ID LLAVE_A bv LLAVE_B COMA bp 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		ArrayList<Impactos> b = (ArrayList<Impactos>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<DatosImpacto> c = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString());  datos.setListImpactos(b); c.add(datos); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bp",63, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // bf ::= IMPACTOS LLAVE_A LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bf",64, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // bf ::= IMPACTOS LLAVE_A bp LLAVE_B 
            {
              ArrayList<DatosImpacto> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bf",64, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // bo ::= verificador DOS_PUNTOS FALSO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bo",73, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // bo ::= verificador DOS_PUNTOS VERDADERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bo",73, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // bn ::= turnoLlegada DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bn",72, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // bm ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString())); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bm",71, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // bl ::= noJugadorAtaque DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bl",70, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // bk ::= noJugadorEnvio DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bk",69, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // bj ::= noNaves DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bj",68, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // bi ::= planetaDestino DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bi",67, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // bh ::= planetaOrigen DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bh",66, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // bg ::= noFlota DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bg",65, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // p5 ::= bo be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // p5 ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // p5 ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // p5 ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // p5 ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // p5 ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // p5 ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // p5 ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // p5 ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p5",74, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // be ::= 
            {
              NavesCamino RESULT =null;
		 RESULT=new NavesCamino(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // be ::= COMA p5 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // be ::= bo be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // be ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // be ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // be ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // be ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // be ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // be ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // be ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // be ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("be",75, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // bd ::= Flota AGRUPACION_A be AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { ArrayList<NavesCamino> listNaves = new ArrayList<>(); listNaves.add(a); RESULT=listNaves; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bd",81, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bd ::= Flota AGRUPACION_A be AGRUPACION_B COMA bd 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<NavesCamino> e = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bd",81, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bw ::= ID DOS_PUNTOS AGRUPACION_A bd AGRUPACION_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<NavesCamino> b = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); ArrayList<DatosAcciones> listAcciones = new ArrayList<>(); listAcciones.add(datos); RESULT=listAcciones; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bw",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bw ::= ID DOS_PUNTOS AGRUPACION_A bd AGRUPACION_B bw 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		ArrayList<NavesCamino> b = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<DatosAcciones> c = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); c.add(datos); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bw",80, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // bc ::= ACCIONES LLAVE_A LLAVE_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bc",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // bc ::= ACCIONES LLAVE_A bw LLAVE_B 
            {
              ArrayList<DatosAcciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bc",79, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // p2 ::= bf bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // p2 ::= bc bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p2",78, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // bb ::= 
            {
              Replay RESULT =null;
		 RESULT=new Replay(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // bb ::= COMA p2 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay a = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // bb ::= bf bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosImpacto> a = (ArrayList<DatosImpacto>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bb ::= bc bb 
            {
              Replay RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<DatosAcciones> a = (ArrayList<DatosAcciones>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Replay e = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("bb",77, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ba ::= TURNO ENTERO LLAVE_A bb LLAVE_B 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Replay b = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 b.setNoTurno((Integer) a); ArrayList<Replay> listReplay = new ArrayList<>(); listReplay.add(b); RESULT=listReplay; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ba ::= TURNO ENTERO LLAVE_A bb LLAVE_B COMA ba 
            {
              ArrayList<Replay> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Replay b = (Replay)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Replay> c = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 b.setNoTurno((Integer) a); c.add(b); RESULT=c; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ba",76, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // a2 ::= SECUENCIAS AGRUPACION_A AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // a2 ::= SECUENCIAS AGRUPACION_A ba AGRUPACION_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Replay> a = (ArrayList<Replay>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ah ::= tipo DOS_PUNTOS HUMANO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ah",48, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ah ::= tipo DOS_PUNTOS DIFICIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ah",48, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ah ::= tipo DOS_PUNTOS FACIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ah",48, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // al ::= color DOS_PUNTOS COMILLAS COLOR COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setColor(a.toString()); RESULT=jugador; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("al",47, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ai ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ai",49, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ai ::= COMILLAS ID COMILLAS ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ai",49, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ai ::= COMILLAS ID COMILLAS COMA ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ai",49, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ag ::= planetas DOS_PUNTOS AGRUPACION_A ai AGRUPACION_B 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetas(a); RESULT=jugador; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ag",46, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // af ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 Jugadores jugador = new Jugadores();  jugador.setNombre(a.toString()); RESULT=jugador; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("af",45, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // q7 ::= error ae 
            {
              Jugadores RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo JUGADORES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q7",44, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // q7 ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { parser.totalErrores += "Sub-atributo color en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q7",44, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // q7 ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { parser.totalErrores += "Sub-atributo tipo en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q7",44, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // q7 ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { parser.totalErrores += "Sub-atributo planetas en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q7",44, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // q7 ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { parser.totalErrores += "Sub-atributo nombre en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q7",44, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ae ::= error ae 
            {
              Jugadores RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo JUGADORES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ae ::= 
            {
              Jugadores RESULT =null;
		 RESULT=new Jugadores(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ae ::= COMA q7 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ae ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { parser.totalErrores += "Sub-atributo color en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ae ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { parser.totalErrores += "Sub-atributo tipo en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ae ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { parser.totalErrores += "Sub-atributo planetas en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ae ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { parser.totalErrores += "Sub-atributo nombre en un campo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ae",43, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ad ::= LLAVE_A ae LLAVE_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { ArrayList<Jugadores> misJugadores = new ArrayList<>(); a.setEnJuego("true"); a.setPlanetasConquistados(0);  a.setMisPlanetas(new ArrayList<>()); misJugadores.add(a); RESULT=misJugadores; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ad",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ad ::= LLAVE_A ae LLAVE_B COMA ad 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Jugadores> e = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { a.setEnJuego("true"); a.setPlanetasConquistados(0);  a.setMisPlanetas(new ArrayList<>());  e.add(a); RESULT=e; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ad",55, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("jug",54, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		  RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("jug",54, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // an ::= posY DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionY(a.toString()); RESULT=neutral; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("an",31, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // am ::= posX DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionX(a.toString()); RESULT=neutral; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("am",30, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ac ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPorcentajeMuertes(a.toString()); RESULT=neutral; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ac",37, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ab ::= produccion DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setProduccion(a.toString()); RESULT=neutral; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ab",36, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // aa ::= naves DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNaves(a.toString()); RESULT=neutral; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("aa",35, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // z ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNombre(a.toString()); RESULT=neutral; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // q5 ::= error y 
            {
              PlanetasNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // q5 ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // q5 ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // q5 ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // q5 ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else {  parser.totalErrores += "Sub-atributo produccion en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // q5 ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { parser.totalErrores += "Sub-atributo naves en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // q5 ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q5",33, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // y ::= error y 
            {
              PlanetasNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // y ::= 
            {
              PlanetasNeutrales RESULT =null;
		 RESULT=new PlanetasNeutrales(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // y ::= COMA q5 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // y ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // y ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // y ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // y ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else {  parser.totalErrores += "Sub-atributo produccion en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // y ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { parser.totalErrores += "Sub-atributo naves en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // y ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre en un campo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("y",32, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // x ::= LLAVE_A y LLAVE_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { ArrayList<PlanetasNeutrales> pNeutrales = new ArrayList<>(); pNeutrales.add(a); RESULT=pNeutrales; }  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("x",52, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // x ::= LLAVE_A y LLAVE_B COMA x 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<PlanetasNeutrales> e = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("x",52, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("pn",53, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("pn",53, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ak ::= posY DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionY(a.toString()); RESULT=planeta; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("ak",29, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // aj ::= posX DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionX(a.toString()); RESULT=planeta; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("aj",28, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // w ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPorcentajeMuertes(a.toString());  RESULT = planeta; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("w",27, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // v ::= produccion DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setProduccion(a.toString()); RESULT = planeta; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("v",26, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // u ::= naves DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setNaves(a.toString()); RESULT = planeta; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("u",25, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // t ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 Planetas planetas = new Planetas(); planetas.setNombre(a.toString()); RESULT=planetas; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("t",22, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // q3 ::= error s 
            {
              Planetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // q3 ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { parser.totalErrores += "Sub-atributo posicionY de un campo PLANETAS sentenciado mas de una vez\n";  System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // q3 ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // q3 ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // q3 ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion de un campo PLANETAS sentenciado mas de una vez\n"; parser.syntax_error(parser.getSymbolFactory().newSymbol("q3",49, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT)); } } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // q3 ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else {  parser.totalErrores += "Sub-atributo naves de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // q3 ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre de un campo PLANETAS setenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q3",24, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // s ::= error s 
            {
              Planetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS definido de forma incorrecta\n";   RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // s ::= 
            {
              Planetas RESULT =null;
		 RESULT=new Planetas(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // s ::= COMA q3 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { parser.totalErrores += "Sub-atributo posicionY de un campo PLANETAS sentenciado mas de una vez\n";  System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // s ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // s ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // s ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // s ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else {  parser.totalErrores += "Sub-atributo naves de un campo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre de un campo PLANETAS setenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("s",23, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // r ::= LLAVE_A s LLAVE_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		  if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else {ArrayList<Planetas> misPlanetas = new ArrayList<>(); misPlanetas.add(a); RESULT=misPlanetas;  }   
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("r",50, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // r ::= LLAVE_A s LLAVE_B COMA r 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		ArrayList<Planetas> e = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("r",50, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p",51, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("p",51, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // k ::= finalizacion DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setFinalizacion(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("k",20, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // o ::= produccion DOS_PUNTOS ENTERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setProduccion(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("o",40, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // n ::= mostrarEstadisticas DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("n",39, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("n",39, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // m ::= mostrarNaves DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("m",38, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // m ::= mostrarNaves DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("m",38, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // q8 ::= error l 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en sub-campo NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // q8 ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion del campo NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // q8 ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { parser.totalErrores += "Sub-atributo mostrarEstadisticas del campo NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // q8 ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { parser.totalErrores += "Sub-atributo mostrarNaves del campo NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // l ::= error l 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en sub-campo NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // l ::= 
            {
              MapaPNeutrales RESULT =null;
		RESULT=new MapaPNeutrales();
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l ::= COMA q8 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion del campo NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // l ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { parser.totalErrores += "Sub-atributo mostrarEstadisticas del campo NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { parser.totalErrores += "Sub-atributo mostrarNaves del campo NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 Mapa mapa = new Mapa(); if(a.getMostrarNaves()==null || a.getMostrarEstadisticas()==null || a.getProduccion() == null) {System.out.println("ERROR, falta de atributo");} else { mapa.setMapaPNeutral(a); RESULT=mapa; }     
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("j2",18, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // i ::= acumular DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("i",17, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // i ::= acumular DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("i",17, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // h ::= mapaCiego DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("h",16, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // h ::= mapaCiego DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("h",16, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // g ::= pNeutrales DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setPlanetasNeutrales(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("g",12, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // d ::= id DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		  Mapa mapa = new Mapa(); mapa.setId(a.toString());  RESULT=mapa;                    /*if(parser.mapita.getId()==null){ parser.mapita.setId(a.toString());  } else { parser.interruptor = false; parser.syntax_error(parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT)); parser.totalErrores += "Atributo ID sentenciado mas de una vez dentro de MAPA\n";    }*/ 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("d",10, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // j ::= columnas DOS_PUNTOS ENTERO COMA filas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa;    
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("j",15, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // j ::= filas DOS_PUNTOS ENTERO COMA columnas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("j",15, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // f ::= alAzar DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // f ::= alAzar DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // e ::= size DOS_PUNTOS LLAVE_A j LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		  RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // q ::= error c 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo MAPAS definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // q ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { parser.totalErrores += "Sub-atributo finalizacion del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // q ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { parser.totalErrores += "Sub-atributo NEUTRALES del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // q ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { parser.totalErrores += "Sub-atributo acumular del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // q ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { parser.totalErrores += "Sub-atributo mapaCiego del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { parser.totalErrores += "Sub-atributo alAzar del campo MAPA sentenciado mas de una vez\n";  System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { parser.totalErrores += "Sub-atributos columnas/filas del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e1; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // q ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else {  parser.totalErrores += "Sub-atributo planetasNeutrales del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { parser.totalErrores += "Sub-atributo id del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q",19, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // c ::= error c 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo en campo MAPAS definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c ::= LLAVE_B 
            {
              Mapa RESULT =null;
		RESULT=new Mapa();
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c ::= COMA q 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { parser.totalErrores += "Sub-atributo finalizacion del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { parser.totalErrores += "Sub-atributo NEUTRALES del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { parser.totalErrores += "Sub-atributo acumular del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { parser.totalErrores += "Sub-atributo mapaCiego del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { parser.totalErrores += "Sub-atributo alAzar del campo MAPA sentenciado mas de una vez\n";  System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { parser.totalErrores += "Sub-atributos columnas/filas del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e1; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else {  parser.totalErrores += "Sub-atributo planetasNeutrales del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { parser.totalErrores += "Sub-atributo id del campo MAPA sentenciado mas de una vez\n"; System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b ::= MAPA DOS_PUNTOS LLAVE_A c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("b",21, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // q2 ::= error juego 
            {
              Juego RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo principal mal definido\n"; RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q2",9, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // q2 ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { parser.totalErrores += "Atributo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q2",9, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // q2 ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { parser.totalErrores += "Atributo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q2",9, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // q2 ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { parser.totalErrores += "Atributo PLANETAS sentenciado mas de una vez\n"; System.out.println("erroraaa"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q2",9, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // q2 ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { parser.totalErrores += "Atributo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("q2",9, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // juego ::= error juego 
            {
              Juego RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 parser.totalErrores += "atributo principal mal definido\n"; RESULT=e;  
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // juego ::= 
            {
              Juego RESULT =null;
		 RESULT=new Juego(); 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // juego ::= COMA q2 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // juego ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { parser.totalErrores += "Atributo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // juego ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){e.setpNeutrales(a); System.out.println("agregox2"); } else { parser.totalErrores += "Atributo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // juego ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a); System.out.println("agrego"); } else {  parser.totalErrores += "Atributo PLANETAS sentenciado mas de una vez\n";  System.out.println("erroasdfr"); } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // juego ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { parser.totalErrores += "Atributo MAPA sentenciado mas de una vez\n"; parser.syntax_error(null);  } } RESULT=e; 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("juego",8, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= LLAVE_A juego LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		 if(a.getMapa()==null || a.getpNeutrales()==null || a.getJugadores()==null  || a.getPlanetas()==null){ System.out.println("Falta un archivo principal"); } else { boolean interruptor = true;  interruptor = parser.verificadorNombresJugadores(a.getJugadores(), interruptor);  interruptor = parser.verificadorNombresPlanetas(interruptor, a.getPlanetas());  interruptor = parser.verificadorNombresPlanetasNeutrales(interruptor, a.getpNeutrales());  parser.misDatos = a;  parser.datosJuego.add(a);   parser.panelJuego.setVisible(true);   parser.creacionMapa(parser.datosJuego.get(0), interruptor, parser.panelMensajes, parser.totalErrores);               } 
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= a a2 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = start_val;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxReplay$parser.done_parsing();
          return CUP$SintaxReplay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

