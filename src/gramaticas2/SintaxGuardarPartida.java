
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 19 17:25:16 CST 2020
//----------------------------------------------------

package gramaticas2;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.DatosGuardados;
import Pollitos.NavesCamino;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;
import interfaz.VentanaPrincipal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 19 17:25:16 CST 2020
  */
public class SintaxGuardarPartida extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxGuardarPartida() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxGuardarPartida(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxGuardarPartida(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\265\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\002\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\023\006\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\003\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\013\007\000\002\014\005\000\002\014\005\000" +
    "\002\015\011\000\002\015\011\000\002\010\007\000\002" +
    "\012\005\000\002\016\005\000\002\016\005\000\002\017" +
    "\005\000\002\017\005\000\002\020\007\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\002\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\044\005\000\002\044\005\000\002\045" +
    "\005\000\002\045\005\000\002\046\005\000\002\022\005" +
    "\000\002\063\007\000\002\063\006\000\002\062\007\000" +
    "\002\062\005\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\002\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\024\007\000\002" +
    "\027\005\000\002\030\005\000\002\031\005\000\002\032" +
    "\005\000\002\033\005\000\002\065\007\000\002\065\006" +
    "\000\002\064\007\000\002\064\005\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\002\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\040\007\000\002\041\005\000\002\042\005\000\002" +
    "\043\005\000\002\034\005\000\002\035\005\000\002\066" +
    "\007\000\002\066\006\000\002\067\007\000\002\067\005" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\002\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\053\007\000\002\054\007\000" +
    "\002\061\007\000\002\061\006\000\002\061\002\000\002" +
    "\055\007\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\057\005\000\002\057\005\000\002\060\005" +
    "\000\002\005\007\000\002\105\004\000\002\105\004\000" +
    "\002\105\004\000\002\105\004\000\002\105\002\000\002" +
    "\104\004\000\002\104\004\000\002\104\004\000\002\103" +
    "\005\000\002\106\005\000\002\110\006\000\002\110\005" +
    "\000\002\107\007\000\002\107\005\000\002\101\004\000" +
    "\002\101\004\000\002\101\004\000\002\101\004\000\002" +
    "\101\004\000\002\101\004\000\002\101\004\000\002\101" +
    "\004\000\002\101\004\000\002\101\004\000\002\101\002" +
    "\000\002\102\004\000\002\102\004\000\002\102\004\000" +
    "\002\102\004\000\002\102\004\000\002\102\004\000\002" +
    "\102\004\000\002\102\004\000\002\102\004\000\002\070" +
    "\005\000\002\071\005\000\002\072\005\000\002\073\005" +
    "\000\002\074\005\000\002\075\005\000\002\076\005\000" +
    "\002\077\005\000\002\100\005\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\004\006\006\001\002\000\004\056\u0144\001" +
    "\002\000\004\002\u0142\001\002\000\016\007\ufff9\013\010" +
    "\016\014\032\007\036\011\037\017\001\002\000\004\012" +
    "\u010a\001\002\000\012\016\014\032\007\036\011\037\017" +
    "\001\002\000\004\012\311\001\002\000\016\007\ufff9\013" +
    "\010\016\014\032\007\036\011\037\017\001\002\000\016" +
    "\007\ufff9\013\010\016\014\032\007\036\011\037\017\001" +
    "\002\000\004\012\131\001\002\000\004\007\130\001\002" +
    "\000\016\007\ufff9\013\010\016\014\032\007\036\011\037" +
    "\017\001\002\000\004\012\022\001\002\000\016\007\ufff9" +
    "\013\010\016\014\032\007\036\011\037\017\001\002\000" +
    "\004\007\ufffb\001\002\000\004\010\023\001\002\000\006" +
    "\006\026\011\025\001\002\000\004\011\126\001\002\000" +
    "\016\007\uff96\013\uff96\016\uff96\032\uff96\036\uff96\037\uff96" +
    "\001\002\000\022\007\uff8c\013\030\033\043\040\033\041" +
    "\040\052\031\064\037\074\044\001\002\000\022\007\uff8c" +
    "\013\030\033\043\040\033\041\040\052\031\064\037\074" +
    "\044\001\002\000\016\033\043\040\033\041\040\052\031" +
    "\064\037\074\044\001\002\000\004\012\104\001\002\000" +
    "\022\007\uff8c\013\030\033\043\040\033\041\040\052\031" +
    "\064\037\074\044\001\002\000\004\012\071\001\002\000" +
    "\022\007\uff8c\013\030\033\043\040\033\041\040\052\031" +
    "\064\037\074\044\001\002\000\022\007\uff8c\013\030\033" +
    "\043\040\033\041\040\052\031\064\037\074\044\001\002" +
    "\000\022\007\uff8c\013\030\033\043\040\033\041\040\052" +
    "\031\064\037\074\044\001\002\000\004\012\064\001\002" +
    "\000\004\012\060\001\002\000\022\007\uff8c\013\030\033" +
    "\043\040\033\041\040\052\031\064\037\074\044\001\002" +
    "\000\004\007\054\001\002\000\004\012\050\001\002\000" +
    "\004\012\045\001\002\000\006\004\047\005\046\001\002" +
    "\000\022\007\uff7b\013\uff7b\033\uff7b\040\uff7b\041\uff7b\052" +
    "\uff7b\064\uff7b\074\uff7b\001\002\000\022\007\uff7c\013\uff7c" +
    "\033\uff7c\040\uff7c\041\uff7c\052\uff7c\064\uff7c\074\uff7c\001" +
    "\002\000\004\015\051\001\002\000\004\047\052\001\002" +
    "\000\004\015\053\001\002\000\022\007\uff85\013\uff85\033" +
    "\uff85\040\uff85\041\uff85\052\uff85\064\uff85\074\uff85\001\002" +
    "\000\006\011\uff94\013\055\001\002\000\004\006\026\001" +
    "\002\000\004\011\uff95\001\002\000\004\007\uff93\001\002" +
    "\000\010\042\061\043\062\044\063\001\002\000\022\007" +
    "\uff7d\013\uff7d\033\uff7d\040\uff7d\041\uff7d\052\uff7d\064\uff7d" +
    "\074\uff7d\001\002\000\022\007\uff7e\013\uff7e\033\uff7e\040" +
    "\uff7e\041\uff7e\052\uff7e\064\uff7e\074\uff7e\001\002\000\022" +
    "\007\uff7f\013\uff7f\033\uff7f\040\uff7f\041\uff7f\052\uff7f\064" +
    "\uff7f\074\uff7f\001\002\000\004\045\065\001\002\000\022" +
    "\007\uff7a\013\uff7a\033\uff7a\040\uff7a\041\uff7a\052\uff7a\064" +
    "\uff7a\074\uff7a\001\002\000\004\007\uff92\001\002\000\004" +
    "\007\uff91\001\002\000\004\007\uff8f\001\002\000\004\010" +
    "\072\001\002\000\006\011\uff81\015\074\001\002\000\004" +
    "\011\102\001\002\000\004\047\075\001\002\000\004\015" +
    "\076\001\002\000\010\011\uff81\013\077\015\074\001\002" +
    "\000\006\011\uff81\015\074\001\002\000\004\011\uff82\001" +
    "\002\000\004\011\uff83\001\002\000\022\007\uff84\013\uff84" +
    "\033\uff84\040\uff84\041\uff84\052\uff84\064\uff84\074\uff84\001" +
    "\002\000\004\007\uff90\001\002\000\004\015\105\001\002" +
    "\000\004\055\106\001\002\000\004\015\107\001\002\000" +
    "\022\007\uff80\013\uff80\033\uff80\040\uff80\041\uff80\052\uff80" +
    "\064\uff80\074\uff80\001\002\000\022\007\uff8c\013\030\033" +
    "\043\040\033\041\040\052\031\064\037\074\044\001\002" +
    "\000\004\007\uff8d\001\002\000\022\007\uff8c\013\030\033" +
    "\043\040\033\041\040\052\031\064\037\074\044\001\002" +
    "\000\022\007\uff8c\013\030\033\043\040\033\041\040\052" +
    "\031\064\037\074\044\001\002\000\022\007\uff8c\013\030" +
    "\033\043\040\033\041\040\052\031\064\037\074\044\001" +
    "\002\000\022\007\uff8c\013\030\033\043\040\033\041\040" +
    "\052\031\064\037\074\044\001\002\000\022\007\uff8c\013" +
    "\030\033\043\040\033\041\040\052\031\064\037\074\044" +
    "\001\002\000\004\007\uff8b\001\002\000\004\007\uff8a\001" +
    "\002\000\004\007\uff89\001\002\000\004\007\uff87\001\002" +
    "\000\004\007\uff88\001\002\000\004\007\uff86\001\002\000" +
    "\004\007\uff8e\001\002\000\016\007\uff97\013\uff97\016\uff97" +
    "\032\uff97\036\uff97\037\uff97\001\002\000\004\007\ufffe\001" +
    "\002\000\004\056\uffff\001\002\000\004\006\132\001\002" +
    "\000\026\007\145\013\136\017\141\020\140\021\135\022" +
    "\154\023\137\024\155\025\142\031\134\001\002\000\026" +
    "\007\145\013\136\017\141\020\140\021\135\022\154\023" +
    "\137\024\155\025\142\031\134\001\002\000\004\012\304" +
    "\001\002\000\004\012\301\001\002\000\022\017\141\020" +
    "\140\021\135\022\154\023\137\024\155\025\142\031\134" +
    "\001\002\000\004\012\255\001\002\000\004\012\233\001" +
    "\002\000\004\012\227\001\002\000\004\012\172\001\002" +
    "\000\026\007\145\013\136\017\141\020\140\021\135\022" +
    "\154\023\137\024\155\025\142\031\134\001\002\000\026" +
    "\007\145\013\136\017\141\020\140\021\135\022\154\023" +
    "\137\024\155\025\142\031\134\001\002\000\016\007\uffea" +
    "\013\uffea\016\uffea\032\uffea\036\uffea\037\uffea\001\002\000" +
    "\026\007\145\013\136\017\141\020\140\021\135\022\154" +
    "\023\137\024\155\025\142\031\134\001\002\000\026\007" +
    "\145\013\136\017\141\020\140\021\135\022\154\023\137" +
    "\024\155\025\142\031\134\001\002\000\026\007\145\013" +
    "\136\017\141\020\140\021\135\022\154\023\137\024\155" +
    "\025\142\031\134\001\002\000\026\007\145\013\136\017" +
    "\141\020\140\021\135\022\154\023\137\024\155\025\142" +
    "\031\134\001\002\000\026\007\145\013\136\017\141\020" +
    "\140\021\135\022\154\023\137\024\155\025\142\031\134" +
    "\001\002\000\016\007\ufff4\013\ufff4\016\ufff4\032\ufff4\036" +
    "\ufff4\037\ufff4\001\002\000\004\012\161\001\002\000\004" +
    "\012\156\001\002\000\006\004\160\005\157\001\002\000" +
    "\026\007\uffd7\013\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\031\uffd7\001\002\000\026\007" +
    "\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\031\uffd8\001\002\000\004\045\162\001" +
    "\002\000\026\007\uffdb\013\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\031\uffdb\001\002\000" +
    "\016\007\ufff3\013\ufff3\016\ufff3\032\ufff3\036\ufff3\037\ufff3" +
    "\001\002\000\016\007\ufff1\013\ufff1\016\ufff1\032\ufff1\036" +
    "\ufff1\037\ufff1\001\002\000\016\007\ufff0\013\ufff0\016\ufff0" +
    "\032\ufff0\036\ufff0\037\ufff0\001\002\000\016\007\ufff2\013" +
    "\ufff2\016\ufff2\032\ufff2\036\ufff2\037\ufff2\001\002\000\016" +
    "\007\uffef\013\uffef\016\uffef\032\uffef\036\uffef\037\uffef\001" +
    "\002\000\016\007\uffee\013\uffee\016\uffee\032\uffee\036\uffee" +
    "\037\uffee\001\002\000\016\007\uffec\013\uffec\016\uffec\032" +
    "\uffec\036\uffec\037\uffec\001\002\000\004\006\173\001\002" +
    "\000\014\007\uffd1\013\175\026\177\027\201\030\200\001" +
    "\002\000\014\007\uffd1\013\175\026\177\027\201\030\200" +
    "\001\002\000\010\026\177\027\201\030\200\001\002\000" +
    "\004\007\216\001\002\000\004\012\213\001\002\000\004" +
    "\012\211\001\002\000\004\012\206\001\002\000\014\007" +
    "\uffd1\013\175\026\177\027\201\030\200\001\002\000\014" +
    "\007\uffd1\013\175\026\177\027\201\030\200\001\002\000" +
    "\004\007\uffd4\001\002\000\004\007\uffd3\001\002\000\006" +
    "\004\210\005\207\001\002\000\014\007\uffca\013\uffca\026" +
    "\uffca\027\uffca\030\uffca\001\002\000\014\007\uffcb\013\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\001\002\000\004\045\212\001" +
    "\002\000\014\007\uffc9\013\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\001\002\000\006\004\215\005\214\001\002\000\014\007" +
    "\uffcc\013\uffcc\026\uffcc\027\uffcc\030\uffcc\001\002\000\014" +
    "\007\uffcd\013\uffcd\026\uffcd\027\uffcd\030\uffcd\001\002\000" +
    "\026\007\uffd6\013\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\031\uffd6\001\002\000\014\007" +
    "\uffd1\013\175\026\177\027\201\030\200\001\002\000\004" +
    "\007\uffd2\001\002\000\014\007\uffd1\013\175\026\177\027" +
    "\201\030\200\001\002\000\014\007\uffd1\013\175\026\177" +
    "\027\201\030\200\001\002\000\004\007\uffcf\001\002\000" +
    "\004\007\uffce\001\002\000\004\007\uffd0\001\002\000\004" +
    "\007\uffd5\001\002\000\004\015\230\001\002\000\004\047" +
    "\231\001\002\000\004\015\232\001\002\000\026\007\uffdc" +
    "\013\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\031\uffdc\001\002\000\004\006\234\001\002" +
    "\000\006\050\237\051\236\001\002\000\004\007\254\001" +
    "\002\000\004\012\246\001\002\000\004\012\240\001\002" +
    "\000\004\045\241\001\002\000\004\013\242\001\002\000" +
    "\004\051\243\001\002\000\004\012\244\001\002\000\004" +
    "\045\245\001\002\000\004\007\uffde\001\002\000\004\045" +
    "\247\001\002\000\004\013\250\001\002\000\004\050\251" +
    "\001\002\000\004\012\252\001\002\000\004\045\253\001" +
    "\002\000\004\007\uffdd\001\002\000\026\007\uffe1\013\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\031\uffe1\001\002\000\006\004\257\005\256\001\002" +
    "\000\026\007\uffd9\013\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\031\uffd9\001\002\000\026" +
    "\007\uffda\013\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\031\uffda\001\002\000\016\007\uffeb" +
    "\013\uffeb\016\uffeb\032\uffeb\036\uffeb\037\uffeb\001\002\000" +
    "\026\007\145\013\136\017\141\020\140\021\135\022\154" +
    "\023\137\024\155\025\142\031\134\001\002\000\026\007" +
    "\145\013\136\017\141\020\140\021\135\022\154\023\137" +
    "\024\155\025\142\031\134\001\002\000\026\007\145\013" +
    "\136\017\141\020\140\021\135\022\154\023\137\024\155" +
    "\025\142\031\134\001\002\000\026\007\145\013\136\017" +
    "\141\020\140\021\135\022\154\023\137\024\155\025\142" +
    "\031\134\001\002\000\026\007\145\013\136\017\141\020" +
    "\140\021\135\022\154\023\137\024\155\025\142\031\134" +
    "\001\002\000\026\007\145\013\136\017\141\020\140\021" +
    "\135\022\154\023\137\024\155\025\142\031\134\001\002" +
    "\000\026\007\145\013\136\017\141\020\140\021\135\022" +
    "\154\023\137\024\155\025\142\031\134\001\002\000\026" +
    "\007\145\013\136\017\141\020\140\021\135\022\154\023" +
    "\137\024\155\025\142\031\134\001\002\000\016\007\uffe3" +
    "\013\uffe3\016\uffe3\032\uffe3\036\uffe3\037\uffe3\001\002\000" +
    "\016\007\uffe9\013\uffe9\016\uffe9\032\uffe9\036\uffe9\037\uffe9" +
    "\001\002\000\016\007\uffe7\013\uffe7\016\uffe7\032\uffe7\036" +
    "\uffe7\037\uffe7\001\002\000\016\007\uffe6\013\uffe6\016\uffe6" +
    "\032\uffe6\036\uffe6\037\uffe6\001\002\000\016\007\uffe8\013" +
    "\uffe8\016\uffe8\032\uffe8\036\uffe8\037\uffe8\001\002\000\016" +
    "\007\uffe5\013\uffe5\016\uffe5\032\uffe5\036\uffe5\037\uffe5\001" +
    "\002\000\016\007\uffe4\013\uffe4\016\uffe4\032\uffe4\036\uffe4" +
    "\037\uffe4\001\002\000\016\007\uffe2\013\uffe2\016\uffe2\032" +
    "\uffe2\036\uffe2\037\uffe2\001\002\000\006\004\303\005\302" +
    "\001\002\000\026\007\uffdf\013\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\031\uffdf\001\002" +
    "\000\026\007\uffe0\013\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\001\002\000\004" +
    "\045\305\001\002\000\026\007\uffc8\013\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\031\uffc8" +
    "\001\002\000\016\007\uffed\013\uffed\016\uffed\032\uffed\036" +
    "\uffed\037\uffed\001\002\000\004\007\ufffc\001\002\000\004" +
    "\007\ufffd\001\002\000\004\010\312\001\002\000\006\006" +
    "\315\011\314\001\002\000\004\011\u0100\001\002\000\016" +
    "\007\uffae\013\uffae\016\uffae\032\uffae\036\uffae\037\uffae\001" +
    "\002\000\022\007\uffa4\013\320\030\322\033\330\034\325" +
    "\035\332\053\321\054\317\001\002\000\022\007\uffa4\013" +
    "\320\030\322\033\330\034\325\035\332\053\321\054\317" +
    "\001\002\000\004\012\375\001\002\000\016\030\322\033" +
    "\330\034\325\035\332\053\321\054\317\001\002\000\004" +
    "\012\356\001\002\000\004\012\354\001\002\000\022\007" +
    "\uffa4\013\320\030\322\033\330\034\325\035\332\053\321" +
    "\054\317\001\002\000\022\007\uffa4\013\320\030\322\033" +
    "\330\034\325\035\332\053\321\054\317\001\002\000\004" +
    "\012\350\001\002\000\022\007\uffa4\013\320\030\322\033" +
    "\330\034\325\035\332\053\321\054\317\001\002\000\004" +
    "\007\344\001\002\000\004\012\340\001\002\000\022\007" +
    "\uffa4\013\320\030\322\033\330\034\325\035\332\053\321" +
    "\054\317\001\002\000\004\012\335\001\002\000\022\007" +
    "\uffa4\013\320\030\322\033\330\034\325\035\332\053\321" +
    "\054\317\001\002\000\004\007\uffa9\001\002\000\004\046" +
    "\336\001\002\000\022\007\uff9a\013\uff9a\030\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\053\uff9a\054\uff9a\001\002\000\004\007" +
    "\uffa8\001\002\000\004\015\341\001\002\000\004\047\342" +
    "\001\002\000\004\015\343\001\002\000\022\007\uff9d\013" +
    "\uff9d\030\uff9d\033\uff9d\034\uff9d\035\uff9d\053\uff9d\054\uff9d" +
    "\001\002\000\006\011\uffac\013\345\001\002\000\004\006" +
    "\315\001\002\000\004\011\uffad\001\002\000\004\007\uffab" +
    "\001\002\000\004\045\351\001\002\000\022\007\uff9c\013" +
    "\uff9c\030\uff9c\033\uff9c\034\uff9c\035\uff9c\053\uff9c\054\uff9c" +
    "\001\002\000\004\007\uffa7\001\002\000\004\007\uffa6\001" +
    "\002\000\004\045\355\001\002\000\022\007\uff9b\013\uff9b" +
    "\030\uff9b\033\uff9b\034\uff9b\035\uff9b\053\uff9b\054\uff9b\001" +
    "\002\000\004\045\357\001\002\000\022\007\uff99\013\uff99" +
    "\030\uff99\033\uff99\034\uff99\035\uff99\053\uff99\054\uff99\001" +
    "\002\000\022\007\uffa4\013\320\030\322\033\330\034\325" +
    "\035\332\053\321\054\317\001\002\000\004\007\uffa5\001" +
    "\002\000\022\007\uffa4\013\320\030\322\033\330\034\325" +
    "\035\332\053\321\054\317\001\002\000\022\007\uffa4\013" +
    "\320\030\322\033\330\034\325\035\332\053\321\054\317" +
    "\001\002\000\022\007\uffa4\013\320\030\322\033\330\034" +
    "\325\035\332\053\321\054\317\001\002\000\022\007\uffa4" +
    "\013\320\030\322\033\330\034\325\035\332\053\321\054" +
    "\317\001\002\000\022\007\uffa4\013\320\030\322\033\330" +
    "\034\325\035\332\053\321\054\317\001\002\000\004\007" +
    "\uffa1\001\002\000\004\007\uffa0\001\002\000\004\007\uffa3" +
    "\001\002\000\004\007\uff9f\001\002\000\004\007\uff9e\001" +
    "\002\000\004\007\uffa2\001\002\000\004\045\376\001\002" +
    "\000\022\007\uff98\013\uff98\030\uff98\033\uff98\034\uff98\035" +
    "\uff98\053\uff98\054\uff98\001\002\000\004\007\uffaa\001\002" +
    "\000\016\007\uffaf\013\uffaf\016\uffaf\032\uffaf\036\uffaf\037" +
    "\uffaf\001\002\000\016\007\ufff9\013\010\016\014\032\007" +
    "\036\011\037\017\001\002\000\016\007\ufff9\013\010\016" +
    "\014\032\007\036\011\037\017\001\002\000\004\007\ufffa" +
    "\001\002\000\016\007\ufff9\013\010\016\014\032\007\036" +
    "\011\037\017\001\002\000\016\007\ufff9\013\010\016\014" +
    "\032\007\036\011\037\017\001\002\000\004\007\ufff5\001" +
    "\002\000\004\007\ufff8\001\002\000\004\007\ufff6\001\002" +
    "\000\004\007\ufff7\001\002\000\004\010\u010b\001\002\000" +
    "\006\006\u010e\011\u010d\001\002\000\004\011\u0141\001\002" +
    "\000\016\007\uffc6\013\uffc6\016\uffc6\032\uffc6\036\uffc6\037" +
    "\uffc6\001\002\000\022\007\uffbc\013\u0111\030\u0112\033\u0118" +
    "\034\u0115\035\u011a\053\u0110\054\u010f\001\002\000\004\012" +
    "\u013f\001\002\000\004\012\u013d\001\002\000\016\030\u0112" +
    "\033\u0118\034\u0115\035\u011a\053\u0110\054\u010f\001\002\000" +
    "\004\012\u012e\001\002\000\022\007\uffbc\013\u0111\030\u0112" +
    "\033\u0118\034\u0115\035\u011a\053\u0110\054\u010f\001\002\000" +
    "\022\007\uffbc\013\u0111\030\u0112\033\u0118\034\u0115\035\u011a" +
    "\053\u0110\054\u010f\001\002\000\004\012\u012a\001\002\000" +
    "\022\007\uffbc\013\u0111\030\u0112\033\u0118\034\u0115\035\u011a" +
    "\053\u0110\054\u010f\001\002\000\022\007\uffbc\013\u0111\030" +
    "\u0112\033\u0118\034\u0115\035\u011a\053\u0110\054\u010f\001\002" +
    "\000\004\012\u0124\001\002\000\022\007\uffbc\013\u0111\030" +
    "\u0112\033\u0118\034\u0115\035\u011a\053\u0110\054\u010f\001\002" +
    "\000\004\012\u0121\001\002\000\022\007\uffbc\013\u0111\030" +
    "\u0112\033\u0118\034\u0115\035\u011a\053\u0110\054\u010f\001\002" +
    "\000\004\007\u011d\001\002\000\006\011\uffc4\013\u011e\001" +
    "\002\000\004\006\u010e\001\002\000\004\011\uffc5\001\002" +
    "\000\004\007\uffc3\001\002\000\004\046\u0122\001\002\000" +
    "\022\007\uffb2\013\uffb2\030\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\053\uffb2\054\uffb2\001\002\000\004\007\uffc2\001\002\000" +
    "\004\015\u0125\001\002\000\004\047\u0126\001\002\000\004" +
    "\015\u0127\001\002\000\022\007\uffb5\013\uffb5\030\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\053\uffb5\054\uffb5\001\002\000\004" +
    "\007\uffc1\001\002\000\004\007\uffc0\001\002\000\004\045" +
    "\u012b\001\002\000\022\007\uffb4\013\uffb4\030\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\053\uffb4\054\uffb4\001\002\000\004\007" +
    "\uffbf\001\002\000\004\007\uffbe\001\002\000\004\045\u012f" +
    "\001\002\000\022\007\uffb3\013\uffb3\030\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\053\uffb3\054\uffb3\001\002\000\004\007\uffbd" +
    "\001\002\000\022\007\uffbc\013\u0111\030\u0112\033\u0118\034" +
    "\u0115\035\u011a\053\u0110\054\u010f\001\002\000\022\007\uffbc" +
    "\013\u0111\030\u0112\033\u0118\034\u0115\035\u011a\053\u0110\054" +
    "\u010f\001\002\000\022\007\uffbc\013\u0111\030\u0112\033\u0118" +
    "\034\u0115\035\u011a\053\u0110\054\u010f\001\002\000\022\007" +
    "\uffbc\013\u0111\030\u0112\033\u0118\034\u0115\035\u011a\053\u0110" +
    "\054\u010f\001\002\000\022\007\uffbc\013\u0111\030\u0112\033" +
    "\u0118\034\u0115\035\u011a\053\u0110\054\u010f\001\002\000\022" +
    "\007\uffbc\013\u0111\030\u0112\033\u0118\034\u0115\035\u011a\053" +
    "\u0110\054\u010f\001\002\000\004\007\uffbb\001\002\000\004" +
    "\007\uffba\001\002\000\004\007\uffb9\001\002\000\004\007" +
    "\uffb8\001\002\000\004\007\uffb7\001\002\000\004\007\uffb6" +
    "\001\002\000\004\045\u013e\001\002\000\022\007\uffb1\013" +
    "\uffb1\030\uffb1\033\uffb1\034\uffb1\035\uffb1\053\uffb1\054\uffb1" +
    "\001\002\000\004\045\u0140\001\002\000\022\007\uffb0\013" +
    "\uffb0\030\uffb0\033\uffb0\034\uffb0\035\uffb0\053\uffb0\054\uffb0" +
    "\001\002\000\016\007\uffc7\013\uffc7\016\uffc7\032\uffc7\036" +
    "\uffc7\037\uffc7\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002\000\004\012\u0145\001\002\000\004\010" +
    "\u0146\001\002\000\014\011\uff74\013\u0147\057\u014d\060\u0148" +
    "\065\u0149\001\002\000\010\057\u014d\060\u0148\065\u0149\001" +
    "\002\000\004\010\u0157\001\002\000\004\012\u0155\001\002" +
    "\000\014\011\uff74\013\u0147\057\u014d\060\u0148\065\u0149\001" +
    "\002\000\004\011\u0153\001\002\000\014\011\uff74\013\u0147" +
    "\057\u014d\060\u0148\065\u0149\001\002\000\004\012\u0150\001" +
    "\002\000\014\011\uff74\013\u0147\057\u014d\060\u0148\065\u0149" +
    "\001\002\000\004\011\uff78\001\002\000\004\045\u0151\001" +
    "\002\000\014\011\uff70\013\uff70\057\uff70\060\uff70\065\uff70" +
    "\001\002\000\004\011\uff76\001\002\000\004\002\uff79\001" +
    "\002\000\004\011\uff77\001\002\000\004\045\u0156\001\002" +
    "\000\014\011\uff6f\013\uff6f\057\uff6f\060\uff6f\065\uff6f\001" +
    "\002\000\006\006\u015a\011\u0159\001\002\000\004\011\u01a1" +
    "\001\002\000\014\011\uff6d\013\uff6d\057\uff6d\060\uff6d\065" +
    "\uff6d\001\002\000\030\007\uff60\013\u016a\035\u0169\061\u0163" +
    "\062\u016e\063\u016b\066\u016d\067\u015e\070\u0168\071\u015b\072" +
    "\u016c\001\002\000\004\012\u019f\001\002\000\030\007\uff60" +
    "\013\u016a\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067" +
    "\u015e\070\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60" +
    "\013\u016a\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067" +
    "\u015e\070\u0168\071\u015b\072\u016c\001\002\000\004\012\u019b" +
    "\001\002\000\030\007\uff60\013\u016a\035\u0169\061\u0163\062" +
    "\u016e\063\u016b\066\u016d\067\u015e\070\u0168\071\u015b\072\u016c" +
    "\001\002\000\030\007\uff60\013\u016a\035\u0169\061\u0163\062" +
    "\u016e\063\u016b\066\u016d\067\u015e\070\u0168\071\u015b\072\u016c" +
    "\001\002\000\030\007\uff60\013\u016a\035\u0169\061\u0163\062" +
    "\u016e\063\u016b\066\u016d\067\u015e\070\u0168\071\u015b\072\u016c" +
    "\001\002\000\030\007\uff60\013\u016a\035\u0169\061\u0163\062" +
    "\u016e\063\u016b\066\u016d\067\u015e\070\u0168\071\u015b\072\u016c" +
    "\001\002\000\004\012\u0195\001\002\000\030\007\uff60\013" +
    "\u016a\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e" +
    "\070\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013" +
    "\u016a\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e" +
    "\070\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013" +
    "\u016a\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e" +
    "\070\u0168\071\u015b\072\u016c\001\002\000\004\007\u018f\001" +
    "\002\000\004\012\u018d\001\002\000\004\012\u018b\001\002" +
    "\000\024\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067" +
    "\u015e\070\u0168\071\u015b\072\u016c\001\002\000\004\012\u0176" +
    "\001\002\000\004\012\u0173\001\002\000\004\012\u0171\001" +
    "\002\000\004\012\u016f\001\002\000\004\047\u0170\001\002" +
    "\000\030\007\uff55\013\uff55\035\uff55\061\uff55\062\uff55\063" +
    "\uff55\066\uff55\067\uff55\070\uff55\071\uff55\072\uff55\001\002" +
    "\000\004\045\u0172\001\002\000\030\007\uff53\013\uff53\035" +
    "\uff53\061\uff53\062\uff53\063\uff53\066\uff53\067\uff53\070\uff53" +
    "\071\uff53\072\uff53\001\002\000\006\004\u0175\005\u0174\001" +
    "\002\000\030\007\uff4d\013\uff4d\035\uff4d\061\uff4d\062\uff4d" +
    "\063\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\001" +
    "\002\000\030\007\uff4e\013\uff4e\035\uff4e\061\uff4e\062\uff4e" +
    "\063\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\001" +
    "\002\000\004\047\u0177\001\002\000\030\007\uff54\013\uff54" +
    "\035\uff54\061\uff54\062\uff54\063\uff54\066\uff54\067\uff54\070" +
    "\uff54\071\uff54\072\uff54\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\030\007\uff60\013\u016a" +
    "\035\u0169\061\u0163\062\u016e\063\u016b\066\u016d\067\u015e\070" +
    "\u0168\071\u015b\072\u016c\001\002\000\004\007\uff61\001\002" +
    "\000\004\007\uff5f\001\002\000\004\007\uff5e\001\002\000" +
    "\004\007\uff5d\001\002\000\004\007\uff5c\001\002\000\004" +
    "\007\uff5b\001\002\000\004\007\uff5a\001\002\000\004\007" +
    "\uff59\001\002\000\004\007\uff58\001\002\000\004\007\uff57" +
    "\001\002\000\004\046\u018c\001\002\000\030\007\uff52\013" +
    "\uff52\035\uff52\061\uff52\062\uff52\063\uff52\066\uff52\067\uff52" +
    "\070\uff52\071\uff52\072\uff52\001\002\000\004\045\u018e\001" +
    "\002\000\030\007\uff50\013\uff50\035\uff50\061\uff50\062\uff50" +
    "\063\uff50\066\uff50\067\uff50\070\uff50\071\uff50\072\uff50\001" +
    "\002\000\006\011\uff6b\013\u0190\001\002\000\004\006\u015a" +
    "\001\002\000\004\011\uff6c\001\002\000\004\007\uff6a\001" +
    "\002\000\004\007\uff69\001\002\000\004\007\uff68\001\002" +
    "\000\004\045\u0196\001\002\000\030\007\uff56\013\uff56\035" +
    "\uff56\061\uff56\062\uff56\063\uff56\066\uff56\067\uff56\070\uff56" +
    "\071\uff56\072\uff56\001\002\000\004\007\uff67\001\002\000" +
    "\004\007\uff66\001\002\000\004\007\uff65\001\002\000\004" +
    "\007\uff64\001\002\000\004\045\u019c\001\002\000\030\007" +
    "\uff51\013\uff51\035\uff51\061\uff51\062\uff51\063\uff51\066\uff51" +
    "\067\uff51\070\uff51\071\uff51\072\uff51\001\002\000\004\007" +
    "\uff63\001\002\000\004\007\uff62\001\002\000\004\045\u01a0" +
    "\001\002\000\030\007\uff4f\013\uff4f\035\uff4f\061\uff4f\062" +
    "\uff4f\063\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f" +
    "\001\002\000\014\011\uff6e\013\uff6e\057\uff6e\060\uff6e\065" +
    "\uff6e\001\002\000\004\011\uff75\001\002\000\014\011\uff74" +
    "\013\u0147\057\u014d\060\u0148\065\u0149\001\002\000\014\011" +
    "\uff74\013\u0147\057\u014d\060\u0148\065\u0149\001\002\000\014" +
    "\011\uff74\013\u0147\057\u014d\060\u0148\065\u0149\001\002\000" +
    "\004\011\uff73\001\002\000\004\011\uff71\001\002\000\004" +
    "\011\uff72\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\006\002\004\003\003\001\001\000\004\005" +
    "\u0142\001\001\000\002\001\001\000\014\006\014\023\015" +
    "\063\011\065\012\066\017\001\001\000\002\001\001\000" +
    "\014\007\u0102\023\u0103\063\u0100\065\u0101\066\u0104\001\001" +
    "\000\002\001\001\000\014\006\307\023\015\063\011\065" +
    "\012\066\017\001\001\000\014\006\306\023\015\063\011" +
    "\065\012\066\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\126\023\015\063\011\065\012\066\017" +
    "\001\001\000\002\001\001\000\014\006\020\023\015\063" +
    "\011\065\012\066\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\051\041\053\040\054\035\055\031" +
    "\056\034\057\033\060\026\001\001\000\020\051\124\053" +
    "\040\054\035\055\031\056\034\057\033\060\026\001\001" +
    "\000\020\052\110\053\115\054\114\055\111\056\113\057" +
    "\112\060\107\001\001\000\002\001\001\000\020\051\102" +
    "\053\040\054\035\055\031\056\034\057\033\060\026\001" +
    "\001\000\002\001\001\000\020\051\067\053\040\054\035" +
    "\055\031\056\034\057\033\060\026\001\001\000\020\051" +
    "\066\053\040\054\035\055\031\056\034\057\033\060\026" +
    "\001\001\000\020\051\065\053\040\054\035\055\031\056" +
    "\034\057\033\060\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\051\056\053\040\054\035\055\031\056" +
    "\034\057\033\060\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\077\001\001\000" +
    "\004\061\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\051\123\053\040\054\035\055\031\056\034\057\033\060" +
    "\026\001\001\000\002\001\001\000\020\051\122\053\040" +
    "\054\035\055\031\056\034\057\033\060\026\001\001\000" +
    "\020\051\121\053\040\054\035\055\031\056\034\057\033" +
    "\060\026\001\001\000\020\051\120\053\040\054\035\055" +
    "\031\056\034\057\033\060\026\001\001\000\020\051\117" +
    "\053\040\054\035\055\031\056\034\057\033\060\026\001" +
    "\001\000\020\051\116\053\040\054\035\055\031\056\034" +
    "\057\033\060\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\151\011\152\012\146\013\150\014\147\016\145\017" +
    "\143\020\132\022\142\001\001\000\024\010\151\011\305" +
    "\012\146\013\150\014\147\016\145\017\143\020\132\022" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\266\012\263\013\265\014\264\016\262\017\261\020" +
    "\267\021\257\022\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\151\011\170\012\146\013\150\014\147\016\145\017\143" +
    "\020\132\022\142\001\001\000\024\010\151\011\167\012" +
    "\146\013\150\014\147\016\145\017\143\020\132\022\142" +
    "\001\001\000\002\001\001\000\024\010\151\011\166\012" +
    "\146\013\150\014\147\016\145\017\143\020\132\022\142" +
    "\001\001\000\024\010\151\011\165\012\146\013\150\014" +
    "\147\016\145\017\143\020\132\022\142\001\001\000\024" +
    "\010\151\011\164\012\146\013\150\014\147\016\145\017" +
    "\143\020\132\022\142\001\001\000\024\010\151\011\163" +
    "\012\146\013\150\014\147\016\145\017\143\020\132\022" +
    "\142\001\001\000\024\010\151\011\162\012\146\013\150" +
    "\014\147\016\145\017\143\020\132\022\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\044\173\045\202\046\201\047\175\001\001\000\012\044" +
    "\173\045\202\046\201\047\225\001\001\000\012\044\216" +
    "\045\221\046\220\050\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\044\173\045\202\046\201\047\204\001\001\000\012\044" +
    "\173\045\202\046\201\047\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\044\173\045\202\046\201\047\224\001\001" +
    "\000\002\001\001\000\012\044\173\045\202\046\201\047" +
    "\223\001\001\000\012\044\173\045\202\046\201\047\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\151\011\277" +
    "\012\146\013\150\014\147\016\145\017\143\020\132\022" +
    "\142\001\001\000\024\010\151\011\276\012\146\013\150" +
    "\014\147\016\145\017\143\020\132\022\142\001\001\000" +
    "\024\010\151\011\275\012\146\013\150\014\147\016\145" +
    "\017\143\020\132\022\142\001\001\000\024\010\151\011" +
    "\274\012\146\013\150\014\147\016\145\017\143\020\132" +
    "\022\142\001\001\000\024\010\151\011\273\012\146\013" +
    "\150\014\147\016\145\017\143\020\132\022\142\001\001" +
    "\000\024\010\151\011\272\012\146\013\150\014\147\016" +
    "\145\017\143\020\132\022\142\001\001\000\024\010\151" +
    "\011\271\012\146\013\150\014\147\016\145\017\143\020" +
    "\132\022\142\001\001\000\024\010\151\011\270\012\146" +
    "\013\150\014\147\016\145\017\143\020\132\022\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\034\323\035\322\036\326" +
    "\040\325\041\315\042\332\043\330\001\001\000\020\034" +
    "\323\035\322\036\376\040\325\041\315\042\332\043\330" +
    "\001\001\000\002\001\001\000\020\034\362\035\361\037" +
    "\360\040\363\041\357\042\365\043\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\034\323\035\322\036" +
    "\352\040\325\041\315\042\332\043\330\001\001\000\020" +
    "\034\323\035\322\036\351\040\325\041\315\042\332\043" +
    "\330\001\001\000\002\001\001\000\020\034\323\035\322" +
    "\036\346\040\325\041\315\042\332\043\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\034\323\035\322" +
    "\036\336\040\325\041\315\042\332\043\330\001\001\000" +
    "\002\001\001\000\020\034\323\035\322\036\333\040\325" +
    "\041\315\042\332\043\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\034\323\035\322\036\373\040\325\041\315\042\332" +
    "\043\330\001\001\000\002\001\001\000\020\034\323\035" +
    "\322\036\372\040\325\041\315\042\332\043\330\001\001" +
    "\000\020\034\323\035\322\036\371\040\325\041\315\042" +
    "\332\043\330\001\001\000\020\034\323\035\322\036\370" +
    "\040\325\041\315\042\332\043\330\001\001\000\020\034" +
    "\323\035\322\036\367\040\325\041\315\042\332\043\330" +
    "\001\001\000\020\034\323\035\322\036\366\040\325\041" +
    "\315\042\332\043\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\u0108\023" +
    "\015\063\011\065\012\066\017\001\001\000\014\006\u0107" +
    "\023\015\063\011\065\012\066\017\001\001\000\002\001" +
    "\001\000\014\006\u0106\023\015\063\011\065\012\066\017" +
    "\001\001\000\014\006\u0105\023\015\063\011\065\012\066" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u010b\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\u011a\025\u011b\027\u0118\030\u0116\031\u0115\032\u0113\033" +
    "\u0112\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\u0135\026\u012f\027\u0134\030\u0133\031\u0132\032\u0131\033" +
    "\u0130\001\001\000\002\001\001\000\020\024\u011a\025\u012c" +
    "\027\u0118\030\u0116\031\u0115\032\u0113\033\u0112\001\001\000" +
    "\020\024\u011a\025\u012b\027\u0118\030\u0116\031\u0115\032\u0113" +
    "\033\u0112\001\001\000\002\001\001\000\020\024\u011a\025" +
    "\u0128\027\u0118\030\u0116\031\u0115\032\u0113\033\u0112\001\001" +
    "\000\020\024\u011a\025\u0127\027\u0118\030\u0116\031\u0115\032" +
    "\u0113\033\u0112\001\001\000\002\001\001\000\020\024\u011a" +
    "\025\u0122\027\u0118\030\u0116\031\u0115\032\u0113\033\u0112\001" +
    "\001\000\002\001\001\000\020\024\u011a\025\u011f\027\u0118" +
    "\030\u0116\031\u0115\032\u0113\033\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u011e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\024\u011a\025\u013b\027\u0118" +
    "\030\u0116\031\u0115\032\u0113\033\u0112\001\001\000\020\024" +
    "\u011a\025\u013a\027\u0118\030\u0116\031\u0115\032\u0113\033\u0112" +
    "\001\001\000\020\024\u011a\025\u0139\027\u0118\030\u0116\031" +
    "\u0115\032\u0113\033\u0112\001\001\000\020\024\u011a\025\u0138" +
    "\027\u0118\030\u0116\031\u0115\032\u0113\033\u0112\001\001\000" +
    "\020\024\u011a\025\u0137\027\u0118\030\u0116\031\u0115\032\u0113" +
    "\033\u0112\001\001\000\020\024\u011a\025\u0136\027\u0118\030" +
    "\u0116\031\u0115\032\u0113\033\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\103\u014d\105\u014a\106\u0149\110" +
    "\u014b\001\001\000\012\103\u01a4\104\u01a1\106\u01a2\110\u01a3" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\103" +
    "\u014d\105\u0153\106\u0149\110\u014b\001\001\000\002\001\001" +
    "\000\012\103\u014d\105\u0151\106\u0149\110\u014b\001\001\000" +
    "\002\001\001\000\012\103\u014d\105\u014e\106\u0149\110\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\070\u0165" +
    "\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077" +
    "\u015c\100\u015b\101\u0166\001\001\000\002\001\001\000\026" +
    "\070\u0165\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076" +
    "\u015e\077\u015c\100\u015b\101\u019d\001\001\000\026\070\u0165" +
    "\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077" +
    "\u015c\100\u015b\101\u019c\001\001\000\002\001\001\000\026" +
    "\070\u0165\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076" +
    "\u015e\077\u015c\100\u015b\101\u0199\001\001\000\026\070\u0165" +
    "\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077" +
    "\u015c\100\u015b\101\u0198\001\001\000\026\070\u0165\071\u0164" +
    "\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c\100" +
    "\u015b\101\u0197\001\001\000\026\070\u0165\071\u0164\072\u0163" +
    "\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c\100\u015b\101" +
    "\u0196\001\001\000\002\001\001\000\026\070\u0165\071\u0164" +
    "\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c\100" +
    "\u015b\101\u0193\001\001\000\026\070\u0165\071\u0164\072\u0163" +
    "\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c\100\u015b\101" +
    "\u0192\001\001\000\026\070\u0165\071\u0164\072\u0163\073\u0161" +
    "\074\u0160\075\u015f\076\u015e\077\u015c\100\u015b\101\u0191\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\070\u017f\071\u017e\072\u017d\073\u017c\074\u017b\075" +
    "\u017a\076\u0179\077\u0178\100\u0177\102\u0180\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\070\u0165\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076" +
    "\u015e\077\u015c\100\u015b\101\u0189\001\001\000\026\070\u0165" +
    "\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077" +
    "\u015c\100\u015b\101\u0188\001\001\000\026\070\u0165\071\u0164" +
    "\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c\100" +
    "\u015b\101\u0187\001\001\000\026\070\u0165\071\u0164\072\u0163" +
    "\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c\100\u015b\101" +
    "\u0186\001\001\000\026\070\u0165\071\u0164\072\u0163\073\u0161" +
    "\074\u0160\075\u015f\076\u015e\077\u015c\100\u015b\101\u0185\001" +
    "\001\000\026\070\u0165\071\u0164\072\u0163\073\u0161\074\u0160" +
    "\075\u015f\076\u015e\077\u015c\100\u015b\101\u0184\001\001\000" +
    "\026\070\u0165\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f" +
    "\076\u015e\077\u015c\100\u015b\101\u0183\001\001\000\026\070" +
    "\u0165\071\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e" +
    "\077\u015c\100\u015b\101\u0182\001\001\000\026\070\u0165\071" +
    "\u0164\072\u0163\073\u0161\074\u0160\075\u015f\076\u015e\077\u015c" +
    "\100\u015b\101\u0181\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u0190\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\103\u014d\105\u01a7\106\u0149\110\u014b\001\001" +
    "\000\012\103\u014d\105\u01a6\106\u0149\110\u014b\001\001\000" +
    "\012\103\u014d\105\u01a5\106\u0149\110\u014b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxGuardarPartida$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxGuardarPartida$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxGuardarPartida$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;

    public SintaxGuardarPartida(AnalizadorLexico2 lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas){
        super(lex);
        this.tablero = tablero;
        this.btnDistancia = btnDistancia;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnFlotas = btnFlotas;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
    }

    public void crearCuadriculaJuego(Juego misDatos){
        tablero.creacionCuadricula(misDatos, txtNaves, contador, navesCamino, btnTurno, btnDistancia, btnFlotas);
    }

    public boolean verificadorNombresJugadores(ArrayList<Jugadores> listJugadores, boolean verificador){
        if(verificador == true){
            for(int i = 0; i < listJugadores.size(); i++){
                String jugador1 = listJugadores.get(i).getNombre();
                    if(jugador1.length() > 10){
                        System.out.println("exceso de letras");
                        verificador = false;
                        break;
                    }
                
                for(int j = i+1; j < listJugadores.size()+1; j++){
                        if(j!=listJugadores.size()){
                        String jugador2 = listJugadores.get(j).getNombre();
                        if(jugador1.equals(jugador2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        } 
        return verificador;
    }


    public boolean verificadorNombresPlanetas(boolean verificador, ArrayList<Planetas> listPlanetas){
        if(verificador == true){
            for(int i = 0; i < listPlanetas.size(); i++){
                String nombrePlaneta = listPlanetas.get(i).getNombre();
                if(nombrePlaneta.length() > 3){
                    System.out.println("exceso de letras");
                    verificador = false;
                    break;
                } else {
                    for(int j = i+1; j < listPlanetas.size()+1; j++){
                        if(j!=listPlanetas.size()){
                            String nombrePlaneta2 = listPlanetas.get(j).getNombre();
                            if(nombrePlaneta.equals(nombrePlaneta2)){
                                System.out.println("Dos nombres son iguales");
                                verificador = false;
                                break;
                            }
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public boolean verificadorNombresPlanetasNeutrales(boolean verificador, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
            for(int i = 0; i < listNeutrales.size(); i ++){
                String neutral1 = listNeutrales.get(i).getNombre();
                if(neutral1.length() > 3 ){
                    System.out.println("exceso de letras"); 
                    verificador = false;
                    break;
                }   
                for(int j = i+1; j < listNeutrales.size()+1; j++){
                    if(j!=listNeutrales.size()){
                        String neutral2 = listNeutrales.get(j).getNombre();
                        if(neutral1.equals(neutral2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public void creacionMapa(Juego misDatos, boolean verificador, JTextArea panelMensajes, String totalErroress){
        if(verificador == true){
            tablero.agregarPlanetasTablero(Integer.parseInt(misDatos.getMapa().getSize_filas()), Integer.parseInt(misDatos.getMapa().getSize_columnas()), misDatos.getJugadores(), misDatos.getPlanetas());
            if(!misDatos.getPlanetas().isEmpty()){
                verificador = false;
                totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                panelMensajes.setText(totalErroress);
            }
            for(int i = 0; i < misDatos.getJugadores().size(); i++){
                if(!misDatos.getJugadores().get(i).getPlanetas().isEmpty()){
                    verificador = false;
                    totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                    panelMensajes.setText(totalErroress);
                    break;
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosPlanetas(misDatos.getMapa(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Algun planeta esta situado en una posicion que no existe dentro del mapa\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosNeutrales(misDatos.getMapa(), misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Algun planeta neutral esta situado en una posicion que no existe dentro del mapa\n";
                    System.out.println("Algun planeta neutral esta situado en una posicion que no existe dentro del mapa");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPosPlanetas(misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Dos planetas estan situados en la misma posicion\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionNeutralaNeutral(misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas neutrales estan situados en la misma posicion\n";
                    System.out.println("Dos planetas neutrales estan situados en la misma posicion");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPlanetasyNeutrales(misDatos.getpNeutrales(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas (normal y un neutral) estan situados en la misma posicion\n";
                    System.out.println("Dos planetas(normal y un neutral) estan situados en la misma posicion\n");
                }
            }
            if(verificador == true) {
                crearCuadriculaJuego(misDatos);
            } else { 
                panelMensajes.setText(totalErroress);
            }  
        }
        
    }

    public void traspasoDatosFlotas(ArrayList<NavesCamino> listNaves, ArrayList<NavesCamino> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listNaves.add(listTemporal.get(i));
        }

    }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxGuardarPartida$actions {
  private final SintaxGuardarPartida parser;

  /** Constructor */
  CUP$SintaxGuardarPartida$actions(SintaxGuardarPartida parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxGuardarPartida$do_action(
    int                        CUP$SintaxGuardarPartida$act_num,
    java_cup.runtime.lr_parser CUP$SintaxGuardarPartida$parser,
    java.util.Stack            CUP$SintaxGuardarPartida$stack,
    int                        CUP$SintaxGuardarPartida$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxGuardarPartida$result;

      /* select the action based on the action number */
      switch (CUP$SintaxGuardarPartida$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // bn ::= verificador DOS_PUNTOS FALSO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bn",62, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // bn ::= verificador DOS_PUNTOS VERDADERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bn",62, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // bm ::= jugadorAtaque DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bm",61, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // bl ::= jugadorEnvio DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bl",60, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // bk ::= llegada DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bk",59, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // bj ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString()));  RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bj",58, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // bi ::= noNaves DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bi",57, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // bh ::= planetaDestino DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bh",56, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // bg ::= planetaOrigen DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bg",55, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // bf ::= noFlota DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bf",54, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // rep2 ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // rep2 ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // rep2 ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // rep2 ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // rep2 ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // rep2 ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // rep2 ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // rep2 ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // rep2 ::= bf be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // be ::= 
            {
              NavesCamino RESULT =null;
		 RESULT=new NavesCamino(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // be ::= COMA rep2 
            {
              NavesCamino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // be ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // be ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // be ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // be ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // be ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // be ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // be ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // be ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // be ::= bf be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bd ::= LLAVE_A be LLAVE_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo"); } else { ArrayList<NavesCamino> listNaves = new ArrayList<>();  listNaves.add(a); RESULT=listNaves; }  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bd",69, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // bd ::= LLAVE_A be LLAVE_B COMA bd 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<NavesCamino> e = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bd",69, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // bc ::= NAVES_CAMINO AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bc",70, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // bc ::= NAVES_CAMINO AGRUPACION_A bd AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<NavesCamino> a = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bc",70, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // bq ::= turnoJugador DOS_PUNTOS ENTERO 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 DatosGuardados dato = new DatosGuardados(); dato.setTurnoJugador((Integer) a); RESULT=dato; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bq",68, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bb ::= turno DOS_PUNTOS ENTERO 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 DatosGuardados dato = new DatosGuardados(); dato.setContador((Integer) a); RESULT=dato; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bb",65, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // rep1 ::= bc bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<NavesCamino> a = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getListNaves()==null){ e.setListNaves(a); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // rep1 ::= bq bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getTurnoJugador()==null){ e.setTurnoJugador(a.getTurnoJugador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // rep1 ::= bb bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getContador()==null){ e.setContador(a.getContador()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // bo ::= 
            {
              DatosGuardados RESULT =null;
		 RESULT=new DatosGuardados(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // bo ::= COMA rep1 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // bo ::= bc bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<NavesCamino> a = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getListNaves()==null){ e.setListNaves(a); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // bo ::= bq bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getTurnoJugador()==null){ e.setTurnoJugador(a.getTurnoJugador()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // bo ::= bb bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getContador()==null){ e.setContador(a.getContador()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // a2 ::= CAMBIOS DOS_PUNTOS AGRUPACION_A bo AGRUPACION_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 VentanaPrincipal.contador=a.getTurnoJugador();  VentanaPrincipal.contadorTurnos=a.getContador();  parser.traspasoDatosFlotas(parser.navesCamino, a.getListNaves()); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // bp ::= planetasConquistados DOS_PUNTOS ENTERO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetasConquistados((Integer) a); RESULT= jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bp",46, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ba ::= enJuego DOS_PUNTOS FALSO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setEnJuego(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ba",45, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ba ::= enJuego DOS_PUNTOS VERDADERO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setEnJuego(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ba",45, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ah ::= tipo DOS_PUNTOS HUMANO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ah",44, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ah ::= tipo DOS_PUNTOS DIFICIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ah",44, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ah ::= tipo DOS_PUNTOS FACIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ah",44, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // al ::= color DOS_PUNTOS COMILLAS COLOR COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setColor(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("al",43, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ai ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ai",47, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ai ::= COMILLAS ID COMILLAS ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ai",47, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ai ::= COMILLAS ID COMILLAS COMA ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ai",47, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ag ::= planetas DOS_PUNTOS AGRUPACION_A ai AGRUPACION_B 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetas(a); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ag",42, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // af ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Jugadores jugador = new Jugadores();  jugador.setNombre(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("af",41, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // q7 ::= bp ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasConquistados()==null){ e.setPlanetasConquistados(a.getPlanetasConquistados()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // q7 ::= ba ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){  if(e.getEnJuego()==null){ e.setEnJuego(a.getEnJuego()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // q7 ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // q7 ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // q7 ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // q7 ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ae ::= 
            {
              Jugadores RESULT =null;
		 RESULT=new Jugadores(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ae ::= COMA q7 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ae ::= bp ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasConquistados()==null){ e.setPlanetasConquistados(a.getPlanetasConquistados()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ae ::= ba ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){  if(e.getEnJuego()==null){ e.setEnJuego(a.getEnJuego()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ae ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ae ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ae ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ae ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ad ::= LLAVE_A ae LLAVE_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getEnJuego()==null || a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { ArrayList<Jugadores> misJugadores = new ArrayList<>();  a.setMisPlanetas(new ArrayList<>()); misJugadores.add(a); RESULT=misJugadores; } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ad",53, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ad ::= LLAVE_A ae LLAVE_B COMA ad 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<Jugadores> e = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getEnJuego()==null || a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else {  a.setMisPlanetas(new ArrayList<>());  e.add(a); RESULT=e; } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ad",53, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("jug",52, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("jug",52, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // an ::= posY DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionY(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("an",27, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // am ::= posX DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionX(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("am",26, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ac ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPorcentajeMuertes(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ac",33, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ab ::= produccion DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setProduccion(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ab",32, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // aa ::= naves DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNaves(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("aa",31, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // z ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNombre(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("z",30, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // q5 ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // q5 ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // q5 ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // q5 ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // q5 ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // q5 ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // y ::= 
            {
              PlanetasNeutrales RESULT =null;
		 RESULT=new PlanetasNeutrales(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // y ::= COMA q5 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // y ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // y ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // y ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // y ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // y ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // y ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // x ::= LLAVE_A y LLAVE_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { ArrayList<PlanetasNeutrales> pNeutrales = new ArrayList<>(); pNeutrales.add(a); RESULT=pNeutrales; }  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("x",50, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // x ::= LLAVE_A y LLAVE_B COMA x 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<PlanetasNeutrales> e = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("x",50, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("pn",51, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("pn",51, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ak ::= posY DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionY(a.toString()); RESULT=planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ak",25, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // aj ::= posX DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionX(a.toString()); RESULT=planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("aj",24, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // w ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPorcentajeMuertes(a.toString());  RESULT = planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("w",23, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // v ::= produccion DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setProduccion(a.toString()); RESULT = planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("v",22, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // u ::= naves DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setNaves(a.toString()); RESULT = planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("u",21, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // t ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Planetas planetas = new Planetas(); planetas.setNombre(a.toString()); RESULT=planetas; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("t",18, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // q3 ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // q3 ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // q3 ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // q3 ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // q3 ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // q3 ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // s ::= 
            {
              Planetas RESULT =null;
		 RESULT=new Planetas(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s ::= COMA q3 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // s ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // s ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // s ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // s ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // s ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // r ::= LLAVE_A s LLAVE_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else {ArrayList<Planetas> misPlanetas = new ArrayList<>(); misPlanetas.add(a); RESULT=misPlanetas;  }   
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("r",48, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // r ::= LLAVE_A s LLAVE_B COMA r 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<Planetas> e = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("r",48, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("p",49, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("p",49, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // k ::= finalizacion DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setFinalizacion(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("k",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // o ::= produccion DOS_PUNTOS ENTERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setProduccion(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("o",36, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // n ::= mostrarEstadisticas DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("n",35, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("n",35, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // m ::= mostrarNaves DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("m",34, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // m ::= mostrarNaves DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("m",34, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // q8 ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // q8 ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // q8 ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l ::= 
            {
              MapaPNeutrales RESULT =null;
		RESULT=new MapaPNeutrales();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // l ::= COMA q8 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // l ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Mapa mapa = new Mapa(); if(a.getMostrarNaves()==null || a.getMostrarEstadisticas()==null || a.getProduccion() == null) {System.out.println("ERROR, falta de atributo");} else { mapa.setMapaPNeutral(a); RESULT=mapa; }     
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("j2",14, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // i ::= acumular DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("i",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // i ::= acumular DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("i",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // h ::= mapaCiego DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("h",12, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // h ::= mapaCiego DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("h",12, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // g ::= pNeutrales DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setPlanetasNeutrales(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("g",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // d ::= id DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  Mapa mapa = new Mapa(); mapa.setId(a.toString());  RESULT=mapa;                    /*if(parser.mapita.getId()==null){ parser.mapita.setId(a.toString());  } else { parser.interruptor = false; parser.syntax_error(parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT)); parser.totalErrores += "Atributo ID sentenciado mas de una vez dentro de MAPA\n";    }*/ 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // j ::= columnas DOS_PUNTOS ENTERO COMA filas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa;    
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("j",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // j ::= filas DOS_PUNTOS ENTERO COMA columnas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("j",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // f ::= alAzar DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // f ::= alAzar DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // e ::= size DOS_PUNTOS LLAVE_A j LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("e",9, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // q ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // q ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // q ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { System.out.println("error"); } } RESULT=e1; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // q ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null) { e.setPlanetasNeutrales(a.getPlanetasNeutrales());  } else { System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // q ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c ::= LLAVE_B 
            {
              Mapa RESULT =null;
		RESULT=new Mapa();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= COMA q 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { System.out.println("error"); } } RESULT=e1; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // c ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b ::= MAPA DOS_PUNTOS LLAVE_A c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // q2 ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // q2 ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // q2 ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { System.out.println("erroraaa"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // q2 ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // juego ::= 
            {
              Juego RESULT =null;
		 RESULT=new Juego(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // juego ::= COMA q2 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // juego ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // juego ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){e.setpNeutrales(a); System.out.println("agregox2"); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // juego ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a); System.out.println("agrego"); } else { System.out.println("erroasdfr"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // juego ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { System.out.println("errorzzzzzzz"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= LLAVE_A juego LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getMapa()==null || a.getJugadores()==null || a.getpNeutrales()==null || a.getPlanetas()==null){ System.out.println("Falta un archivo principal"); } else {  boolean interruptor = true;  interruptor = parser.verificadorNombresJugadores(a.getJugadores(), interruptor);  interruptor = parser.verificadorNombresPlanetas(interruptor, a.getPlanetas());  interruptor = parser.verificadorNombresPlanetasNeutrales(interruptor, a.getpNeutrales());  parser.misDatos = a;  parser.datosJuego.add(a);   parser.panelJuego.setVisible(true);   parser.creacionMapa(parser.datosJuego.get(0), interruptor, parser.panelMensajes, parser.totalErrores);               } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= a a2 
            {
              Object RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = start_val;
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxGuardarPartida$parser.done_parsing();
          return CUP$SintaxGuardarPartida$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

