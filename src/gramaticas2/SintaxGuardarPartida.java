
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 26 12:28:45 CST 2020
//----------------------------------------------------

package gramaticas2;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.DatosGuardados;
import Pollitos.NavesCamino;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;
import interfaz.VentanaPrincipal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 26 12:28:45 CST 2020
  */
public class SintaxGuardarPartida extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxGuardarPartida() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxGuardarPartida(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxGuardarPartida(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\002\000" +
    "\002\006\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\023" +
    "\007\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\002\000\002\011\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\013\007\000\002\014\005\000\002" +
    "\014\005\000\002\015\011\000\002\015\011\000\002\010" +
    "\007\000\002\012\005\000\002\016\005\000\002\016\005" +
    "\000\002\017\005\000\002\017\005\000\002\020\007\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\047\002\000\002\047\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\044\005\000\002\044\005\000\002\045\005\000" +
    "\002\045\005\000\002\046\005\000\002\022\005\000\002" +
    "\063\007\000\002\063\006\000\002\062\007\000\002\062" +
    "\005\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\002\000\002\025\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\024\007\000\002\027\005\000\002\030\005\000" +
    "\002\031\005\000\002\032\005\000\002\033\005\000\002" +
    "\065\007\000\002\065\006\000\002\064\007\000\002\064" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\002\000\002\036\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\040\007\000\002\041\005\000\002\042\005\000" +
    "\002\043\005\000\002\034\005\000\002\035\005\000\002" +
    "\066\007\000\002\066\006\000\002\067\007\000\002\067" +
    "\005\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\002\000\002\051\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\053\007\000\002\054\007\000\002\061\007\000" +
    "\002\061\006\000\002\061\002\000\002\055\007\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\057" +
    "\005\000\002\057\005\000\002\060\005\000\002\005\007" +
    "\000\002\105\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\004\000\002\105\002\000\002\105\004\000\002" +
    "\104\004\000\002\104\004\000\002\104\004\000\002\104" +
    "\004\000\002\103\005\000\002\106\005\000\002\110\006" +
    "\000\002\110\005\000\002\107\007\000\002\107\005\000" +
    "\002\101\004\000\002\101\004\000\002\101\004\000\002" +
    "\101\004\000\002\101\004\000\002\101\004\000\002\101" +
    "\004\000\002\101\004\000\002\101\004\000\002\101\004" +
    "\000\002\101\002\000\002\101\004\000\002\102\004\000" +
    "\002\102\004\000\002\102\004\000\002\102\004\000\002" +
    "\102\004\000\002\102\004\000\002\102\004\000\002\102" +
    "\004\000\002\102\004\000\002\102\004\000\002\070\005" +
    "\000\002\071\005\000\002\072\005\000\002\073\005\000" +
    "\002\074\005\000\002\075\005\000\002\076\005\000\002" +
    "\077\005\000\002\100\005\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c6\000\004\006\006\001\002\000\004\056\u015c\001" +
    "\002\000\004\002\u015a\001\002\000\020\003\016\007\ufff9" +
    "\013\010\016\014\032\007\036\011\037\020\001\002\000" +
    "\004\012\u011e\001\002\000\014\003\u0116\016\014\032\007" +
    "\036\011\037\020\001\002\000\004\012\327\001\002\000" +
    "\020\003\016\007\ufff9\013\010\016\014\032\007\036\011" +
    "\037\020\001\002\000\020\003\016\007\ufff9\013\010\016" +
    "\014\032\007\036\011\037\020\001\002\000\004\012\137" +
    "\001\002\000\004\007\136\001\002\000\020\003\016\007" +
    "\ufff9\013\010\016\014\032\007\036\011\037\020\001\002" +
    "\000\020\003\016\007\ufff9\013\010\016\014\032\007\036" +
    "\011\037\020\001\002\000\004\012\023\001\002\000\020" +
    "\003\016\007\ufff9\013\010\016\014\032\007\036\011\037" +
    "\020\001\002\000\004\007\ufffb\001\002\000\004\010\024" +
    "\001\002\000\006\006\027\011\026\001\002\000\004\011" +
    "\133\001\002\000\020\003\uff8c\007\uff8c\013\uff8c\016\uff8c" +
    "\032\uff8c\036\uff8c\037\uff8c\001\002\000\024\003\034\007" +
    "\uff82\013\031\033\045\040\036\041\042\052\032\064\041" +
    "\074\046\001\002\000\024\003\034\007\uff82\013\031\033" +
    "\045\040\036\041\042\052\032\064\041\074\046\001\002" +
    "\000\020\003\117\033\045\040\036\041\042\052\032\064" +
    "\041\074\046\001\002\000\004\012\107\001\002\000\024" +
    "\003\034\007\uff82\013\031\033\045\040\036\041\042\052" +
    "\032\064\041\074\046\001\002\000\024\003\034\007\uff82" +
    "\013\031\033\045\040\036\041\042\052\032\064\041\074" +
    "\046\001\002\000\024\003\034\007\uff82\013\031\033\045" +
    "\040\036\041\042\052\032\064\041\074\046\001\002\000" +
    "\004\012\072\001\002\000\024\003\034\007\uff82\013\031" +
    "\033\045\040\036\041\042\052\032\064\041\074\046\001" +
    "\002\000\024\003\034\007\uff82\013\031\033\045\040\036" +
    "\041\042\052\032\064\041\074\046\001\002\000\004\012" +
    "\066\001\002\000\004\012\062\001\002\000\024\003\034" +
    "\007\uff82\013\031\033\045\040\036\041\042\052\032\064" +
    "\041\074\046\001\002\000\004\007\056\001\002\000\004" +
    "\012\052\001\002\000\004\012\047\001\002\000\006\004" +
    "\051\005\050\001\002\000\024\003\uff6f\007\uff6f\013\uff6f" +
    "\033\uff6f\040\uff6f\041\uff6f\052\uff6f\064\uff6f\074\uff6f\001" +
    "\002\000\024\003\uff70\007\uff70\013\uff70\033\uff70\040\uff70" +
    "\041\uff70\052\uff70\064\uff70\074\uff70\001\002\000\004\015" +
    "\053\001\002\000\004\047\054\001\002\000\004\015\055" +
    "\001\002\000\024\003\uff79\007\uff79\013\uff79\033\uff79\040" +
    "\uff79\041\uff79\052\uff79\064\uff79\074\uff79\001\002\000\006" +
    "\011\uff8a\013\057\001\002\000\004\006\027\001\002\000" +
    "\004\011\uff8b\001\002\000\004\007\uff89\001\002\000\010" +
    "\042\063\043\064\044\065\001\002\000\024\003\uff71\007" +
    "\uff71\013\uff71\033\uff71\040\uff71\041\uff71\052\uff71\064\uff71" +
    "\074\uff71\001\002\000\024\003\uff72\007\uff72\013\uff72\033" +
    "\uff72\040\uff72\041\uff72\052\uff72\064\uff72\074\uff72\001\002" +
    "\000\024\003\uff73\007\uff73\013\uff73\033\uff73\040\uff73\041" +
    "\uff73\052\uff73\064\uff73\074\uff73\001\002\000\004\045\067" +
    "\001\002\000\024\003\uff6e\007\uff6e\013\uff6e\033\uff6e\040" +
    "\uff6e\041\uff6e\052\uff6e\064\uff6e\074\uff6e\001\002\000\004" +
    "\007\uff88\001\002\000\004\007\uff87\001\002\000\004\010" +
    "\073\001\002\000\006\011\uff75\015\075\001\002\000\004" +
    "\011\103\001\002\000\004\047\076\001\002\000\004\015" +
    "\077\001\002\000\010\011\uff75\013\100\015\075\001\002" +
    "\000\006\011\uff75\015\075\001\002\000\004\011\uff76\001" +
    "\002\000\004\011\uff77\001\002\000\024\003\uff78\007\uff78" +
    "\013\uff78\033\uff78\040\uff78\041\uff78\052\uff78\064\uff78\074" +
    "\uff78\001\002\000\004\007\uff85\001\002\000\004\007\uff81" +
    "\001\002\000\004\007\uff86\001\002\000\004\015\110\001" +
    "\002\000\004\055\111\001\002\000\004\015\112\001\002" +
    "\000\024\003\uff74\007\uff74\013\uff74\033\uff74\040\uff74\041" +
    "\uff74\052\uff74\064\uff74\074\uff74\001\002\000\024\003\034" +
    "\007\uff82\013\031\033\045\040\036\041\042\052\032\064" +
    "\041\074\046\001\002\000\004\007\uff83\001\002\000\024" +
    "\003\034\007\uff82\013\031\033\045\040\036\041\042\052" +
    "\032\064\041\074\046\001\002\000\024\003\034\007\uff82" +
    "\013\031\033\045\040\036\041\042\052\032\064\041\074" +
    "\046\001\002\000\024\003\034\007\uff82\013\031\033\045" +
    "\040\036\041\042\052\032\064\041\074\046\001\002\000" +
    "\024\003\034\007\uff82\013\031\033\045\040\036\041\042" +
    "\052\032\064\041\074\046\001\002\000\024\003\034\007" +
    "\uff82\013\031\033\045\040\036\041\042\052\032\064\041" +
    "\074\046\001\002\000\024\003\034\007\uff82\013\031\033" +
    "\045\040\036\041\042\052\032\064\041\074\046\001\002" +
    "\000\004\007\uff80\001\002\000\004\007\uff7f\001\002\000" +
    "\004\007\uff7e\001\002\000\004\007\uff7a\001\002\000\004" +
    "\007\uff7c\001\002\000\004\007\uff7d\001\002\000\004\007" +
    "\uff7b\001\002\000\004\007\uff84\001\002\000\020\003\uff8d" +
    "\007\uff8d\013\uff8d\016\uff8d\032\uff8d\036\uff8d\037\uff8d\001" +
    "\002\000\004\007\ufffe\001\002\000\004\007\ufff8\001\002" +
    "\000\004\056\uffff\001\002\000\004\006\140\001\002\000" +
    "\030\003\151\007\uffe8\013\144\017\147\020\146\021\143" +
    "\022\162\023\145\024\163\025\150\031\142\001\002\000" +
    "\030\003\151\007\uffe8\013\144\017\147\020\146\021\143" +
    "\022\162\023\145\024\163\025\150\031\142\001\002\000" +
    "\004\012\322\001\002\000\004\012\317\001\002\000\024" +
    "\003\276\017\147\020\146\021\143\022\162\023\145\024" +
    "\163\025\150\031\142\001\002\000\004\012\271\001\002" +
    "\000\004\012\247\001\002\000\004\012\243\001\002\000" +
    "\004\012\202\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\030\003\151\007\uffe8\013\144" +
    "\017\147\020\146\021\143\022\162\023\145\024\163\025" +
    "\150\031\142\001\002\000\004\007\171\001\002\000\004" +
    "\012\167\001\002\000\004\012\164\001\002\000\006\004" +
    "\166\005\165\001\002\000\030\003\uffd3\007\uffd3\013\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\031\uffd3\001\002\000\030\003\uffd4\007\uffd4\013\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\031\uffd4\001\002\000\004\045\170\001\002\000\030" +
    "\003\uffd7\007\uffd7\013\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7\001\002\000\020" +
    "\003\ufff2\007\ufff2\013\ufff2\016\ufff2\032\ufff2\036\ufff2\037" +
    "\ufff2\001\002\000\004\007\ufff1\001\002\000\004\007\uffef" +
    "\001\002\000\004\007\uffee\001\002\000\004\007\ufff0\001" +
    "\002\000\004\007\uffed\001\002\000\004\007\uffec\001\002" +
    "\000\004\007\uffea\001\002\000\004\007\uffe7\001\002\000" +
    "\004\006\203\001\002\000\016\003\214\007\uffcd\013\204" +
    "\026\212\027\205\030\213\001\002\000\012\003\233\026" +
    "\212\027\205\030\213\001\002\000\004\012\227\001\002" +
    "\000\016\003\214\007\uffcd\013\204\026\212\027\205\030" +
    "\213\001\002\000\016\003\214\007\uffcd\013\204\026\212" +
    "\027\205\030\213\001\002\000\016\003\214\007\uffcd\013" +
    "\204\026\212\027\205\030\213\001\002\000\004\007\223" +
    "\001\002\000\004\012\220\001\002\000\004\012\216\001" +
    "\002\000\016\003\214\007\uffcd\013\204\026\212\027\205" +
    "\030\213\001\002\000\004\007\uffcc\001\002\000\004\045" +
    "\217\001\002\000\016\003\uffc3\007\uffc3\013\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\001\002\000\006\004\222\005\221\001" +
    "\002\000\016\003\uffc6\007\uffc6\013\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\001\002\000\016\003\uffc7\007\uffc7\013\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\001\002\000\030\003\uffd2\007\uffd2" +
    "\013\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\031\uffd2\001\002\000\004\007\uffd1\001\002" +
    "\000\004\007\uffd0\001\002\000\004\007\uffcf\001\002\000" +
    "\006\004\231\005\230\001\002\000\016\003\uffc4\007\uffc4" +
    "\013\uffc4\026\uffc4\027\uffc4\030\uffc4\001\002\000\016\003" +
    "\uffc5\007\uffc5\013\uffc5\026\uffc5\027\uffc5\030\uffc5\001\002" +
    "\000\016\003\214\007\uffcd\013\204\026\212\027\205\030" +
    "\213\001\002\000\016\003\214\007\uffcd\013\204\026\212" +
    "\027\205\030\213\001\002\000\004\007\uffce\001\002\000" +
    "\016\003\214\007\uffcd\013\204\026\212\027\205\030\213" +
    "\001\002\000\016\003\214\007\uffcd\013\204\026\212\027" +
    "\205\030\213\001\002\000\004\007\uffca\001\002\000\004" +
    "\007\uffc9\001\002\000\004\007\uffc8\001\002\000\004\007" +
    "\uffcb\001\002\000\004\015\244\001\002\000\004\047\245" +
    "\001\002\000\004\015\246\001\002\000\030\003\uffd8\007" +
    "\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\031\uffd8\001\002\000\004\006\250\001" +
    "\002\000\006\050\253\051\252\001\002\000\004\007\270" +
    "\001\002\000\004\012\262\001\002\000\004\012\254\001" +
    "\002\000\004\045\255\001\002\000\004\013\256\001\002" +
    "\000\004\051\257\001\002\000\004\012\260\001\002\000" +
    "\004\045\261\001\002\000\004\007\uffda\001\002\000\004" +
    "\045\263\001\002\000\004\013\264\001\002\000\004\050" +
    "\265\001\002\000\004\012\266\001\002\000\004\045\267" +
    "\001\002\000\004\007\uffd9\001\002\000\030\003\uffdd\007" +
    "\uffdd\013\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\031\uffdd\001\002\000\006\004\273\005" +
    "\272\001\002\000\030\003\uffd5\007\uffd5\013\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\031" +
    "\uffd5\001\002\000\030\003\uffd6\007\uffd6\013\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\031" +
    "\uffd6\001\002\000\030\003\151\007\uffe8\013\144\017\147" +
    "\020\146\021\143\022\162\023\145\024\163\025\150\031" +
    "\142\001\002\000\004\007\uffe9\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\030\003\151" +
    "\007\uffe8\013\144\017\147\020\146\021\143\022\162\023" +
    "\145\024\163\025\150\031\142\001\002\000\004\007\uffe6" +
    "\001\002\000\004\007\uffe4\001\002\000\004\007\uffe3\001" +
    "\002\000\004\007\uffe5\001\002\000\004\007\uffe2\001\002" +
    "\000\004\007\uffe1\001\002\000\004\007\uffdf\001\002\000" +
    "\004\007\uffde\001\002\000\004\007\uffe0\001\002\000\006" +
    "\004\321\005\320\001\002\000\030\003\uffdb\007\uffdb\013" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\031\uffdb\001\002\000\030\003\uffdc\007\uffdc\013" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\031\uffdc\001\002\000\004\045\323\001\002\000" +
    "\030\003\uffc2\007\uffc2\013\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\031\uffc2\001\002\000" +
    "\004\007\uffeb\001\002\000\004\007\ufffc\001\002\000\004" +
    "\007\ufffd\001\002\000\004\010\330\001\002\000\006\006" +
    "\333\011\332\001\002\000\004\011\u0112\001\002\000\020" +
    "\003\uffa6\007\uffa6\013\uffa6\016\uffa6\032\uffa6\036\uffa6\037" +
    "\uffa6\001\002\000\024\003\345\007\uff9c\013\337\030\340" +
    "\033\347\034\343\035\350\053\336\054\334\001\002\000" +
    "\004\012\u0110\001\002\000\024\003\345\007\uff9c\013\337" +
    "\030\340\033\347\034\343\035\350\053\336\054\334\001" +
    "\002\000\004\012\u010d\001\002\000\020\003\u0103\030\340" +
    "\033\347\034\343\035\350\053\336\054\334\001\002\000" +
    "\004\012\374\001\002\000\024\003\345\007\uff9c\013\337" +
    "\030\340\033\347\034\343\035\350\053\336\054\334\001" +
    "\002\000\024\003\345\007\uff9c\013\337\030\340\033\347" +
    "\034\343\035\350\053\336\054\334\001\002\000\004\012" +
    "\370\001\002\000\024\003\345\007\uff9c\013\337\030\340" +
    "\033\347\034\343\035\350\053\336\054\334\001\002\000" +
    "\024\003\345\007\uff9c\013\337\030\340\033\347\034\343" +
    "\035\350\053\336\054\334\001\002\000\004\007\363\001" +
    "\002\000\004\012\357\001\002\000\004\012\355\001\002" +
    "\000\024\003\345\007\uff9c\013\337\030\340\033\347\034" +
    "\343\035\350\053\336\054\334\001\002\000\024\003\345" +
    "\007\uff9c\013\337\030\340\033\347\034\343\035\350\053" +
    "\336\054\334\001\002\000\004\007\uffa1\001\002\000\004" +
    "\007\uffa0\001\002\000\004\046\356\001\002\000\024\003" +
    "\uff90\007\uff90\013\uff90\030\uff90\033\uff90\034\uff90\035\uff90" +
    "\053\uff90\054\uff90\001\002\000\004\015\360\001\002\000" +
    "\004\047\361\001\002\000\004\015\362\001\002\000\024" +
    "\003\uff93\007\uff93\013\uff93\030\uff93\033\uff93\034\uff93\035" +
    "\uff93\053\uff93\054\uff93\001\002\000\006\011\uffa4\013\364" +
    "\001\002\000\004\006\333\001\002\000\004\011\uffa5\001" +
    "\002\000\004\007\uff9b\001\002\000\004\007\uffa3\001\002" +
    "\000\004\045\371\001\002\000\024\003\uff92\007\uff92\013" +
    "\uff92\030\uff92\033\uff92\034\uff92\035\uff92\053\uff92\054\uff92" +
    "\001\002\000\004\007\uff9f\001\002\000\004\007\uff9e\001" +
    "\002\000\004\045\375\001\002\000\024\003\uff91\007\uff91" +
    "\013\uff91\030\uff91\033\uff91\034\uff91\035\uff91\053\uff91\054" +
    "\uff91\001\002\000\024\003\345\007\uff9c\013\337\030\340" +
    "\033\347\034\343\035\350\053\336\054\334\001\002\000" +
    "\004\007\uff9d\001\002\000\024\003\345\007\uff9c\013\337" +
    "\030\340\033\347\034\343\035\350\053\336\054\334\001" +
    "\002\000\024\003\345\007\uff9c\013\337\030\340\033\347" +
    "\034\343\035\350\053\336\054\334\001\002\000\024\003" +
    "\345\007\uff9c\013\337\030\340\033\347\034\343\035\350" +
    "\053\336\054\334\001\002\000\024\003\345\007\uff9c\013" +
    "\337\030\340\033\347\034\343\035\350\053\336\054\334" +
    "\001\002\000\024\003\345\007\uff9c\013\337\030\340\033" +
    "\347\034\343\035\350\053\336\054\334\001\002\000\024" +
    "\003\345\007\uff9c\013\337\030\340\033\347\034\343\035" +
    "\350\053\336\054\334\001\002\000\004\007\uff98\001\002" +
    "\000\004\007\uff97\001\002\000\004\007\uff94\001\002\000" +
    "\004\007\uff9a\001\002\000\004\007\uff96\001\002\000\004" +
    "\007\uff95\001\002\000\004\007\uff99\001\002\000\004\045" +
    "\u010e\001\002\000\024\003\uff8f\007\uff8f\013\uff8f\030\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\053\uff8f\054\uff8f\001\002\000" +
    "\004\007\uffa2\001\002\000\004\045\u0111\001\002\000\024" +
    "\003\uff8e\007\uff8e\013\uff8e\030\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\053\uff8e\054\uff8e\001\002\000\020\003\uffa7\007\uffa7" +
    "\013\uffa7\016\uffa7\032\uffa7\036\uffa7\037\uffa7\001\002\000" +
    "\020\003\016\007\ufff9\013\010\016\014\032\007\036\011" +
    "\037\020\001\002\000\020\003\016\007\ufff9\013\010\016" +
    "\014\032\007\036\011\037\020\001\002\000\004\007\ufffa" +
    "\001\002\000\020\003\016\007\ufff9\013\010\016\014\032" +
    "\007\036\011\037\020\001\002\000\020\003\016\007\ufff9" +
    "\013\010\016\014\032\007\036\011\037\020\001\002\000" +
    "\020\003\016\007\ufff9\013\010\016\014\032\007\036\011" +
    "\037\020\001\002\000\004\007\ufff4\001\002\000\004\007" +
    "\ufff7\001\002\000\004\007\ufff3\001\002\000\004\007\ufff5" +
    "\001\002\000\004\007\ufff6\001\002\000\004\010\u011f\001" +
    "\002\000\006\006\u0122\011\u0121\001\002\000\004\011\u0159" +
    "\001\002\000\020\003\uffc0\007\uffc0\013\uffc0\016\uffc0\032" +
    "\uffc0\036\uffc0\037\uffc0\001\002\000\024\003\u012a\007\uffb6" +
    "\013\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053\u0124\054" +
    "\u0123\001\002\000\004\012\u0157\001\002\000\004\012\u0155" +
    "\001\002\000\020\003\u0149\030\u0126\033\u012e\034\u0129\035" +
    "\u012f\053\u0124\054\u0123\001\002\000\004\012\u0144\001\002" +
    "\000\024\003\u012a\007\uffb6\013\u0125\030\u0126\033\u012e\034" +
    "\u0129\035\u012f\053\u0124\054\u0123\001\002\000\024\003\u012a" +
    "\007\uffb6\013\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053" +
    "\u0124\054\u0123\001\002\000\004\012\u0140\001\002\000\024" +
    "\003\u012a\007\uffb6\013\u0125\030\u0126\033\u012e\034\u0129\035" +
    "\u012f\053\u0124\054\u0123\001\002\000\024\003\u012a\007\uffb6" +
    "\013\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053\u0124\054" +
    "\u0123\001\002\000\024\003\u012a\007\uffb6\013\u0125\030\u0126" +
    "\033\u012e\034\u0129\035\u012f\053\u0124\054\u0123\001\002\000" +
    "\024\003\u012a\007\uffb6\013\u0125\030\u0126\033\u012e\034\u0129" +
    "\035\u012f\053\u0124\054\u0123\001\002\000\004\012\u0138\001" +
    "\002\000\004\012\u0136\001\002\000\024\003\u012a\007\uffb6" +
    "\013\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053\u0124\054" +
    "\u0123\001\002\000\004\007\u0132\001\002\000\006\011\uffbe" +
    "\013\u0133\001\002\000\004\006\u0122\001\002\000\004\011" +
    "\uffbf\001\002\000\004\007\uffbd\001\002\000\004\046\u0137" +
    "\001\002\000\024\003\uffaa\007\uffaa\013\uffaa\030\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\053\uffaa\054\uffaa\001\002\000\004" +
    "\015\u0139\001\002\000\004\047\u013a\001\002\000\004\015" +
    "\u013b\001\002\000\024\003\uffad\007\uffad\013\uffad\030\uffad" +
    "\033\uffad\034\uffad\035\uffad\053\uffad\054\uffad\001\002\000" +
    "\004\007\uffbc\001\002\000\004\007\uffbb\001\002\000\004" +
    "\007\uffba\001\002\000\004\007\uffb5\001\002\000\004\045" +
    "\u0141\001\002\000\024\003\uffac\007\uffac\013\uffac\030\uffac" +
    "\033\uffac\034\uffac\035\uffac\053\uffac\054\uffac\001\002\000" +
    "\004\007\uffb9\001\002\000\004\007\uffb8\001\002\000\004" +
    "\045\u0145\001\002\000\024\003\uffab\007\uffab\013\uffab\030" +
    "\uffab\033\uffab\034\uffab\035\uffab\053\uffab\054\uffab\001\002" +
    "\000\004\007\uffb7\001\002\000\024\003\u012a\007\uffb6\013" +
    "\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053\u0124\054\u0123" +
    "\001\002\000\024\003\u012a\007\uffb6\013\u0125\030\u0126\033" +
    "\u012e\034\u0129\035\u012f\053\u0124\054\u0123\001\002\000\024" +
    "\003\u012a\007\uffb6\013\u0125\030\u0126\033\u012e\034\u0129\035" +
    "\u012f\053\u0124\054\u0123\001\002\000\024\003\u012a\007\uffb6" +
    "\013\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053\u0124\054" +
    "\u0123\001\002\000\024\003\u012a\007\uffb6\013\u0125\030\u0126" +
    "\033\u012e\034\u0129\035\u012f\053\u0124\054\u0123\001\002\000" +
    "\024\003\u012a\007\uffb6\013\u0125\030\u0126\033\u012e\034\u0129" +
    "\035\u012f\053\u0124\054\u0123\001\002\000\024\003\u012a\007" +
    "\uffb6\013\u0125\030\u0126\033\u012e\034\u0129\035\u012f\053\u0124" +
    "\054\u0123\001\002\000\004\007\uffb4\001\002\000\004\007" +
    "\uffb3\001\002\000\004\007\uffb2\001\002\000\004\007\uffb1" +
    "\001\002\000\004\007\uffae\001\002\000\004\007\uffb0\001" +
    "\002\000\004\007\uffaf\001\002\000\004\045\u0156\001\002" +
    "\000\024\003\uffa9\007\uffa9\013\uffa9\030\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\053\uffa9\054\uffa9\001\002\000\004\045\u0158" +
    "\001\002\000\024\003\uffa8\007\uffa8\013\uffa8\030\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\053\uffa8\054\uffa8\001\002\000\020" +
    "\003\uffc1\007\uffc1\013\uffc1\016\uffc1\032\uffc1\036\uffc1\037" +
    "\uffc1\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002\000\004\012\u015d\001\002\000\004\010\u015e\001" +
    "\002\000\016\003\u0165\011\uff68\013\u0161\057\u015f\060\u0166" +
    "\065\u0162\001\002\000\004\012\u01c7\001\002\000\004\011" +
    "\u01c6\001\002\000\012\003\u01be\057\u015f\060\u0166\065\u0162" +
    "\001\002\000\004\012\u01bb\001\002\000\016\003\u0165\011" +
    "\uff68\013\u0161\057\u015f\060\u0166\065\u0162\001\002\000\016" +
    "\003\u0165\011\uff68\013\u0161\057\u015f\060\u0166\065\u0162\001" +
    "\002\000\016\003\u0165\011\uff68\013\u0161\057\u015f\060\u0166" +
    "\065\u0162\001\002\000\004\010\u0169\001\002\000\016\003" +
    "\u0165\011\uff68\013\u0161\057\u015f\060\u0166\065\u0162\001\002" +
    "\000\004\011\uff6b\001\002\000\006\006\u016c\011\u016b\001" +
    "\002\000\004\011\u01b7\001\002\000\016\003\uff5f\011\uff5f" +
    "\013\uff5f\057\uff5f\060\uff5f\065\uff5f\001\002\000\032\003" +
    "\u017f\007\uff52\013\u017c\035\u017b\061\u0175\062\u0181\063\u017d" +
    "\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e\001\002\000" +
    "\032\003\u017f\007\uff52\013\u017c\035\u017b\061\u0175\062\u0181" +
    "\063\u017d\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e\001" +
    "\002\000\004\012\u01b4\001\002\000\004\012\u01b2\001\002" +
    "\000\032\003\u017f\007\uff52\013\u017c\035\u017b\061\u0175\062" +
    "\u0181\063\u017d\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e" +
    "\001\002\000\032\003\u017f\007\uff52\013\u017c\035\u017b\061" +
    "\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a\071\u016e" +
    "\072\u017e\001\002\000\032\003\u017f\007\uff52\013\u017c\035" +
    "\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a" +
    "\071\u016e\072\u017e\001\002\000\032\003\u017f\007\uff52\013" +
    "\u017c\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f" +
    "\070\u017a\071\u016e\072\u017e\001\002\000\032\003\u017f\007" +
    "\uff52\013\u017c\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180" +
    "\067\u016f\070\u017a\071\u016e\072\u017e\001\002\000\004\012" +
    "\u01ab\001\002\000\032\003\u017f\007\uff52\013\u017c\035\u017b" +
    "\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a\071" +
    "\u016e\072\u017e\001\002\000\032\003\u017f\007\uff52\013\u017c" +
    "\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070" +
    "\u017a\071\u016e\072\u017e\001\002\000\032\003\u017f\007\uff52" +
    "\013\u017c\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067" +
    "\u016f\070\u017a\071\u016e\072\u017e\001\002\000\004\007\u01a5" +
    "\001\002\000\004\012\u01a3\001\002\000\004\012\u01a1\001" +
    "\002\000\026\003\u0195\035\u017b\061\u0175\062\u0181\063\u017d" +
    "\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e\001\002\000" +
    "\004\012\u018a\001\002\000\004\012\u0187\001\002\000\032" +
    "\003\u017f\007\uff52\013\u017c\035\u017b\061\u0175\062\u0181\063" +
    "\u017d\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e\001\002" +
    "\000\004\012\u0184\001\002\000\004\012\u0182\001\002\000" +
    "\004\047\u0183\001\002\000\032\003\uff45\007\uff45\013\uff45" +
    "\035\uff45\061\uff45\062\uff45\063\uff45\066\uff45\067\uff45\070" +
    "\uff45\071\uff45\072\uff45\001\002\000\004\045\u0185\001\002" +
    "\000\032\003\uff43\007\uff43\013\uff43\035\uff43\061\uff43\062" +
    "\uff43\063\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43" +
    "\001\002\000\004\007\uff51\001\002\000\006\004\u0189\005" +
    "\u0188\001\002\000\032\003\uff3d\007\uff3d\013\uff3d\035\uff3d" +
    "\061\uff3d\062\uff3d\063\uff3d\066\uff3d\067\uff3d\070\uff3d\071" +
    "\uff3d\072\uff3d\001\002\000\032\003\uff3e\007\uff3e\013\uff3e" +
    "\035\uff3e\061\uff3e\062\uff3e\063\uff3e\066\uff3e\067\uff3e\070" +
    "\uff3e\071\uff3e\072\uff3e\001\002\000\004\047\u018b\001\002" +
    "\000\032\003\uff44\007\uff44\013\uff44\035\uff44\061\uff44\062" +
    "\uff44\063\uff44\066\uff44\067\uff44\070\uff44\071\uff44\072\uff44" +
    "\001\002\000\032\003\u017f\007\uff52\013\u017c\035\u017b\061" +
    "\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a\071\u016e" +
    "\072\u017e\001\002\000\032\003\u017f\007\uff52\013\u017c\035" +
    "\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a" +
    "\071\u016e\072\u017e\001\002\000\032\003\u017f\007\uff52\013" +
    "\u017c\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f" +
    "\070\u017a\071\u016e\072\u017e\001\002\000\032\003\u017f\007" +
    "\uff52\013\u017c\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180" +
    "\067\u016f\070\u017a\071\u016e\072\u017e\001\002\000\032\003" +
    "\u017f\007\uff52\013\u017c\035\u017b\061\u0175\062\u0181\063\u017d" +
    "\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e\001\002\000" +
    "\032\003\u017f\007\uff52\013\u017c\035\u017b\061\u0175\062\u0181" +
    "\063\u017d\066\u0180\067\u016f\070\u017a\071\u016e\072\u017e\001" +
    "\002\000\032\003\u017f\007\uff52\013\u017c\035\u017b\061\u0175" +
    "\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a\071\u016e\072" +
    "\u017e\001\002\000\032\003\u017f\007\uff52\013\u017c\035\u017b" +
    "\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070\u017a\071" +
    "\u016e\072\u017e\001\002\000\032\003\u017f\007\uff52\013\u017c" +
    "\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067\u016f\070" +
    "\u017a\071\u016e\072\u017e\001\002\000\032\003\u017f\007\uff52" +
    "\013\u017c\035\u017b\061\u0175\062\u0181\063\u017d\066\u0180\067" +
    "\u016f\070\u017a\071\u016e\072\u017e\001\002\000\004\007\uff53" +
    "\001\002\000\004\007\uff47\001\002\000\004\007\uff50\001" +
    "\002\000\004\007\uff4f\001\002\000\004\007\uff4e\001\002" +
    "\000\004\007\uff4d\001\002\000\004\007\uff4c\001\002\000" +
    "\004\007\uff4b\001\002\000\004\007\uff4a\001\002\000\004" +
    "\007\uff49\001\002\000\004\007\uff48\001\002\000\004\046" +
    "\u01a2\001\002\000\032\003\uff42\007\uff42\013\uff42\035\uff42" +
    "\061\uff42\062\uff42\063\uff42\066\uff42\067\uff42\070\uff42\071" +
    "\uff42\072\uff42\001\002\000\004\045\u01a4\001\002\000\032" +
    "\003\uff40\007\uff40\013\uff40\035\uff40\061\uff40\062\uff40\063" +
    "\uff40\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40\001\002" +
    "\000\006\011\uff5d\013\u01a6\001\002\000\004\006\u016c\001" +
    "\002\000\004\011\uff5e\001\002\000\004\007\uff5c\001\002" +
    "\000\004\007\uff5b\001\002\000\004\007\uff5a\001\002\000" +
    "\004\045\u01ac\001\002\000\032\003\uff46\007\uff46\013\uff46" +
    "\035\uff46\061\uff46\062\uff46\063\uff46\066\uff46\067\uff46\070" +
    "\uff46\071\uff46\072\uff46\001\002\000\004\007\uff59\001\002" +
    "\000\004\007\uff58\001\002\000\004\007\uff57\001\002\000" +
    "\004\007\uff56\001\002\000\004\007\uff55\001\002\000\004" +
    "\045\u01b3\001\002\000\032\003\uff41\007\uff41\013\uff41\035" +
    "\uff41\061\uff41\062\uff41\063\uff41\066\uff41\067\uff41\070\uff41" +
    "\071\uff41\072\uff41\001\002\000\004\045\u01b5\001\002\000" +
    "\032\003\uff3f\007\uff3f\013\uff3f\035\uff3f\061\uff3f\062\uff3f" +
    "\063\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\001" +
    "\002\000\004\007\uff54\001\002\000\016\003\uff60\011\uff60" +
    "\013\uff60\057\uff60\060\uff60\065\uff60\001\002\000\004\011" +
    "\uff67\001\002\000\004\011\uff6c\001\002\000\004\011\uff6a" +
    "\001\002\000\004\045\u01bc\001\002\000\016\003\uff61\011" +
    "\uff61\013\uff61\057\uff61\060\uff61\065\uff61\001\002\000\004" +
    "\011\uff69\001\002\000\016\003\u0165\011\uff68\013\u0161\057" +
    "\u015f\060\u0166\065\u0162\001\002\000\016\003\u0165\011\uff68" +
    "\013\u0161\057\u015f\060\u0166\065\u0162\001\002\000\016\003" +
    "\u0165\011\uff68\013\u0161\057\u015f\060\u0166\065\u0162\001\002" +
    "\000\016\003\u0165\011\uff68\013\u0161\057\u015f\060\u0166\065" +
    "\u0162\001\002\000\004\011\uff66\001\002\000\004\011\uff64" +
    "\001\002\000\004\011\uff65\001\002\000\004\011\uff63\001" +
    "\002\000\004\002\uff6d\001\002\000\004\045\u01c8\001\002" +
    "\000\016\003\uff62\011\uff62\013\uff62\057\uff62\060\uff62\065" +
    "\uff62\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c6\000\006\002\004\003\003\001\001\000\004\005" +
    "\u015a\001\001\000\002\001\001\000\014\006\014\023\016" +
    "\063\011\065\012\066\020\001\001\000\002\001\001\000" +
    "\014\007\u0114\023\u0116\063\u0112\065\u0113\066\u0117\001\001" +
    "\000\002\001\001\000\014\006\325\023\016\063\011\065" +
    "\012\066\020\001\001\000\014\006\324\023\016\063\011" +
    "\065\012\066\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\134\023\016\063\011\065\012\066\020" +
    "\001\001\000\014\006\133\023\016\063\011\065\012\066" +
    "\020\001\001\000\002\001\001\000\014\006\021\023\016" +
    "\063\011\065\012\066\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\051\043\053\042\054\037\055" +
    "\032\056\036\057\034\060\027\001\001\000\020\051\131" +
    "\053\042\054\037\055\032\056\036\057\034\060\027\001" +
    "\001\000\020\052\113\053\121\054\120\055\114\056\117" +
    "\057\115\060\112\001\001\000\002\001\001\000\020\051" +
    "\105\053\042\054\037\055\032\056\036\057\034\060\027" +
    "\001\001\000\020\051\104\053\042\054\037\055\032\056" +
    "\036\057\034\060\027\001\001\000\020\051\103\053\042" +
    "\054\037\055\032\056\036\057\034\060\027\001\001\000" +
    "\002\001\001\000\020\051\070\053\042\054\037\055\032" +
    "\056\036\057\034\060\027\001\001\000\020\051\067\053" +
    "\042\054\037\055\032\056\036\057\034\060\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\051\060\053" +
    "\042\054\037\055\032\056\036\057\034\060\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\100\001" +
    "\001\000\004\061\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\051\130\053" +
    "\042\054\037\055\032\056\036\057\034\060\027\001\001" +
    "\000\002\001\001\000\020\051\127\053\042\054\037\055" +
    "\032\056\036\057\034\060\027\001\001\000\020\051\126" +
    "\053\042\054\037\055\032\056\036\057\034\060\027\001" +
    "\001\000\020\051\125\053\042\054\037\055\032\056\036" +
    "\057\034\060\027\001\001\000\020\051\124\053\042\054" +
    "\037\055\032\056\036\057\034\060\027\001\001\000\020" +
    "\051\123\053\042\054\037\055\032\056\036\057\034\060" +
    "\027\001\001\000\020\051\122\053\042\054\037\055\032" +
    "\056\036\057\034\060\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\157\011" +
    "\160\012\154\013\156\014\155\016\153\017\152\020\140" +
    "\022\151\001\001\000\024\010\157\011\323\012\154\013" +
    "\156\014\155\016\153\017\152\020\140\022\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\304\012" +
    "\301\013\303\014\302\016\300\017\277\020\273\021\274" +
    "\022\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\157\011\200" +
    "\012\154\013\156\014\155\016\153\017\152\020\140\022" +
    "\151\001\001\000\024\010\157\011\177\012\154\013\156" +
    "\014\155\016\153\017\152\020\140\022\151\001\001\000" +
    "\024\010\157\011\176\012\154\013\156\014\155\016\153" +
    "\017\152\020\140\022\151\001\001\000\024\010\157\011" +
    "\175\012\154\013\156\014\155\016\153\017\152\020\140" +
    "\022\151\001\001\000\024\010\157\011\174\012\154\013" +
    "\156\014\155\016\153\017\152\020\140\022\151\001\001" +
    "\000\024\010\157\011\173\012\154\013\156\014\155\016" +
    "\153\017\152\020\140\022\151\001\001\000\024\010\157" +
    "\011\172\012\154\013\156\014\155\016\153\017\152\020" +
    "\140\022\151\001\001\000\024\010\157\011\171\012\154" +
    "\013\156\014\155\016\153\017\152\020\140\022\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\044\207\045" +
    "\206\046\205\047\210\001\001\000\012\044\231\045\235" +
    "\046\234\050\233\001\001\000\002\001\001\000\012\044" +
    "\207\045\206\046\205\047\225\001\001\000\012\044\207" +
    "\045\206\046\205\047\224\001\001\000\012\044\207\045" +
    "\206\046\205\047\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\207\045\206\046" +
    "\205\047\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\044\207\045\206\046\205" +
    "\047\241\001\001\000\012\044\207\045\206\046\205\047" +
    "\240\001\001\000\002\001\001\000\012\044\207\045\206" +
    "\046\205\047\237\001\001\000\012\044\207\045\206\046" +
    "\205\047\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\157\011\315\012" +
    "\154\013\156\014\155\016\153\017\152\020\140\022\151" +
    "\001\001\000\002\001\001\000\024\010\157\011\314\012" +
    "\154\013\156\014\155\016\153\017\152\020\140\022\151" +
    "\001\001\000\024\010\157\011\313\012\154\013\156\014" +
    "\155\016\153\017\152\020\140\022\151\001\001\000\024" +
    "\010\157\011\312\012\154\013\156\014\155\016\153\017" +
    "\152\020\140\022\151\001\001\000\024\010\157\011\311" +
    "\012\154\013\156\014\155\016\153\017\152\020\140\022" +
    "\151\001\001\000\024\010\157\011\310\012\154\013\156" +
    "\014\155\016\153\017\152\020\140\022\151\001\001\000" +
    "\024\010\157\011\307\012\154\013\156\014\155\016\153" +
    "\017\152\020\140\022\151\001\001\000\024\010\157\011" +
    "\306\012\154\013\156\014\155\016\153\017\152\020\140" +
    "\022\151\001\001\000\024\010\157\011\305\012\154\013" +
    "\156\014\155\016\153\017\152\020\140\022\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\034\341\035" +
    "\340\036\345\040\343\041\334\042\351\043\350\001\001" +
    "\000\002\001\001\000\020\034\341\035\340\036\u010e\040" +
    "\343\041\334\042\351\043\350\001\001\000\002\001\001" +
    "\000\020\034\u0100\035\377\037\376\040\u0101\041\375\042" +
    "\u0104\043\u0103\001\001\000\002\001\001\000\020\034\341" +
    "\035\340\036\372\040\343\041\334\042\351\043\350\001" +
    "\001\000\020\034\341\035\340\036\371\040\343\041\334" +
    "\042\351\043\350\001\001\000\002\001\001\000\020\034" +
    "\341\035\340\036\366\040\343\041\334\042\351\043\350" +
    "\001\001\000\020\034\341\035\340\036\365\040\343\041" +
    "\334\042\351\043\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\034\341\035\340\036" +
    "\353\040\343\041\334\042\351\043\350\001\001\000\020" +
    "\034\341\035\340\036\352\040\343\041\334\042\351\043" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\034\341\035\340\036\u010b\040\343" +
    "\041\334\042\351\043\350\001\001\000\002\001\001\000" +
    "\020\034\341\035\340\036\u010a\040\343\041\334\042\351" +
    "\043\350\001\001\000\020\034\341\035\340\036\u0109\040" +
    "\343\041\334\042\351\043\350\001\001\000\020\034\341" +
    "\035\340\036\u0108\040\343\041\334\042\351\043\350\001" +
    "\001\000\020\034\341\035\340\036\u0107\040\343\041\334" +
    "\042\351\043\350\001\001\000\020\034\341\035\340\036" +
    "\u0106\040\343\041\334\042\351\043\350\001\001\000\020" +
    "\034\341\035\340\036\u0105\040\343\041\334\042\351\043" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\u011c\023\016\063\011\065\012" +
    "\066\020\001\001\000\014\006\u011b\023\016\063\011\065" +
    "\012\066\020\001\001\000\002\001\001\000\014\006\u011a" +
    "\023\016\063\011\065\012\066\020\001\001\000\014\006" +
    "\u0119\023\016\063\011\065\012\066\020\001\001\000\014" +
    "\006\u0118\023\016\063\011\065\012\066\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\u012f\025\u0130\027\u012c\030\u012b\031\u012a\032\u0127\033" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\u014c\026\u0145\027\u014b\030\u014a\031\u0149\032\u0147\033" +
    "\u0146\001\001\000\002\001\001\000\020\024\u012f\025\u0142" +
    "\027\u012c\030\u012b\031\u012a\032\u0127\033\u0126\001\001\000" +
    "\020\024\u012f\025\u0141\027\u012c\030\u012b\031\u012a\032\u0127" +
    "\033\u0126\001\001\000\002\001\001\000\020\024\u012f\025" +
    "\u013e\027\u012c\030\u012b\031\u012a\032\u0127\033\u0126\001\001" +
    "\000\020\024\u012f\025\u013d\027\u012c\030\u012b\031\u012a\032" +
    "\u0127\033\u0126\001\001\000\020\024\u012f\025\u013c\027\u012c" +
    "\030\u012b\031\u012a\032\u0127\033\u0126\001\001\000\020\024" +
    "\u012f\025\u013b\027\u012c\030\u012b\031\u012a\032\u0127\033\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\024" +
    "\u012f\025\u0134\027\u012c\030\u012b\031\u012a\032\u0127\033\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\u012f\025\u0153\027\u012c\030\u012b\031\u012a" +
    "\032\u0127\033\u0126\001\001\000\020\024\u012f\025\u0152\027" +
    "\u012c\030\u012b\031\u012a\032\u0127\033\u0126\001\001\000\020" +
    "\024\u012f\025\u0151\027\u012c\030\u012b\031\u012a\032\u0127\033" +
    "\u0126\001\001\000\020\024\u012f\025\u0150\027\u012c\030\u012b" +
    "\031\u012a\032\u0127\033\u0126\001\001\000\020\024\u012f\025" +
    "\u014f\027\u012c\030\u012b\031\u012a\032\u0127\033\u0126\001\001" +
    "\000\020\024\u012f\025\u014e\027\u012c\030\u012b\031\u012a\032" +
    "\u0127\033\u0126\001\001\000\020\024\u012f\025\u014d\027\u012c" +
    "\030\u012b\031\u012a\032\u0127\033\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\103\u0163" +
    "\105\u015f\106\u0166\110\u0162\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\103\u01c0\104\u01bc\106\u01be\110\u01bf" +
    "\001\001\000\002\001\001\000\012\103\u0163\105\u01b9\106" +
    "\u0166\110\u0162\001\001\000\012\103\u0163\105\u01b8\106\u0166" +
    "\110\u0162\001\001\000\012\103\u0163\105\u01b7\106\u0166\110" +
    "\u0162\001\001\000\002\001\001\000\012\103\u0163\105\u0167" +
    "\106\u0166\110\u0162\001\001\000\002\001\001\000\004\107" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076" +
    "\u0170\077\u016f\100\u016c\101\u0178\001\001\000\026\070\u0177" +
    "\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077" +
    "\u016f\100\u016c\101\u01b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\070\u0177\071\u0176\072\u0175\073\u0173\074" +
    "\u0172\075\u0171\076\u0170\077\u016f\100\u016c\101\u01b0\001\001" +
    "\000\026\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075" +
    "\u0171\076\u0170\077\u016f\100\u016c\101\u01af\001\001\000\026" +
    "\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076" +
    "\u0170\077\u016f\100\u016c\101\u01ae\001\001\000\026\070\u0177" +
    "\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077" +
    "\u016f\100\u016c\101\u01ad\001\001\000\026\070\u0177\071\u0176" +
    "\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077\u016f\100" +
    "\u016c\101\u01ac\001\001\000\002\001\001\000\026\070\u0177" +
    "\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077" +
    "\u016f\100\u016c\101\u01a9\001\001\000\026\070\u0177\071\u0176" +
    "\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077\u016f\100" +
    "\u016c\101\u01a8\001\001\000\026\070\u0177\071\u0176\072\u0175" +
    "\073\u0173\074\u0172\075\u0171\076\u0170\077\u016f\100\u016c\101" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\070\u0193\071\u0192\072\u0191\073\u0190\074" +
    "\u018f\075\u018e\076\u018d\077\u018c\100\u018b\102\u0195\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\070\u0177\071" +
    "\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077\u016f" +
    "\100\u016c\101\u0185\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\070\u0177\071\u0176\072\u0175\073\u0173\074" +
    "\u0172\075\u0171\076\u0170\077\u016f\100\u016c\101\u019f\001\001" +
    "\000\026\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075" +
    "\u0171\076\u0170\077\u016f\100\u016c\101\u019e\001\001\000\026" +
    "\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076" +
    "\u0170\077\u016f\100\u016c\101\u019d\001\001\000\026\070\u0177" +
    "\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077" +
    "\u016f\100\u016c\101\u019c\001\001\000\026\070\u0177\071\u0176" +
    "\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170\077\u016f\100" +
    "\u016c\101\u019b\001\001\000\026\070\u0177\071\u0176\072\u0175" +
    "\073\u0173\074\u0172\075\u0171\076\u0170\077\u016f\100\u016c\101" +
    "\u019a\001\001\000\026\070\u0177\071\u0176\072\u0175\073\u0173" +
    "\074\u0172\075\u0171\076\u0170\077\u016f\100\u016c\101\u0199\001" +
    "\001\000\026\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172" +
    "\075\u0171\076\u0170\077\u016f\100\u016c\101\u0198\001\001\000" +
    "\026\070\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171" +
    "\076\u0170\077\u016f\100\u016c\101\u0197\001\001\000\026\070" +
    "\u0177\071\u0176\072\u0175\073\u0173\074\u0172\075\u0171\076\u0170" +
    "\077\u016f\100\u016c\101\u0196\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\103\u0163\105\u01c4\106\u0166\110\u0162\001\001" +
    "\000\012\103\u0163\105\u01c3\106\u0166\110\u0162\001\001\000" +
    "\012\103\u0163\105\u01c2\106\u0166\110\u0162\001\001\000\012" +
    "\103\u0163\105\u01c1\106\u0166\110\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxGuardarPartida$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxGuardarPartida$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxGuardarPartida$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public static String totalErrores2;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;

    public SintaxGuardarPartida(AnalizadorLexico2 lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas){
        super(lex);
        this.tablero = tablero;
        this.btnDistancia = btnDistancia;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnFlotas = btnFlotas;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }

    public void crearCuadriculaJuego(Juego misDatos){
        tablero.creacionCuadricula(misDatos, txtNaves, contador, navesCamino, btnTurno, btnDistancia, btnFlotas);
    }

    public boolean verificadorNombresJugadores(ArrayList<Jugadores> listJugadores, boolean verificador){
        if(verificador == true){
            for(int i = 0; i < listJugadores.size(); i++){
                String jugador1 = listJugadores.get(i).getNombre();
                    if(jugador1.length() > 10){
                        System.out.println("exceso de letras");
                        verificador = false;
                        break;
                    }
                
                for(int j = i+1; j < listJugadores.size()+1; j++){
                        if(j!=listJugadores.size()){
                        String jugador2 = listJugadores.get(j).getNombre();
                        if(jugador1.equals(jugador2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        } 
        return verificador;
    }


    public boolean verificadorNombresPlanetas(boolean verificador, ArrayList<Planetas> listPlanetas){
        if(verificador == true){
            for(int i = 0; i < listPlanetas.size(); i++){
                String nombrePlaneta = listPlanetas.get(i).getNombre();
                if(nombrePlaneta.length() > 3){
                    System.out.println("exceso de letras");
                    verificador = false;
                    break;
                } else {
                    for(int j = i+1; j < listPlanetas.size()+1; j++){
                        if(j!=listPlanetas.size()){
                            String nombrePlaneta2 = listPlanetas.get(j).getNombre();
                            if(nombrePlaneta.equals(nombrePlaneta2)){
                                System.out.println("Dos nombres son iguales");
                                verificador = false;
                                break;
                            }
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public boolean verificadorNombresPlanetasNeutrales(boolean verificador, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
            for(int i = 0; i < listNeutrales.size(); i ++){
                String neutral1 = listNeutrales.get(i).getNombre();
                if(neutral1.length() > 3 ){
                    System.out.println("exceso de letras"); 
                    verificador = false;
                    break;
                }   
                for(int j = i+1; j < listNeutrales.size()+1; j++){
                    if(j!=listNeutrales.size()){
                        String neutral2 = listNeutrales.get(j).getNombre();
                        if(neutral1.equals(neutral2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public void creacionMapa(Juego misDatos, boolean verificador, JTextArea panelMensajes, String totalErroress){
        if(verificador == true){
            tablero.agregarPlanetasTablero(Integer.parseInt(misDatos.getMapa().getSize_filas()), Integer.parseInt(misDatos.getMapa().getSize_columnas()), misDatos.getJugadores(), misDatos.getPlanetas());
            if(!misDatos.getPlanetas().isEmpty()){
                verificador = false;
                totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                panelMensajes.setText(totalErroress);
            }
            for(int i = 0; i < misDatos.getJugadores().size(); i++){
                if(!misDatos.getJugadores().get(i).getPlanetas().isEmpty()){
                    verificador = false;
                    totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                    panelMensajes.setText(totalErroress);
                    break;
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosPlanetas(misDatos.getMapa(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Algun planeta esta situado en una posicion que no existe dentro del mapa\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosNeutrales(misDatos.getMapa(), misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Algun planeta neutral esta situado en una posicion que no existe dentro del mapa\n";
                    System.out.println("Algun planeta neutral esta situado en una posicion que no existe dentro del mapa");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPosPlanetas(misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Dos planetas estan situados en la misma posicion\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionNeutralaNeutral(misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas neutrales estan situados en la misma posicion\n";
                    System.out.println("Dos planetas neutrales estan situados en la misma posicion");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPlanetasyNeutrales(misDatos.getpNeutrales(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas (normal y un neutral) estan situados en la misma posicion\n";
                    System.out.println("Dos planetas(normal y un neutral) estan situados en la misma posicion\n");
                }
            }
            if(verificador == true) {
                crearCuadriculaJuego(misDatos);
            } else { 
                panelMensajes.setText(totalErroress);
            }  
        }
        
    }

    public void traspasoDatosFlotas(ArrayList<NavesCamino> listNaves, ArrayList<NavesCamino> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listNaves.add(listTemporal.get(i));
        }

    }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxGuardarPartida$actions {
  private final SintaxGuardarPartida parser;

  /** Constructor */
  CUP$SintaxGuardarPartida$actions(SintaxGuardarPartida parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxGuardarPartida$do_action(
    int                        CUP$SintaxGuardarPartida$act_num,
    java_cup.runtime.lr_parser CUP$SintaxGuardarPartida$parser,
    java.util.Stack            CUP$SintaxGuardarPartida$stack,
    int                        CUP$SintaxGuardarPartida$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxGuardarPartida$result;

      /* select the action based on the action number */
      switch (CUP$SintaxGuardarPartida$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bn ::= verificador DOS_PUNTOS FALSO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bn",62, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bn ::= verificador DOS_PUNTOS VERDADERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bn",62, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // bm ::= jugadorAtaque DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bm",61, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // bl ::= jugadorEnvio DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bl",60, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // bk ::= llegada DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bk",59, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // bj ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString()));  RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bj",58, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bi ::= noNaves DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bi",57, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // bh ::= planetaDestino DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bh",56, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // bg ::= planetaOrigen DOS_PUNTOS ID 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bg",55, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // bf ::= noFlota DOS_PUNTOS ENTERO 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bf",54, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // rep2 ::= error be 
            {
              NavesCamino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // rep2 ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { parser.totalErrores2 += "Sub-atributo verificador en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // rep2 ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { parser.totalErrores2 += "Sub-atributo noJugadorAtaque en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // rep2 ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { parser.totalErrores2 += "Sub-atributo noJugadorEnvio en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // rep2 ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { parser.totalErrores2 += "Sub-atributo turnoLlegada en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // rep2 ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores2 += "Sub-atributo porcentajeMuertes en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // rep2 ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { parser.totalErrores2 += "Sub-atributo noNaves en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // rep2 ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { parser.totalErrores2 += "Sub-atributo planetaDestino en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // rep2 ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { parser.totalErrores2 += "Sub-atributo planetaOrigen en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // rep2 ::= bf be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { parser.totalErrores2 += "Sub-atributo noFlota en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep2",64, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // be ::= error be 
            {
              NavesCamino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // be ::= 
            {
              NavesCamino RESULT =null;
		 NavesCamino camino = new NavesCamino(); camino.setTodoCorrecto(true); RESULT=camino; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // be ::= COMA rep2 
            {
              NavesCamino RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // be ::= bn be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { parser.totalErrores2 += "Sub-atributo verificador en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // be ::= bm be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { parser.totalErrores2 += "Sub-atributo noJugadorAtaque en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // be ::= bl be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { parser.totalErrores2 += "Sub-atributo noJugadorEnvio en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // be ::= bk be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { parser.totalErrores2 += "Sub-atributo turnoLlegada en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // be ::= bj be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores2 += "Sub-atributo porcentajeMuertes en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // be ::= bi be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { parser.totalErrores2 += "Sub-atributo noNaves en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // be ::= bh be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { parser.totalErrores2 += "Sub-atributo planetaDestino en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // be ::= bg be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { parser.totalErrores2 += "Sub-atributo planetaOrigen en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // be ::= bf be 
            {
              NavesCamino RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		NavesCamino e = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { parser.totalErrores2 += "Sub-atributo noFlota en campo NAVES_CAMINO sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("be",63, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bd ::= LLAVE_A be LLAVE_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo"); } else { if(a.getTodoCorrecto()==false){ RESULT=null; } else {     ArrayList<NavesCamino> listNaves = new ArrayList<>();  listNaves.add(a); RESULT=listNaves; } } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bd",69, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // bd ::= LLAVE_A be LLAVE_B COMA bd 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		NavesCamino a = (NavesCamino)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<NavesCamino> e = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo"); } else { if(a.getTodoCorrecto()==false){RESULT=null; } else { e.add(a); RESULT=e; } } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bd",69, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // bc ::= NAVES_CAMINO AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bc",70, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // bc ::= NAVES_CAMINO AGRUPACION_A bd AGRUPACION_B 
            {
              ArrayList<NavesCamino> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<NavesCamino> a = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bc",70, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // bq ::= turnoJugador DOS_PUNTOS ENTERO 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 DatosGuardados dato = new DatosGuardados(); dato.setTurnoJugador((Integer) a); RESULT=dato; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bq",68, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // bb ::= turno DOS_PUNTOS ENTERO 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 DatosGuardados dato = new DatosGuardados(); dato.setContador((Integer) a); RESULT=dato; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bb",65, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // rep1 ::= error bo 
            {
              DatosGuardados RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // rep1 ::= bc bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<NavesCamino> a = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getListNaves()==null){ e.setListNaves(a); } else { parser.totalErrores2 += "Sub-atributo NAVES_CAMINO en campo CAMBIOS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // rep1 ::= bq bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getTurnoJugador()==null){ e.setTurnoJugador(a.getTurnoJugador()); } else { parser.totalErrores2 += "Sub-atributo turnoJugador en campo CAMBIOS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // rep1 ::= bb bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getContador()==null){ e.setContador(a.getContador()); } else { parser.totalErrores2 += "Sub-atributo turno en campo CAMBIOS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("rep1",66, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bo ::= error bo 
            {
              DatosGuardados RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bo ::= 
            {
              DatosGuardados RESULT =null;
		 DatosGuardados datos = new DatosGuardados(); datos.setTodoCorrecto(false); RESULT=datos; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // bo ::= COMA rep1 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // bo ::= bc bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<NavesCamino> a = (ArrayList<NavesCamino>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getListNaves()==null){ e.setListNaves(a); } else { parser.totalErrores2 += "Sub-atributo NAVES_CAMINO en campo CAMBIOS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bo ::= bq bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getTurnoJugador()==null){ e.setTurnoJugador(a.getTurnoJugador()); } else { parser.totalErrores2 += "Sub-atributo turnoJugador en campo CAMBIOS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // bo ::= bb bo 
            {
              DatosGuardados RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		DatosGuardados e = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getContador()==null){ e.setContador(a.getContador()); } else { parser.totalErrores2 += "Sub-atributo turno en campo CAMBIOS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bo",67, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // a2 ::= CAMBIOS DOS_PUNTOS AGRUPACION_A bo AGRUPACION_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		DatosGuardados a = (DatosGuardados)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  if(a.getContador()==null || a.getTurnoJugador()==null || a.getListNaves()==null){ parser.panelMensajes.setText(parser.totalErrores2); } else {   VentanaPrincipal.contador=a.getTurnoJugador();  VentanaPrincipal.contadorTurnos=a.getContador();  parser.navesCamino.clear();  parser.traspasoDatosFlotas(parser.navesCamino, a.getListNaves()); }
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("a2",3, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // bp ::= planetasConquistados DOS_PUNTOS ENTERO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetasConquistados((Integer) a); RESULT= jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("bp",46, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ba ::= enJuego DOS_PUNTOS FALSO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setEnJuego(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ba",45, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ba ::= enJuego DOS_PUNTOS VERDADERO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setEnJuego(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ba",45, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ah ::= tipo DOS_PUNTOS HUMANO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ah",44, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ah ::= tipo DOS_PUNTOS DIFICIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ah",44, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ah ::= tipo DOS_PUNTOS FACIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ah",44, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // al ::= color DOS_PUNTOS COMILLAS COLOR COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setColor(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("al",43, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ai ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ai",47, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ai ::= COMILLAS ID COMILLAS ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ai",47, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ai ::= COMILLAS ID COMILLAS COMA ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ai",47, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ag ::= planetas DOS_PUNTOS AGRUPACION_A ai AGRUPACION_B 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetas(a); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ag",42, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // af ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Jugadores jugador = new Jugadores();  jugador.setNombre(a.toString()); RESULT=jugador; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("af",41, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // q7 ::= error ae 
            {
              Jugadores RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // q7 ::= bp ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasConquistados()==null){ e.setPlanetasConquistados(a.getPlanetasConquistados()); } else { parser.totalErrores += "Sub-atributo planetasConquistados en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // q7 ::= ba ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){  if(e.getEnJuego()==null){ e.setEnJuego(a.getEnJuego()); } else { parser.totalErrores += "Sub-atributo enJuego en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // q7 ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { parser.totalErrores += "Sub-atributo color en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // q7 ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { parser.totalErrores += "Sub-atributo tipo en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // q7 ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { parser.totalErrores += "Sub-atributo planetas en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // q7 ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { parser.totalErrores += "Sub-atributo nombre en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q7",40, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ae ::= error ae 
            {
              Jugadores RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ae ::= 
            {
              Jugadores RESULT =null;
		 Jugadores jugador = new Jugadores(); jugador.setTodoCorrecto(true); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ae ::= COMA q7 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ae ::= bp ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasConquistados()==null){ e.setPlanetasConquistados(a.getPlanetasConquistados()); } else { parser.totalErrores += "Sub-atributo planetasConquistados en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ae ::= ba ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){  if(e.getEnJuego()==null){ e.setEnJuego(a.getEnJuego()); } else { parser.totalErrores += "Sub-atributo enJuego en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ae ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { parser.totalErrores += "Sub-atributo color en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ae ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { parser.totalErrores += "Sub-atributo tipo en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ae ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { parser.totalErrores += "Sub-atributo planetas en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ae ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { parser.totalErrores += "Sub-atributo nombre en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ae",39, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ad ::= LLAVE_A ae LLAVE_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { if(a.getTodoCorrecto() == false) {  RESULT=null; } else {   ArrayList<Jugadores> misJugadores = new ArrayList<>(); a.setEnJuego("true"); a.setPlanetasConquistados(0);  a.setMisPlanetas(new ArrayList<>()); misJugadores.add(a); RESULT=misJugadores; } } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ad",53, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ad ::= LLAVE_A ae LLAVE_B COMA ad 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<Jugadores> e = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { if(e == null){ RESULT=null; } else {  if(a.getTodoCorrecto()==false){ RESULT=null; } else { a.setEnJuego("true"); a.setPlanetasConquistados(0);  a.setMisPlanetas(new ArrayList<>());  e.add(a); RESULT=e; } } } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ad",53, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("jug",52, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("jug",52, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // an ::= posY DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionY(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("an",27, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // am ::= posX DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionX(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("am",26, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ac ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPorcentajeMuertes(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ac",33, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ab ::= produccion DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setProduccion(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ab",32, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // aa ::= naves DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNaves(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("aa",31, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // z ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNombre(a.toString()); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("z",30, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // q5 ::= error y 
            {
              PlanetasNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // q5 ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // q5 ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // q5 ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // q5 ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { parser.totalErrores += "Sub-atributo produccion en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // q5 ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { parser.totalErrores += "Sub-atributo naves en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // q5 ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q5",29, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // y ::= error y 
            {
              PlanetasNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // y ::= 
            {
              PlanetasNeutrales RESULT =null;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setTodoCorrecto(true); 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // y ::= COMA q5 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // y ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // y ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // y ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // y ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { parser.totalErrores += "Sub-atributo produccion en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // y ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { parser.totalErrores += "Sub-atributo naves en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // y ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("y",28, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // x ::= LLAVE_A y LLAVE_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { if(a.getTodoCorrecto() == false){ RESULT=null; } else {  ArrayList<PlanetasNeutrales> pNeutrales = new ArrayList<>(); pNeutrales.add(a); RESULT=pNeutrales;  } }  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("x",50, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // x ::= LLAVE_A y LLAVE_B COMA x 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<PlanetasNeutrales> e = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { if(e == null){ RESULT=null; } else { if(a.getTodoCorrecto() == false){ RESULT=null; } else {   e.add(a); RESULT=e; } } } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("x",50, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("pn",51, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("pn",51, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ak ::= posY DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionY(a.toString()); RESULT=planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("ak",25, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // aj ::= posX DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionX(a.toString()); RESULT=planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("aj",24, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // w ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPorcentajeMuertes(a.toString());  RESULT = planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("w",23, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // v ::= produccion DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setProduccion(a.toString()); RESULT = planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("v",22, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // u ::= naves DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setNaves(a.toString()); RESULT = planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("u",21, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // t ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Planetas planetas = new Planetas(); planetas.setNombre(a.toString()); RESULT=planetas; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("t",18, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // q3 ::= error s 
            {
              Planetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // q3 ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // q3 ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // q3 ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // q3 ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // q3 ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else {parser.totalErrores += "Sub-atributo naves de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // q3 ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q3",20, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // s ::= error s 
            {
              Planetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // s ::= 
            {
              Planetas RESULT =null;
		 Planetas planeta = new Planetas(); planeta.setTodoCorrecto(true); RESULT=planeta; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // s ::= COMA q3 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // s ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // s ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // s ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // s ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else {parser.totalErrores += "Sub-atributo naves de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // r ::= LLAVE_A s LLAVE_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else {  if(a.getTodoCorrecto()==false){ RESULT=null; } else {    ArrayList<Planetas> misPlanetas = new ArrayList<>(); misPlanetas.add(a); RESULT=misPlanetas; } }   
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("r",48, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // r ::= LLAVE_A s LLAVE_B COMA r 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		ArrayList<Planetas> e = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else { if(e == null){ RESULT=null; } else {  if(a.getTodoCorrecto()==false){ RESULT=null;   } else {  e.add(a); RESULT=e; } } } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("r",48, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("p",49, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("p",49, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // k ::= finalizacion DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setFinalizacion(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("k",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // o ::= produccion DOS_PUNTOS ENTERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setProduccion(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("o",36, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // n ::= mostrarEstadisticas DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("n",35, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("n",35, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // m ::= mostrarNaves DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("m",34, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // m ::= mostrarNaves DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("m",34, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // q8 ::= error l 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // q8 ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // q8 ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { parser.totalErrores += "Sub-atributo mostrarEstadisticas del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // q8 ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { parser.totalErrores += "Sub-atributo mostrarNaves del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q8",38, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // l ::= error l 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // l ::= 
            {
              MapaPNeutrales RESULT =null;
		 MapaPNeutrales neutral = new MapaPNeutrales(); neutral.setTodoCorrecto(true); RESULT=neutral; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l ::= COMA q8 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // l ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { parser.totalErrores += "Sub-atributo mostrarEstadisticas del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { parser.totalErrores += "Sub-atributo mostrarNaves del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 Mapa mapa = new Mapa(); if(a.getMostrarNaves()==null || a.getMostrarEstadisticas()==null || a.getProduccion() == null) {System.out.println("ERROR, falta de atributo");} else { if(a.getTodoCorrecto()==false){ mapa.setTodoCorrecto(false); } else { mapa.setTodoCorrecto(true); }  mapa.setMapaPNeutral(a); RESULT=mapa; }     
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("j2",14, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // i ::= acumular DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("i",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // i ::= acumular DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("i",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // h ::= mapaCiego DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("h",12, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // h ::= mapaCiego DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("h",12, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // g ::= pNeutrales DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setPlanetasNeutrales(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("g",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // d ::= id DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  Mapa mapa = new Mapa(); mapa.setId(a.toString());  RESULT=mapa;                    /*if(parser.mapita.getId()==null){ parser.mapita.setId(a.toString());  } else { parser.interruptor = false; parser.syntax_error(parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT)); parser.totalErrores += "Atributo ID sentenciado mas de una vez dentro de MAPA\n";    }*/ 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // j ::= columnas DOS_PUNTOS ENTERO COMA filas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa;    
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("j",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // j ::= filas DOS_PUNTOS ENTERO COMA columnas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("j",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // f ::= alAzar DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // f ::= alAzar DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // e ::= size DOS_PUNTOS LLAVE_A j LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		  RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("e",9, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // q ::= error c 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // q ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { parser.totalErrores += "Sub-atributo finalizacion del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // q ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { parser.totalErrores += "Sub-atributo NEUTRALES del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // q ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { parser.totalErrores += "Sub-atributo alAzar del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // q ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { parser.totalErrores += "Sub-atributo mapaCiego del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { parser.totalErrores += "Sub-atributos alAzar del campo MAPA sentenciados mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { parser.totalErrores += "Sub-atributo filas/columnas en campo MAPAS sentenciados mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e1.setTodoCorrecto(false); } } RESULT=e1; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // q ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else { parser.totalErrores += "Sub-atributo planetasNeutrales del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { parser.totalErrores += "Sub-atributo Id del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }   } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // c ::= error c 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c ::= 
            {
              Mapa RESULT =null;
		 Mapa mapita = new Mapa(); mapita.setTodoCorrecto(true); RESULT=mapita; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c ::= COMA q 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { parser.totalErrores += "Sub-atributo finalizacion del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { parser.totalErrores += "Sub-atributo NEUTRALES del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { parser.totalErrores += "Sub-atributo acumular del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { parser.totalErrores += "Sub-atributo mapaCiego del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { parser.totalErrores += "Sub-atributos alAzar del campo MAPA sentenciados mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { parser.totalErrores += "Sub-atributo filas/columnas en campo MAPAS sentenciados mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e1.setTodoCorrecto(false); } } RESULT=e1; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else { parser.totalErrores += "Sub-atributo planetasNeutrales del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { parser.totalErrores += "Sub-atributo Id del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }   } RESULT=e;  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b ::= MAPA DOS_PUNTOS LLAVE_A c LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getTodoCorrecto()==false){ RESULT=null; } else { RESULT=a; } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // q2 ::= error juego 
            {
              Juego RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 parser.totalErrores += "atributo principal mal definido. Fila: "+eleft+" Columna: "+eright+"\n"; RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // q2 ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { parser.totalErrores += "Atributo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // q2 ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { parser.totalErrores += "Atributo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // q2 ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { parser.totalErrores += "Atributo PLANETAS sentenciado mas de una vez\n"; System.out.println("erroraaa"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // q2 ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { parser.totalErrores += "Atributo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("q2",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // juego ::= error juego 
            {
              Juego RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 parser.totalErrores += "atributo principal mal definido. Fila: "+eleft+" Columna: "+eright+"\n"; RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // juego ::= 
            {
              Juego RESULT =null;
		 RESULT=new Juego();  
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // juego ::= COMA q2 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // juego ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { parser.totalErrores += "Atributo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // juego ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { parser.totalErrores += "Atributo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // juego ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { parser.totalErrores += "Atributo PLANETAS sentenciado mas de una vez\n"; System.out.println("erroraaa"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // juego ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { parser.totalErrores += "Atributo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("juego",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= LLAVE_A juego LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		 if(a.getMapa()==null || a.getJugadores()==null || a.getpNeutrales()==null || a.getPlanetas()==null){ parser.panelMensajes.setText(parser.totalErrores); } else {  boolean interruptor = true;  interruptor = parser.verificadorNombresJugadores(a.getJugadores(), interruptor);  interruptor = parser.verificadorNombresPlanetas(interruptor, a.getPlanetas());  interruptor = parser.verificadorNombresPlanetasNeutrales(interruptor, a.getpNeutrales());  parser.misDatos = a;  parser.datosJuego.add(a);   parser.panelJuego.setVisible(true);   parser.creacionMapa(parser.datosJuego.get(0), interruptor, parser.panelMensajes, parser.totalErrores);               } 
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= a a2 
            {
              Object RESULT =null;

              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = start_val;
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxGuardarPartida$parser.done_parsing();
          return CUP$SintaxGuardarPartida$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

