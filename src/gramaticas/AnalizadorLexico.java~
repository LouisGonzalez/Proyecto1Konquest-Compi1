/* The following code was generated by JFlex 1.6.1 */

package gramaticas;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexerCreacionMapa.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\42\0\1\27\1\0\1\1\3\0\1\64\1\65\2\0\1\23\1\4"+
    "\1\5\1\0\1\2\11\3\1\22\6\0\1\31\1\1\1\40\1\57"+
    "\1\43\1\63\1\56\1\61\1\62\1\55\1\1\1\47\1\30\1\36"+
    "\1\60\1\24\1\1\1\46\1\50\1\45\1\44\5\1\1\20\1\0"+
    "\1\21\1\0\1\54\1\0\1\13\1\52\1\42\1\33\1\11\1\12"+
    "\1\41\1\1\1\32\1\53\1\1\1\14\1\37\1\25\1\26\1\35"+
    "\1\1\1\7\1\15\1\6\1\10\1\51\3\1\1\34\1\16\1\0"+
    "\1\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\2\1\0\4\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\1\1\11\11\1\1\0\1\12\14\1"+
    "\1\13\12\1\1\0\26\1\1\0\1\14\1\15\4\1"+
    "\1\16\4\1\1\17\12\1\1\2\1\20\3\1\1\21"+
    "\1\1\1\22\12\1\1\23\1\1\1\24\2\1\1\25"+
    "\10\1\1\26\12\1\1\27\1\1\1\30\1\31\1\1"+
    "\1\32\13\1\1\33\1\34\2\1\1\35\2\1\1\36"+
    "\12\1\1\37\3\1\1\40\22\1\1\41\1\42\1\1"+
    "\1\43\1\1\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u021c"+
    "\0\u0252\0\u01e6\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\330\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0"+
    "\0\u06f6\0\66\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\66\0\66\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\66\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\66"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u01e6\0\66\0\u1224\0\u125a\0\u1290\0\66"+
    "\0\u12c6\0\66\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\66\0\u1518\0\66\0\u154e"+
    "\0\u1584\0\66\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\66\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\66\0\u1986\0\66"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\66\0\66"+
    "\0\u1cb0\0\u1ce6\0\66\0\u1d1c\0\u1d52\0\66\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\66\0\u1fa4\0\u1fda\0\u2010\0\66\0\u2046\0\u207c\0\u20b2"+
    "\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262"+
    "\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\66"+
    "\0\66\0\u2412\0\66\0\u2448\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\2\1\5\1\6\3\2"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\2\1\22\1\23\1\2"+
    "\1\24\2\2\1\25\1\26\1\27\15\2\1\30\1\2"+
    "\1\31\1\2\1\32\1\2\1\33\1\34\2\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\34\2\3\0\1\2"+
    "\2\3\1\2\1\0\10\2\6\0\3\2\1\0\34\2"+
    "\3\0\1\2\2\4\1\2\1\5\10\2\6\0\3\2"+
    "\1\0\34\2\4\0\1\5\1\35\63\0\4\2\1\0"+
    "\1\2\1\36\6\2\6\0\3\2\1\0\2\2\1\37"+
    "\31\2\3\0\4\2\1\0\5\2\1\40\2\2\6\0"+
    "\3\2\1\0\2\2\1\41\31\2\3\0\4\2\1\0"+
    "\6\2\1\42\1\2\6\0\3\2\1\0\12\2\1\43"+
    "\21\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\2\2\1\44\31\2\71\0\4\2\1\0\2\2\1\45"+
    "\5\2\6\0\3\2\1\0\17\2\1\46\14\2\3\0"+
    "\4\2\1\0\5\2\1\47\2\2\6\0\2\2\1\50"+
    "\1\0\34\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\1\2\1\51\32\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\3\2\1\52\30\2\3\0\4\2"+
    "\1\0\1\2\1\53\4\2\1\54\1\2\6\0\2\2"+
    "\1\55\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\13\2\1\56\20\2\3\0\4\2\1\0"+
    "\5\2\1\57\2\2\6\0\2\2\1\60\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\14\2"+
    "\1\61\17\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\32\2\1\62\1\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\14\2\1\63\17\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\1\2\1\64\32\2"+
    "\6\0\1\65\62\0\4\2\1\0\2\2\1\66\5\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\5\2\1\67\26\2\3\0\4\2"+
    "\1\0\6\2\1\70\1\2\6\0\3\2\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\1\2\1\71\1\2"+
    "\1\0\34\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\1\2\1\72\32\2\3\0\4\2\1\0\2\2"+
    "\1\73\5\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\4\2\1\74\27\2"+
    "\3\0\4\2\1\0\10\2\6\0\1\2\1\75\1\2"+
    "\1\0\34\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\1\2\1\76\32\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\21\2\1\77\12\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\7\2\1\100\24\2"+
    "\3\0\4\2\1\0\10\2\6\0\1\101\2\2\1\0"+
    "\34\2\3\0\4\2\1\0\10\2\6\0\2\2\1\102"+
    "\1\0\34\2\3\0\4\2\1\0\5\2\1\103\2\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\1\2"+
    "\1\104\6\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\14\2\1\105\17\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\5\2"+
    "\1\106\26\2\3\0\4\2\1\0\7\2\1\107\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\26\2\1\110\5\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\33\2\1\111\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\1\112\33\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\10\2\1\113"+
    "\23\2\4\0\2\114\63\0\4\2\1\0\3\2\1\115"+
    "\4\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\10\2\6\0\2\2\1\116\1\0\34\2\3\0\4\2"+
    "\1\0\7\2\1\117\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\5\2\1\120\2\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\4\2\1\121\27\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\7\2\1\122\24\2\3\0\4\2\1\0"+
    "\3\2\1\123\4\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\1\124\7\2\6\0\3\2\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\6\2"+
    "\1\125\25\2\3\0\4\2\1\0\3\2\1\126\4\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\22\2\1\127\11\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\1\2\1\130\32\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\3\2"+
    "\1\131\30\2\3\0\4\2\1\0\10\2\6\0\1\2"+
    "\1\132\1\2\1\0\34\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\12\2\1\133\21\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\15\2\1\134\16\2"+
    "\3\0\4\2\1\0\5\2\1\135\2\2\6\0\3\2"+
    "\1\0\34\2\3\0\4\2\1\0\1\136\7\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\1\2\1\137\32\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\32\2\1\140\1\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\1\2\1\141"+
    "\32\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\32\2\1\142\1\2\4\0\2\114\61\0\1\143\1\0"+
    "\4\2\1\0\3\2\1\144\4\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\6\2\1\145\1\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\5\2\1\146"+
    "\2\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\2\2\1\147\5\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\10\2\6\0\2\2\1\150\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\13\2"+
    "\1\151\20\2\3\0\4\2\1\0\7\2\1\152\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\1\2\1\153"+
    "\6\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\2\2\1\154\5\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\3\2\1\155\4\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\3\2\1\156\4\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\16\2\1\157\15\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\10\2\1\160\23\2\3\0"+
    "\4\2\1\0\1\2\1\161\6\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\27\2\1\162\4\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\10\2\1\163\23\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\6\2\1\164\25\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\17\2\1\165"+
    "\14\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\2\2\1\166\31\2\3\0\4\2\1\0\1\2\1\167"+
    "\6\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\6\2\1\170\1\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\15\2\1\171"+
    "\16\2\3\0\4\2\1\0\3\2\1\172\4\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\12\2\1\173\21\2\3\0\4\2\1\0"+
    "\1\174\7\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\1\2\1\175\1\2\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\1\2"+
    "\1\176\32\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\2\2\1\177\31\2\3\0\4\2\1\0\5\2"+
    "\1\200\2\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\30\2\1\201\3\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\32\2"+
    "\1\202\1\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\30\2\1\203\3\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\4\2\1\204\27\2\3\0\4\2"+
    "\1\0\5\2\1\205\2\2\6\0\3\2\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\1\2"+
    "\1\206\32\2\3\0\4\2\1\0\10\2\6\0\3\2"+
    "\1\0\12\2\1\207\21\2\3\0\4\2\1\0\5\2"+
    "\1\210\2\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\1\211\7\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\17\2\1\212"+
    "\14\2\3\0\4\2\1\0\3\2\1\213\4\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\1\2\1\214"+
    "\6\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\16\2\1\215\15\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\17\2\1\216"+
    "\14\2\3\0\4\2\1\0\5\2\1\217\2\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\1\2\1\220"+
    "\6\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\20\2\1\221\13\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\2\2\1\222"+
    "\31\2\3\0\4\2\1\0\7\2\1\223\6\0\3\2"+
    "\1\0\34\2\3\0\4\2\1\0\5\2\1\224\2\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\13\2\1\225\20\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\11\2\1\226\22\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\6\2"+
    "\1\227\4\2\1\230\20\2\3\0\4\2\1\0\10\2"+
    "\6\0\3\2\1\0\13\2\1\231\20\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\12\2\1\232\21\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\24\2"+
    "\1\233\7\2\3\0\4\2\1\0\10\2\6\0\2\2"+
    "\1\234\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\6\2\1\235\25\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\23\2\1\236\10\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\20\2\1\237"+
    "\13\2\3\0\4\2\1\0\10\2\6\0\2\2\1\240"+
    "\1\0\34\2\3\0\4\2\1\0\5\2\1\241\2\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\7\2"+
    "\1\242\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\20\2\1\243\13\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\2\2\1\244"+
    "\31\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\6\2\1\245\25\2\3\0\4\2\1\0\10\2\6\0"+
    "\1\2\1\246\1\2\1\0\34\2\3\0\4\2\1\0"+
    "\3\2\1\247\4\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\3\2\1\250\4\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\21\2\1\251\12\2\3\0\4\2\1\0\1\252\7\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\10\2"+
    "\6\0\2\2\1\253\1\0\34\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\13\2\1\254\20\2\3\0"+
    "\4\2\1\0\2\2\1\255\5\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\1\256\33\2\3\0\4\2\1\0\3\2\1\257\4\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\5\2"+
    "\1\260\2\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\1\2\1\261\1\2\1\0\34\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\14\2"+
    "\1\262\17\2\3\0\4\2\1\0\1\263\7\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\2\2\1\264"+
    "\5\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\7\2\1\265\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\3\2\1\266\30\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\15\2"+
    "\1\267\16\2\3\0\4\2\1\0\1\2\1\270\6\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\3\2"+
    "\1\271\4\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\10\2\6\0\3\2\1\0\2\2\1\272\31\2"+
    "\3\0\4\2\1\0\10\2\6\0\3\2\1\0\16\2"+
    "\1\273\15\2\3\0\4\2\1\0\5\2\1\274\2\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\1\2"+
    "\1\275\6\2\6\0\3\2\1\0\34\2\3\0\4\2"+
    "\1\0\7\2\1\276\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\10\2\6\0\3\2\1\0\1\2\1\277"+
    "\32\2\3\0\4\2\1\0\6\2\1\300\1\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\1\301\7\2"+
    "\6\0\3\2\1\0\34\2\3\0\4\2\1\0\1\302"+
    "\7\2\6\0\3\2\1\0\34\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\17\2\1\303\14\2\3\0"+
    "\4\2\1\0\3\2\1\304\4\2\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\3\2\1\305\4\2\6\0"+
    "\3\2\1\0\34\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\2\2\1\306\31\2\3\0\4\2\1\0"+
    "\10\2\6\0\3\2\1\0\13\2\1\307\20\2\3\0"+
    "\4\2\1\0\7\2\1\310\6\0\3\2\1\0\34\2"+
    "\3\0\4\2\1\0\7\2\1\311\6\0\3\2\1\0"+
    "\34\2\3\0\4\2\1\0\10\2\6\0\3\2\1\0"+
    "\12\2\1\312\21\2\3\0\4\2\1\0\10\2\6\0"+
    "\3\2\1\0\20\2\1\313\13\2\3\0\4\2\1\0"+
    "\5\2\1\314\2\2\6\0\3\2\1\0\34\2\3\0"+
    "\4\2\1\0\7\2\1\315\6\0\3\2\1\0\34\2"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9342];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\1\1\0\4\1\6\11\2\1\1\11\11\1\1\0"+
    "\30\1\1\0\26\1\1\0\26\1\1\11\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int tipo){
        return new Symbol(tipo, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int tipo, Object value){
        return new Symbol(tipo, yyline+1, yycolumn+1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.ID);
            }
          case 37: break;
          case 2: 
            { return symbol(sym.ENTERO);
            }
          case 38: break;
          case 3: 
            { return symbol(sym.LLAVE_A);
            }
          case 39: break;
          case 4: 
            { return symbol(sym.LLAVE_B);
            }
          case 40: break;
          case 5: 
            { return symbol(sym.AGRUPACION_A);
            }
          case 41: break;
          case 6: 
            { return symbol(sym.AGRUPACION_B);
            }
          case 42: break;
          case 7: 
            { return symbol(sym.DOS_PUNTOS);
            }
          case 43: break;
          case 8: 
            { return symbol(sym.COMA);
            }
          case 44: break;
          case 9: 
            { return symbol(sym.COMILLAS);
            }
          case 45: break;
          case 10: 
            { return symbol(sym.DECIMAL);
            }
          case 46: break;
          case 11: 
            { return symbol(sym.id);
            }
          case 47: break;
          case 12: 
            { return symbol(sym.VERDADERO);
            }
          case 48: break;
          case 13: 
            { return symbol(sym.tipo);
            }
          case 49: break;
          case 14: 
            { return symbol(sym.size);
            }
          case 50: break;
          case 15: 
            { return symbol(sym.MAPA);
            }
          case 51: break;
          case 16: 
            { return symbol(sym.FALSO);
            }
          case 52: break;
          case 17: 
            { return symbol(sym.PUNTO);
            }
          case 53: break;
          case 18: 
            { return symbol(sym.naves);
            }
          case 54: break;
          case 19: 
            { return symbol(sym.FACIL);
            }
          case 55: break;
          case 20: 
            { return symbol(sym.alAzar);
            }
          case 56: break;
          case 21: 
            { return symbol(sym.nombre);
            }
          case 57: break;
          case 22: 
            { return symbol(sym.HUMANO);
            }
          case 58: break;
          case 23: 
            { return symbol(sym.DIFICIL):
            }
          case 59: break;
          case 24: 
            { return symbol(sym.acumular);
            }
          case 60: break;
          case 25: 
            { return symbol(sym.PLANETAS);
            }
          case 61: break;
          case 26: 
            { return symbol(sym.planetas);
            }
          case 62: break;
          case 27: 
            { return symbol(sym.NEUTRALES);
            }
          case 63: break;
          case 28: 
            { return symbol(sym.mapaCiego);
            }
          case 64: break;
          case 29: 
            { return symbol(sym.JUGADORES);
            }
          case 65: break;
          case 30: 
            { return symbol(sym.produccion);
            }
          case 66: break;
          case 31: 
            { return symbol(sym.finalizacion);
            }
          case 67: break;
          case 32: 
            { return symbol(sym.mostrarNaves);
            }
          case 68: break;
          case 33: 
            { return symbol(sym.pNeutrales);
            }
          case 69: break;
          case 34: 
            { return symbol(sym.porcMuertes);
            }
          case 70: break;
          case 35: 
            { return symbol(sym.PLANETAS_NEUTRALES);
            }
          case 71: break;
          case 36: 
            { return symbol(sym.mostrarEstadisticas);
            }
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
