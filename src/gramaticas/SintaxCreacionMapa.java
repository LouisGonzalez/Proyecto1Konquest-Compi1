
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 23 23:40:14 CST 2020
//----------------------------------------------------

package gramaticas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.NavesCamino;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 23 23:40:14 CST 2020
  */
public class SintaxCreacionMapa extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxCreacionMapa() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxCreacionMapa(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxCreacionMapa(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\004\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\021\007\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\007\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\011\007\000\002\012\005\000\002\012\005\000\002" +
    "\013\011\000\002\013\011\000\002\006\007\000\002\010" +
    "\005\000\002\014\005\000\002\014\005\000\002\015\005" +
    "\000\002\015\005\000\002\016\007\000\002\045\004\000" +
    "\002\045\004\000\002\045\004\000\002\045\004\000\002" +
    "\045\002\000\002\045\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\042\005" +
    "\000\002\042\005\000\002\043\005\000\002\043\005\000" +
    "\002\044\005\000\002\020\005\000\002\057\007\000\002" +
    "\057\006\000\002\056\007\000\002\056\005\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\002\000\002\023\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\022\007" +
    "\000\002\025\005\000\002\026\005\000\002\027\005\000" +
    "\002\030\005\000\002\031\005\000\002\061\007\000\002" +
    "\061\006\000\002\060\007\000\002\060\005\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\002\000\002\034\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\036\007" +
    "\000\002\037\005\000\002\040\005\000\002\041\005\000" +
    "\002\032\005\000\002\033\005\000\002\062\007\000\002" +
    "\062\006\000\002\063\007\000\002\063\005\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\002\000\002\047\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\051\007\000\002\052" +
    "\007\000\002\055\007\000\002\055\006\000\002\055\002" +
    "\000\002\053\007\000\002\054\005\000\002\054\005\000" +
    "\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\004\006\005\001\002\000\004\002\u014a\001" +
    "\002\000\020\003\015\007\ufffa\013\006\016\013\032\007" +
    "\036\011\037\016\001\002\000\014\003\u0142\016\013\032" +
    "\007\036\011\037\016\001\002\000\004\012\u0103\001\002" +
    "\000\020\003\015\007\ufffa\013\006\016\013\032\007\036" +
    "\011\037\016\001\002\000\004\012\306\001\002\000\020" +
    "\003\015\007\ufffa\013\006\016\013\032\007\036\011\037" +
    "\016\001\002\000\004\012\117\001\002\000\004\007\116" +
    "\001\002\000\020\003\015\007\ufffa\013\006\016\013\032" +
    "\007\036\011\037\016\001\002\000\004\012\023\001\002" +
    "\000\020\003\015\007\ufffa\013\006\016\013\032\007\036" +
    "\011\037\016\001\002\000\020\003\015\007\ufffa\013\006" +
    "\016\013\032\007\036\011\037\016\001\002\000\004\007" +
    "\ufffc\001\002\000\004\007\uffff\001\002\000\004\010\024" +
    "\001\002\000\006\006\027\011\026\001\002\000\004\011" +
    "\114\001\002\000\020\003\uff8d\007\uff8d\013\uff8d\016\uff8d" +
    "\032\uff8d\036\uff8d\037\uff8d\001\002\000\020\003\034\007" +
    "\uff85\013\030\033\042\040\033\041\036\052\031\001\002" +
    "\000\014\003\103\033\042\040\033\041\036\052\031\001" +
    "\002\000\004\012\075\001\002\000\020\003\034\007\uff85" +
    "\013\030\033\042\040\033\041\036\052\031\001\002\000" +
    "\004\012\062\001\002\000\020\003\034\007\uff85\013\030" +
    "\033\042\040\033\041\036\052\031\001\002\000\020\003" +
    "\034\007\uff85\013\030\033\042\040\033\041\036\052\031" +
    "\001\002\000\004\012\054\001\002\000\020\003\034\007" +
    "\uff85\013\030\033\042\040\033\041\036\052\031\001\002" +
    "\000\020\003\034\007\uff85\013\030\033\042\040\033\041" +
    "\036\052\031\001\002\000\004\007\047\001\002\000\004" +
    "\012\043\001\002\000\004\015\044\001\002\000\004\047" +
    "\045\001\002\000\004\015\046\001\002\000\020\003\uff7e" +
    "\007\uff7e\013\uff7e\033\uff7e\040\uff7e\041\uff7e\052\uff7e\001" +
    "\002\000\006\011\uff8b\013\050\001\002\000\004\006\027" +
    "\001\002\000\004\011\uff8c\001\002\000\004\007\uff8a\001" +
    "\002\000\004\007\uff89\001\002\000\010\042\055\043\056" +
    "\044\057\001\002\000\020\003\uff76\007\uff76\013\uff76\033" +
    "\uff76\040\uff76\041\uff76\052\uff76\001\002\000\020\003\uff77" +
    "\007\uff77\013\uff77\033\uff77\040\uff77\041\uff77\052\uff77\001" +
    "\002\000\020\003\uff78\007\uff78\013\uff78\033\uff78\040\uff78" +
    "\041\uff78\052\uff78\001\002\000\004\007\uff88\001\002\000" +
    "\004\007\uff84\001\002\000\004\010\063\001\002\000\006" +
    "\011\uff7a\015\065\001\002\000\004\011\073\001\002\000" +
    "\004\047\066\001\002\000\004\015\067\001\002\000\010" +
    "\011\uff7a\013\071\015\065\001\002\000\004\011\uff7b\001" +
    "\002\000\006\011\uff7a\015\065\001\002\000\004\011\uff7c" +
    "\001\002\000\020\003\uff7d\007\uff7d\013\uff7d\033\uff7d\040" +
    "\uff7d\041\uff7d\052\uff7d\001\002\000\004\007\uff87\001\002" +
    "\000\004\015\076\001\002\000\004\055\077\001\002\000" +
    "\004\015\100\001\002\000\020\003\uff79\007\uff79\013\uff79" +
    "\033\uff79\040\uff79\041\uff79\052\uff79\001\002\000\004\007" +
    "\uff86\001\002\000\020\003\034\007\uff85\013\030\033\042" +
    "\040\033\041\036\052\031\001\002\000\020\003\034\007" +
    "\uff85\013\030\033\042\040\033\041\036\052\031\001\002" +
    "\000\020\003\034\007\uff85\013\030\033\042\040\033\041" +
    "\036\052\031\001\002\000\020\003\034\007\uff85\013\030" +
    "\033\042\040\033\041\036\052\031\001\002\000\020\003" +
    "\034\007\uff85\013\030\033\042\040\033\041\036\052\031" +
    "\001\002\000\004\007\uff83\001\002\000\004\007\uff82\001" +
    "\002\000\004\007\uff81\001\002\000\004\007\uff7f\001\002" +
    "\000\004\007\uff80\001\002\000\020\003\uff8e\007\uff8e\013" +
    "\uff8e\016\uff8e\032\uff8e\036\uff8e\037\uff8e\001\002\000\004" +
    "\007\ufff9\001\002\000\004\002\000\001\002\000\004\006" +
    "\120\001\002\000\030\003\132\007\uffe9\013\124\017\127" +
    "\020\126\021\123\022\142\023\125\024\143\025\131\031" +
    "\122\001\002\000\030\003\132\007\uffe9\013\124\017\127" +
    "\020\126\021\123\022\142\023\125\024\143\025\131\031" +
    "\122\001\002\000\004\012\302\001\002\000\004\012\277" +
    "\001\002\000\024\003\256\017\127\020\126\021\123\022" +
    "\142\023\125\024\143\025\131\031\122\001\002\000\004" +
    "\012\251\001\002\000\004\012\227\001\002\000\004\012" +
    "\223\001\002\000\030\003\132\007\uffe9\013\124\017\127" +
    "\020\126\021\123\022\142\023\125\024\143\025\131\031" +
    "\122\001\002\000\004\012\161\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\030\003\132" +
    "\007\uffe9\013\124\017\127\020\126\021\123\022\142\023" +
    "\125\024\143\025\131\031\122\001\002\000\004\007\151" +
    "\001\002\000\004\012\147\001\002\000\004\012\144\001" +
    "\002\000\006\004\146\005\145\001\002\000\030\003\uffd4" +
    "\007\uffd4\013\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\031\uffd4\001\002\000\030\003\uffd5" +
    "\007\uffd5\013\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\031\uffd5\001\002\000\004\045\150" +
    "\001\002\000\030\003\uffd8\007\uffd8\013\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\031\uffd8" +
    "\001\002\000\020\003\ufff3\007\ufff3\013\ufff3\016\ufff3\032" +
    "\ufff3\036\ufff3\037\ufff3\001\002\000\004\007\ufff2\001\002" +
    "\000\004\007\ufff0\001\002\000\004\007\uffef\001\002\000" +
    "\004\007\ufff1\001\002\000\004\007\uffee\001\002\000\004" +
    "\007\uffed\001\002\000\004\007\uffe8\001\002\000\004\006" +
    "\162\001\002\000\016\003\173\007\uffce\013\163\026\171" +
    "\027\164\030\172\001\002\000\012\003\212\026\171\027" +
    "\164\030\172\001\002\000\004\012\206\001\002\000\016" +
    "\003\173\007\uffce\013\163\026\171\027\164\030\172\001" +
    "\002\000\016\003\173\007\uffce\013\163\026\171\027\164" +
    "\030\172\001\002\000\016\003\173\007\uffce\013\163\026" +
    "\171\027\164\030\172\001\002\000\004\007\202\001\002" +
    "\000\004\012\177\001\002\000\004\012\175\001\002\000" +
    "\016\003\173\007\uffce\013\163\026\171\027\164\030\172" +
    "\001\002\000\004\007\uffcd\001\002\000\004\045\176\001" +
    "\002\000\016\003\uffc4\007\uffc4\013\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\001\002\000\006\004\201\005\200\001\002\000" +
    "\016\003\uffc7\007\uffc7\013\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\001\002\000\016\003\uffc8\007\uffc8\013\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\001\002\000\030\003\uffd3\007\uffd3\013\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\031\uffd3\001\002\000\004\007\uffd2\001\002\000\004" +
    "\007\uffd1\001\002\000\004\007\uffd0\001\002\000\006\004" +
    "\210\005\207\001\002\000\016\003\uffc5\007\uffc5\013\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\001\002\000\016\003\uffc6\007" +
    "\uffc6\013\uffc6\026\uffc6\027\uffc6\030\uffc6\001\002\000\016" +
    "\003\173\007\uffce\013\163\026\171\027\164\030\172\001" +
    "\002\000\016\003\173\007\uffce\013\163\026\171\027\164" +
    "\030\172\001\002\000\004\007\uffcf\001\002\000\016\003" +
    "\173\007\uffce\013\163\026\171\027\164\030\172\001\002" +
    "\000\016\003\173\007\uffce\013\163\026\171\027\164\030" +
    "\172\001\002\000\004\007\uffcb\001\002\000\004\007\uffca" +
    "\001\002\000\004\007\uffc9\001\002\000\004\007\uffcc\001" +
    "\002\000\004\007\uffeb\001\002\000\004\015\224\001\002" +
    "\000\004\047\225\001\002\000\004\015\226\001\002\000" +
    "\030\003\uffd9\007\uffd9\013\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\031\uffd9\001\002\000" +
    "\004\006\230\001\002\000\006\050\233\051\232\001\002" +
    "\000\004\007\250\001\002\000\004\012\242\001\002\000" +
    "\004\012\234\001\002\000\004\045\235\001\002\000\004" +
    "\013\236\001\002\000\004\051\237\001\002\000\004\012" +
    "\240\001\002\000\004\045\241\001\002\000\004\007\uffdb" +
    "\001\002\000\004\045\243\001\002\000\004\013\244\001" +
    "\002\000\004\050\245\001\002\000\004\012\246\001\002" +
    "\000\004\045\247\001\002\000\004\007\uffda\001\002\000" +
    "\030\003\uffde\007\uffde\013\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\031\uffde\001\002\000" +
    "\006\004\253\005\252\001\002\000\030\003\uffd6\007\uffd6" +
    "\013\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\031\uffd6\001\002\000\030\003\uffd7\007\uffd7" +
    "\013\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\031\uffd7\001\002\000\030\003\132\007\uffe9" +
    "\013\124\017\127\020\126\021\123\022\142\023\125\024" +
    "\143\025\131\031\122\001\002\000\004\007\uffea\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\030\003\132\007\uffe9\013\124\017\127\020\126\021" +
    "\123\022\142\023\125\024\143\025\131\031\122\001\002" +
    "\000\004\007\uffe7\001\002\000\004\007\uffe5\001\002\000" +
    "\004\007\uffe4\001\002\000\004\007\uffe6\001\002\000\004" +
    "\007\uffe3\001\002\000\004\007\uffe2\001\002\000\004\007" +
    "\uffe0\001\002\000\004\007\uffdf\001\002\000\004\007\uffe1" +
    "\001\002\000\006\004\301\005\300\001\002\000\030\003" +
    "\uffdc\007\uffdc\013\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\031\uffdc\001\002\000\030\003" +
    "\uffdd\007\uffdd\013\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\031\uffdd\001\002\000\004\045" +
    "\303\001\002\000\030\003\uffc3\007\uffc3\013\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\031" +
    "\uffc3\001\002\000\004\007\uffec\001\002\000\004\007\ufffd" +
    "\001\002\000\004\010\307\001\002\000\006\006\312\011" +
    "\311\001\002\000\004\011\u0101\001\002\000\020\003\uffa7" +
    "\007\uffa7\013\uffa7\016\uffa7\032\uffa7\036\uffa7\037\uffa7\001" +
    "\002\000\024\003\323\007\uff9d\013\316\030\320\033\326" +
    "\034\322\035\330\053\315\054\313\001\002\000\004\012" +
    "\377\001\002\000\024\003\323\007\uff9d\013\316\030\320" +
    "\033\326\034\322\035\330\053\315\054\313\001\002\000" +
    "\004\012\374\001\002\000\020\003\362\030\320\033\326" +
    "\034\322\035\330\053\315\054\313\001\002\000\024\003" +
    "\323\007\uff9d\013\316\030\320\033\326\034\322\035\330" +
    "\053\315\054\313\001\002\000\004\012\352\001\002\000" +
    "\024\003\323\007\uff9d\013\316\030\320\033\326\034\322" +
    "\035\330\053\315\054\313\001\002\000\004\012\347\001" +
    "\002\000\024\003\323\007\uff9d\013\316\030\320\033\326" +
    "\034\322\035\330\053\315\054\313\001\002\000\024\003" +
    "\323\007\uff9d\013\316\030\320\033\326\034\322\035\330" +
    "\053\315\054\313\001\002\000\004\007\342\001\002\000" +
    "\004\012\336\001\002\000\024\003\323\007\uff9d\013\316" +
    "\030\320\033\326\034\322\035\330\053\315\054\313\001" +
    "\002\000\004\012\333\001\002\000\024\003\323\007\uff9d" +
    "\013\316\030\320\033\326\034\322\035\330\053\315\054" +
    "\313\001\002\000\004\007\uffa2\001\002\000\004\046\334" +
    "\001\002\000\024\003\uff91\007\uff91\013\uff91\030\uff91\033" +
    "\uff91\034\uff91\035\uff91\053\uff91\054\uff91\001\002\000\004" +
    "\007\uffa1\001\002\000\004\015\337\001\002\000\004\047" +
    "\340\001\002\000\004\015\341\001\002\000\024\003\uff94" +
    "\007\uff94\013\uff94\030\uff94\033\uff94\034\uff94\035\uff94\053" +
    "\uff94\054\uff94\001\002\000\006\011\uffa5\013\343\001\002" +
    "\000\004\006\312\001\002\000\004\011\uffa6\001\002\000" +
    "\004\007\uffa4\001\002\000\004\007\uff9c\001\002\000\004" +
    "\045\350\001\002\000\024\003\uff93\007\uff93\013\uff93\030" +
    "\uff93\033\uff93\034\uff93\035\uff93\053\uff93\054\uff93\001\002" +
    "\000\004\007\uffa0\001\002\000\004\045\353\001\002\000" +
    "\024\003\uff92\007\uff92\013\uff92\030\uff92\033\uff92\034\uff92" +
    "\035\uff92\053\uff92\054\uff92\001\002\000\004\007\uff9f\001" +
    "\002\000\024\003\323\007\uff9d\013\316\030\320\033\326" +
    "\034\322\035\330\053\315\054\313\001\002\000\004\007" +
    "\uff9e\001\002\000\024\003\323\007\uff9d\013\316\030\320" +
    "\033\326\034\322\035\330\053\315\054\313\001\002\000" +
    "\024\003\323\007\uff9d\013\316\030\320\033\326\034\322" +
    "\035\330\053\315\054\313\001\002\000\024\003\323\007" +
    "\uff9d\013\316\030\320\033\326\034\322\035\330\053\315" +
    "\054\313\001\002\000\024\003\323\007\uff9d\013\316\030" +
    "\320\033\326\034\322\035\330\053\315\054\313\001\002" +
    "\000\024\003\323\007\uff9d\013\316\030\320\033\326\034" +
    "\322\035\330\053\315\054\313\001\002\000\024\003\323" +
    "\007\uff9d\013\316\030\320\033\326\034\322\035\330\053" +
    "\315\054\313\001\002\000\004\007\uff99\001\002\000\004" +
    "\007\uff98\001\002\000\004\007\uff95\001\002\000\004\007" +
    "\uff9b\001\002\000\004\007\uff97\001\002\000\004\007\uff96" +
    "\001\002\000\004\007\uff9a\001\002\000\004\045\375\001" +
    "\002\000\024\003\uff90\007\uff90\013\uff90\030\uff90\033\uff90" +
    "\034\uff90\035\uff90\053\uff90\054\uff90\001\002\000\004\007" +
    "\uffa3\001\002\000\004\045\u0100\001\002\000\024\003\uff8f" +
    "\007\uff8f\013\uff8f\030\uff8f\033\uff8f\034\uff8f\035\uff8f\053" +
    "\uff8f\054\uff8f\001\002\000\020\003\uffa8\007\uffa8\013\uffa8" +
    "\016\uffa8\032\uffa8\036\uffa8\037\uffa8\001\002\000\004\007" +
    "\ufffe\001\002\000\004\010\u0104\001\002\000\006\006\u0107" +
    "\011\u0106\001\002\000\004\011\u013e\001\002\000\020\003" +
    "\uffc1\007\uffc1\013\uffc1\016\uffc1\032\uffc1\036\uffc1\037\uffc1" +
    "\001\002\000\024\003\u010f\007\uffb7\013\u010a\030\u010b\033" +
    "\u0112\034\u010d\035\u0115\053\u0109\054\u0108\001\002\000\004" +
    "\012\u013c\001\002\000\004\012\u013a\001\002\000\020\003" +
    "\u012e\030\u010b\033\u0112\034\u010d\035\u0115\053\u0109\054\u0108" +
    "\001\002\000\004\012\u0129\001\002\000\024\003\u010f\007" +
    "\uffb7\013\u010a\030\u010b\033\u0112\034\u010d\035\u0115\053\u0109" +
    "\054\u0108\001\002\000\004\012\u0126\001\002\000\024\003" +
    "\u010f\007\uffb7\013\u010a\030\u010b\033\u0112\034\u010d\035\u0115" +
    "\053\u0109\054\u0108\001\002\000\024\003\u010f\007\uffb7\013" +
    "\u010a\030\u010b\033\u0112\034\u010d\035\u0115\053\u0109\054\u0108" +
    "\001\002\000\024\003\u010f\007\uffb7\013\u010a\030\u010b\033" +
    "\u0112\034\u010d\035\u0115\053\u0109\054\u0108\001\002\000\024" +
    "\003\u010f\007\uffb7\013\u010a\030\u010b\033\u0112\034\u010d\035" +
    "\u0115\053\u0109\054\u0108\001\002\000\004\012\u011e\001\002" +
    "\000\024\003\u010f\007\uffb7\013\u010a\030\u010b\033\u0112\034" +
    "\u010d\035\u0115\053\u0109\054\u0108\001\002\000\024\003\u010f" +
    "\007\uffb7\013\u010a\030\u010b\033\u0112\034\u010d\035\u0115\053" +
    "\u0109\054\u0108\001\002\000\004\012\u011a\001\002\000\004" +
    "\007\u0117\001\002\000\006\011\uffbf\013\u0118\001\002\000" +
    "\004\006\u0107\001\002\000\004\011\uffc0\001\002\000\004" +
    "\046\u011b\001\002\000\024\003\uffab\007\uffab\013\uffab\030" +
    "\uffab\033\uffab\034\uffab\035\uffab\053\uffab\054\uffab\001\002" +
    "\000\004\007\uffbe\001\002\000\004\007\uffbd\001\002\000" +
    "\004\015\u011f\001\002\000\004\047\u0120\001\002\000\004" +
    "\015\u0121\001\002\000\024\003\uffae\007\uffae\013\uffae\030" +
    "\uffae\033\uffae\034\uffae\035\uffae\053\uffae\054\uffae\001\002" +
    "\000\004\007\uffbc\001\002\000\004\007\uffbb\001\002\000" +
    "\004\007\uffb6\001\002\000\004\007\uffba\001\002\000\004" +
    "\045\u0127\001\002\000\024\003\uffad\007\uffad\013\uffad\030" +
    "\uffad\033\uffad\034\uffad\035\uffad\053\uffad\054\uffad\001\002" +
    "\000\004\007\uffb9\001\002\000\004\045\u012a\001\002\000" +
    "\024\003\uffac\007\uffac\013\uffac\030\uffac\033\uffac\034\uffac" +
    "\035\uffac\053\uffac\054\uffac\001\002\000\004\007\uffb8\001" +
    "\002\000\024\003\u010f\007\uffb7\013\u010a\030\u010b\033\u0112" +
    "\034\u010d\035\u0115\053\u0109\054\u0108\001\002\000\024\003" +
    "\u010f\007\uffb7\013\u010a\030\u010b\033\u0112\034\u010d\035\u0115" +
    "\053\u0109\054\u0108\001\002\000\024\003\u010f\007\uffb7\013" +
    "\u010a\030\u010b\033\u0112\034\u010d\035\u0115\053\u0109\054\u0108" +
    "\001\002\000\024\003\u010f\007\uffb7\013\u010a\030\u010b\033" +
    "\u0112\034\u010d\035\u0115\053\u0109\054\u0108\001\002\000\024" +
    "\003\u010f\007\uffb7\013\u010a\030\u010b\033\u0112\034\u010d\035" +
    "\u0115\053\u0109\054\u0108\001\002\000\024\003\u010f\007\uffb7" +
    "\013\u010a\030\u010b\033\u0112\034\u010d\035\u0115\053\u0109\054" +
    "\u0108\001\002\000\024\003\u010f\007\uffb7\013\u010a\030\u010b" +
    "\033\u0112\034\u010d\035\u0115\053\u0109\054\u0108\001\002\000" +
    "\004\007\uffb5\001\002\000\004\007\uffb4\001\002\000\004" +
    "\007\uffb3\001\002\000\004\007\uffb2\001\002\000\004\007" +
    "\uffaf\001\002\000\004\007\uffb1\001\002\000\004\007\uffb0" +
    "\001\002\000\004\045\u013b\001\002\000\024\003\uffaa\007" +
    "\uffaa\013\uffaa\030\uffaa\033\uffaa\034\uffaa\035\uffaa\053\uffaa" +
    "\054\uffaa\001\002\000\004\045\u013d\001\002\000\024\003" +
    "\uffa9\007\uffa9\013\uffa9\030\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\053\uffa9\054\uffa9\001\002\000\020\003\uffc2\007\uffc2\013" +
    "\uffc2\016\uffc2\032\uffc2\036\uffc2\037\uffc2\001\002\000\020" +
    "\003\015\007\ufffa\013\006\016\013\032\007\036\011\037" +
    "\016\001\002\000\020\003\015\007\ufffa\013\006\016\013" +
    "\032\007\036\011\037\016\001\002\000\004\007\ufffb\001" +
    "\002\000\020\003\015\007\ufffa\013\006\016\013\032\007" +
    "\036\011\037\016\001\002\000\020\003\015\007\ufffa\013" +
    "\006\016\013\032\007\036\011\037\016\001\002\000\020" +
    "\003\015\007\ufffa\013\006\016\013\032\007\036\011\037" +
    "\016\001\002\000\004\007\ufff5\001\002\000\004\007\ufff8" +
    "\001\002\000\004\007\ufff4\001\002\000\004\007\ufff6\001" +
    "\002\000\004\007\ufff7\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\004\013\021\016\057\007\061\011\062\017\001\001" +
    "\000\014\005\u0140\021\u0142\057\u013e\061\u013f\062\u0143\001" +
    "\001\000\002\001\001\000\014\004\u0101\021\016\057\007" +
    "\061\011\062\017\001\001\000\002\001\001\000\014\004" +
    "\304\021\016\057\007\061\011\062\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\114\021\016\057" +
    "\007\061\011\062\017\001\001\000\002\001\001\000\014" +
    "\004\021\021\016\057\007\061\011\062\017\001\001\000" +
    "\014\004\020\021\016\057\007\061\011\062\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\047\040\051\037\052\036\053\031\054\034\001" +
    "\001\000\014\050\100\051\105\052\104\053\101\054\103" +
    "\001\001\000\002\001\001\000\014\047\073\051\037\052" +
    "\036\053\031\054\034\001\001\000\002\001\001\000\014" +
    "\047\060\051\037\052\036\053\031\054\034\001\001\000" +
    "\014\047\057\051\037\052\036\053\031\054\034\001\001" +
    "\000\002\001\001\000\014\047\052\051\037\052\036\053" +
    "\031\054\034\001\001\000\014\047\051\051\037\052\036" +
    "\053\031\054\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\067\001\001" +
    "\000\002\001\001\000\004\055\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\047\112\051\037\052\036\053\031" +
    "\054\034\001\001\000\014\047\111\051\037\052\036\053" +
    "\031\054\034\001\001\000\014\047\110\051\037\052\036" +
    "\053\031\054\034\001\001\000\014\047\107\051\037\052" +
    "\036\053\031\054\034\001\001\000\014\047\106\051\037" +
    "\052\036\053\031\054\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\137\007\140\010\134" +
    "\011\136\012\135\014\133\015\132\016\120\020\127\001" +
    "\001\000\024\006\137\007\303\010\134\011\136\012\135" +
    "\014\133\015\132\016\120\020\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\264\010\261\011\263" +
    "\012\262\014\260\015\257\016\253\017\254\020\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\137\007\221\010\134\011\136\012\135\014" +
    "\133\015\132\016\120\020\127\001\001\000\002\001\001" +
    "\000\024\006\137\007\157\010\134\011\136\012\135\014" +
    "\133\015\132\016\120\020\127\001\001\000\024\006\137" +
    "\007\156\010\134\011\136\012\135\014\133\015\132\016" +
    "\120\020\127\001\001\000\024\006\137\007\155\010\134" +
    "\011\136\012\135\014\133\015\132\016\120\020\127\001" +
    "\001\000\024\006\137\007\154\010\134\011\136\012\135" +
    "\014\133\015\132\016\120\020\127\001\001\000\024\006" +
    "\137\007\153\010\134\011\136\012\135\014\133\015\132" +
    "\016\120\020\127\001\001\000\024\006\137\007\152\010" +
    "\134\011\136\012\135\014\133\015\132\016\120\020\127" +
    "\001\001\000\024\006\137\007\151\010\134\011\136\012" +
    "\135\014\133\015\132\016\120\020\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\042\166\043\165\044\164\045\167\001\001" +
    "\000\012\042\210\043\214\044\213\046\212\001\001\000" +
    "\002\001\001\000\012\042\166\043\165\044\164\045\204" +
    "\001\001\000\012\042\166\043\165\044\164\045\203\001" +
    "\001\000\012\042\166\043\165\044\164\045\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\042\166\043\165\044\164\045\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\166\043\165\044\164\045\220\001\001\000\012\042" +
    "\166\043\165\044\164\045\217\001\001\000\002\001\001" +
    "\000\012\042\166\043\165\044\164\045\216\001\001\000" +
    "\012\042\166\043\165\044\164\045\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\137\007\275\010\134\011\136" +
    "\012\135\014\133\015\132\016\120\020\127\001\001\000" +
    "\002\001\001\000\024\006\137\007\274\010\134\011\136" +
    "\012\135\014\133\015\132\016\120\020\127\001\001\000" +
    "\024\006\137\007\273\010\134\011\136\012\135\014\133" +
    "\015\132\016\120\020\127\001\001\000\024\006\137\007" +
    "\272\010\134\011\136\012\135\014\133\015\132\016\120" +
    "\020\127\001\001\000\024\006\137\007\271\010\134\011" +
    "\136\012\135\014\133\015\132\016\120\020\127\001\001" +
    "\000\024\006\137\007\270\010\134\011\136\012\135\014" +
    "\133\015\132\016\120\020\127\001\001\000\024\006\137" +
    "\007\267\010\134\011\136\012\135\014\133\015\132\016" +
    "\120\020\127\001\001\000\024\006\137\007\266\010\134" +
    "\011\136\012\135\014\133\015\132\016\120\020\127\001" +
    "\001\000\024\006\137\007\265\010\134\011\136\012\135" +
    "\014\133\015\132\016\120\020\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\032\320\033\316\034\324\036\323\037\313" +
    "\040\330\041\326\001\001\000\002\001\001\000\020\032" +
    "\320\033\316\034\375\036\323\037\313\040\330\041\326" +
    "\001\001\000\002\001\001\000\020\032\357\033\356\035" +
    "\355\036\360\037\354\040\363\041\362\001\001\000\020" +
    "\032\320\033\316\034\353\036\323\037\313\040\330\041" +
    "\326\001\001\000\002\001\001\000\020\032\320\033\316" +
    "\034\350\036\323\037\313\040\330\041\326\001\001\000" +
    "\002\001\001\000\020\032\320\033\316\034\345\036\323" +
    "\037\313\040\330\041\326\001\001\000\020\032\320\033" +
    "\316\034\344\036\323\037\313\040\330\041\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\032\320\033" +
    "\316\034\334\036\323\037\313\040\330\041\326\001\001" +
    "\000\002\001\001\000\020\032\320\033\316\034\331\036" +
    "\323\037\313\040\330\041\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\032\320" +
    "\033\316\034\372\036\323\037\313\040\330\041\326\001" +
    "\001\000\002\001\001\000\020\032\320\033\316\034\371" +
    "\036\323\037\313\040\330\041\326\001\001\000\020\032" +
    "\320\033\316\034\370\036\323\037\313\040\330\041\326" +
    "\001\001\000\020\032\320\033\316\034\367\036\323\037" +
    "\313\040\330\041\326\001\001\000\020\032\320\033\316" +
    "\034\366\036\323\037\313\040\330\041\326\001\001\000" +
    "\020\032\320\033\316\034\365\036\323\037\313\040\330" +
    "\041\326\001\001\000\020\032\320\033\316\034\364\036" +
    "\323\037\313\040\330\041\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\u0113\023\u0115\025\u0112" +
    "\026\u0110\027\u010f\030\u010d\031\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\u0131\024\u012a\025\u0130" +
    "\026\u012f\027\u012e\030\u012c\031\u012b\001\001\000\002\001" +
    "\001\000\020\022\u0113\023\u0127\025\u0112\026\u0110\027\u010f" +
    "\030\u010d\031\u010b\001\001\000\002\001\001\000\020\022" +
    "\u0113\023\u0124\025\u0112\026\u0110\027\u010f\030\u010d\031\u010b" +
    "\001\001\000\020\022\u0113\023\u0123\025\u0112\026\u0110\027" +
    "\u010f\030\u010d\031\u010b\001\001\000\020\022\u0113\023\u0122" +
    "\025\u0112\026\u0110\027\u010f\030\u010d\031\u010b\001\001\000" +
    "\020\022\u0113\023\u0121\025\u0112\026\u0110\027\u010f\030\u010d" +
    "\031\u010b\001\001\000\002\001\001\000\020\022\u0113\023" +
    "\u011c\025\u0112\026\u0110\027\u010f\030\u010d\031\u010b\001\001" +
    "\000\020\022\u0113\023\u011b\025\u0112\026\u0110\027\u010f\030" +
    "\u010d\031\u010b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\u0113\023" +
    "\u0138\025\u0112\026\u0110\027\u010f\030\u010d\031\u010b\001\001" +
    "\000\020\022\u0113\023\u0137\025\u0112\026\u0110\027\u010f\030" +
    "\u010d\031\u010b\001\001\000\020\022\u0113\023\u0136\025\u0112" +
    "\026\u0110\027\u010f\030\u010d\031\u010b\001\001\000\020\022" +
    "\u0113\023\u0135\025\u0112\026\u0110\027\u010f\030\u010d\031\u010b" +
    "\001\001\000\020\022\u0113\023\u0134\025\u0112\026\u0110\027" +
    "\u010f\030\u010d\031\u010b\001\001\000\020\022\u0113\023\u0133" +
    "\025\u0112\026\u0110\027\u010f\030\u010d\031\u010b\001\001\000" +
    "\020\022\u0113\023\u0132\025\u0112\026\u0110\027\u010f\030\u010d" +
    "\031\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\u0148\021\016\057\007\061\011\062\017\001" +
    "\001\000\014\004\u0147\021\016\057\007\061\011\062\017" +
    "\001\001\000\002\001\001\000\014\004\u0146\021\016\057" +
    "\007\061\011\062\017\001\001\000\014\004\u0145\021\016" +
    "\057\007\061\011\062\017\001\001\000\014\004\u0144\021" +
    "\016\057\007\061\011\062\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxCreacionMapa$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxCreacionMapa$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxCreacionMapa$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;

    public SintaxCreacionMapa(AnalizadorLexico lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas){
        super(lex);
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnDistancia = btnDistancia;
        this.btnFlotas = btnFlotas;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }

    public void crearCuadriculaJuego(Juego misDatos){
        tablero.creacionCuadricula(misDatos, txtNaves, contador, navesCamino, btnTurno, btnDistancia, btnFlotas);
    }

    public boolean verificadorNombresJugadores(ArrayList<Jugadores> listJugadores, boolean verificador){
        if(verificador == true){
            for(int i = 0; i < listJugadores.size(); i++){
                String jugador1 = listJugadores.get(i).getNombre();
                    if(jugador1.length() > 10){
                        System.out.println("exceso de letras");
                        verificador = false;
                        break;
                    }
                
                for(int j = i+1; j < listJugadores.size()+1; j++){
                        if(j!=listJugadores.size()){
                        String jugador2 = listJugadores.get(j).getNombre();
                        if(jugador1.equals(jugador2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        } 
        return verificador;
    }


    public boolean verificadorNombresPlanetas(boolean verificador, ArrayList<Planetas> listPlanetas){
        if(verificador == true){
            for(int i = 0; i < listPlanetas.size(); i++){
                String nombrePlaneta = listPlanetas.get(i).getNombre();
                if(nombrePlaneta.length() > 3){
                    System.out.println("exceso de letras");
                    verificador = false;
                    break;
                } else {
                    for(int j = i+1; j < listPlanetas.size()+1; j++){
                        if(j!=listPlanetas.size()){
                            String nombrePlaneta2 = listPlanetas.get(j).getNombre();
                            if(nombrePlaneta.equals(nombrePlaneta2)){
                                System.out.println("Dos nombres son iguales");
                                verificador = false;
                                break;
                            }
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public boolean verificadorNombresPlanetasNeutrales(boolean verificador, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
        if(listNeutrales != null){
            for(int i = 0; i < listNeutrales.size(); i ++){
                String neutral1 = listNeutrales.get(i).getNombre();
                if(neutral1.length() > 3 ){
                    System.out.println("exceso de letras"); 
                    verificador = false;
                    break;
                }   
                for(int j = i+1; j < listNeutrales.size()+1; j++){
                    if(j!=listNeutrales.size()){
                        String neutral2 = listNeutrales.get(j).getNombre();
                        if(neutral1.equals(neutral2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        }
        return verificador;
    }

    public void creacionMapa(Juego misDatos, boolean verificador, JTextArea panelMensajes, String totalErroress){
        if(verificador == true){
            tablero.agregarPlanetasTablero(Integer.parseInt(misDatos.getMapa().getSize_filas()), Integer.parseInt(misDatos.getMapa().getSize_columnas()), misDatos.getJugadores(), misDatos.getPlanetas());
            if(!misDatos.getPlanetas().isEmpty()){
                verificador = false;
                totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                panelMensajes.setText(totalErroress);
            }
            for(int i = 0; i < misDatos.getJugadores().size(); i++){
                if(!misDatos.getJugadores().get(i).getPlanetas().isEmpty()){
                    verificador = false;
                    totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                    panelMensajes.setText(totalErroress);
                    break;
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosPlanetas(misDatos.getMapa(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Algun planeta esta situado en una posicion que no existe dentro del mapa\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosNeutrales(misDatos.getMapa(), misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Algun planeta neutral esta situado en una posicion que no existe dentro del mapa\n";
                    System.out.println("Algun planeta neutral esta situado en una posicion que no existe dentro del mapa");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPosPlanetas(misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErroress += "Dos planetas estan situados en la misma posicion\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionNeutralaNeutral(misDatos.getpNeutrales(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas neutrales estan situados en la misma posicion\n";
                    System.out.println("Dos planetas neutrales estan situados en la misma posicion");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPlanetasyNeutrales(misDatos.getpNeutrales(), misDatos.getJugadores(), verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas (normal y un neutral) estan situados en la misma posicion\n";
                    System.out.println("Dos planetas(normal y un neutral) estan situados en la misma posicion\n");
                }
            }
            if(verificador == true) {
                crearCuadriculaJuego(misDatos);
            } else { 
                panelMensajes.setText(totalErroress);
            }  
        }
        
    }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxCreacionMapa$actions {
  private final SintaxCreacionMapa parser;

  /** Constructor */
  CUP$SintaxCreacionMapa$actions(SintaxCreacionMapa parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxCreacionMapa$do_action(
    int                        CUP$SintaxCreacionMapa$act_num,
    java_cup.runtime.lr_parser CUP$SintaxCreacionMapa$parser,
    java.util.Stack            CUP$SintaxCreacionMapa$stack,
    int                        CUP$SintaxCreacionMapa$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxCreacionMapa$result;

      /* select the action based on the action number */
      switch (CUP$SintaxCreacionMapa$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ah ::= tipo DOS_PUNTOS HUMANO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ah ::= tipo DOS_PUNTOS DIFICIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ah ::= tipo DOS_PUNTOS FACIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // al ::= color DOS_PUNTOS COMILLAS COLOR COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setColor(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("al",41, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ai ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ai ::= COMILLAS ID COMILLAS ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ai ::= COMILLAS ID COMILLAS COMA ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ag ::= planetas DOS_PUNTOS AGRUPACION_A ai AGRUPACION_B 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetas(a); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ag",40, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // af ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Jugadores jugador = new Jugadores();  jugador.setNombre(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("af",39, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // q7 ::= error ae 
            {
              Jugadores RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo JUGADORES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // q7 ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { parser.totalErrores += "Sub-atributo color en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // q7 ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { parser.totalErrores += "Sub-atributo tipo en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // q7 ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { parser.totalErrores += "Sub-atributo planetas en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false);  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // q7 ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { parser.totalErrores += "Sub-atributo nombre en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ae ::= error ae 
            {
              Jugadores RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo JUGADORES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ae ::= 
            {
              Jugadores RESULT =null;
		 Jugadores jugador = new Jugadores(); jugador.setTodoCorrecto(true); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ae ::= COMA q7 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ae ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { parser.totalErrores += "Sub-atributo color en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ae ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { parser.totalErrores += "Sub-atributo tipo en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ae ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { parser.totalErrores += "Sub-atributo planetas en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false);  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ae ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre());  } else { parser.totalErrores += "Sub-atributo nombre en un campo JUGADORES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); System.out.println("erro"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ad ::= LLAVE_A ae LLAVE_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { if(a.getTodoCorrecto() == false) {  RESULT=null; } else {   ArrayList<Jugadores> misJugadores = new ArrayList<>(); a.setEnJuego("true"); a.setPlanetasConquistados(0);  a.setMisPlanetas(new ArrayList<>()); misJugadores.add(a); RESULT=misJugadores; } } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ad",49, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ad ::= LLAVE_A ae LLAVE_B COMA ad 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<Jugadores> e = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { if(e == null){ RESULT=null; } else {  if(a.getTodoCorrecto()==false){ RESULT=null; } else { a.setEnJuego("true"); a.setPlanetasConquistados(0);  a.setMisPlanetas(new ArrayList<>());  e.add(a); RESULT=e; } } } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ad",49, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("jug",48, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("jug",48, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // an ::= posY DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionY(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("an",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // am ::= posX DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionX(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("am",24, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ac ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPorcentajeMuertes(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ac",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ab ::= produccion DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setProduccion(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ab",30, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // aa ::= naves DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNaves(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("aa",29, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // z ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNombre(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("z",28, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // q5 ::= error y 
            {
              PlanetasNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // q5 ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false);  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // q5 ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // q5 ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n";  e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // q5 ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else {  parser.totalErrores += "Sub-atributo produccion en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false);  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // q5 ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { parser.totalErrores += "Sub-atributo naves en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n";  e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // q5 ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // y ::= error y 
            {
              PlanetasNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // y ::= 
            {
              PlanetasNeutrales RESULT =null;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setTodoCorrecto(true); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // y ::= COMA q5 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // y ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { parser.totalErrores += "Sub-atributo posicionY en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false);  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // y ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // y ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n";  e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // y ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else {  parser.totalErrores += "Sub-atributo produccion en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false);  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // y ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { parser.totalErrores += "Sub-atributo naves en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n";  e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // y ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre en un campo PLANETAS_NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // x ::= LLAVE_A y LLAVE_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { if(a.getTodoCorrecto() == false){ RESULT=null; } else {  ArrayList<PlanetasNeutrales> pNeutrales = new ArrayList<>(); pNeutrales.add(a); RESULT=pNeutrales;  } }  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("x",46, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // x ::= LLAVE_A y LLAVE_B COMA x 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<PlanetasNeutrales> e = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { if(e == null){ RESULT=null; } else { if(a.getTodoCorrecto() == false){ RESULT=null; } else {   e.add(a); RESULT=e; } } } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("x",46, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("pn",47, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("pn",47, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ak ::= posY DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionY(a.toString()); RESULT=planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ak",23, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // aj ::= posX DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionX(a.toString()); RESULT=planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("aj",22, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // w ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPorcentajeMuertes(a.toString());  RESULT = planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("w",21, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // v ::= produccion DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setProduccion(a.toString()); RESULT = planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("v",20, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // u ::= naves DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setNaves(a.toString()); RESULT = planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("u",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // t ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Planetas planetas = new Planetas(); planetas.setNombre(a.toString()); RESULT=planetas; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("t",16, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // q3 ::= error s 
            {
              Planetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // q3 ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { parser.totalErrores += "Sub-atributo posicionY de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // q3 ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // q3 ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // q3 ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; System.out.println("error"); } } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // q3 ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else {  parser.totalErrores += "Sub-atributo naves de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // q3 ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre de un campo PLANETAS setenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // s ::= error s 
            {
              Planetas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo PLANETAS definido de forma incorrecta\n";   RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // s ::= 
            {
              Planetas RESULT =null;
		  Planetas planeta = new Planetas();  planeta.setTodoCorrecto(true);  RESULT=planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s ::= COMA q3 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // s ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { parser.totalErrores += "Sub-atributo posicionY de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // s ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { parser.totalErrores += "Sub-atributo posicionX de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // s ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { parser.totalErrores += "Sub-atributo porcentajeMuertes de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // s ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; System.out.println("error"); } } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else {  parser.totalErrores += "Sub-atributo naves de un campo PLANETAS sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // s ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { parser.totalErrores += "Sub-atributo nombre de un campo PLANETAS setenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // r ::= LLAVE_A s LLAVE_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else {  if(a.getTodoCorrecto()==false){ RESULT=null; } else {    ArrayList<Planetas> misPlanetas = new ArrayList<>(); misPlanetas.add(a); RESULT=misPlanetas; } }   
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("r",44, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // r ::= LLAVE_A s LLAVE_B COMA r 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<Planetas> e = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else { if(e == null){ RESULT=null; } else {  if(a.getTodoCorrecto()==false){ RESULT=null;   } else {  e.add(a); RESULT=e; } } } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("r",44, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("p",45, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("p",45, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // k ::= finalizacion DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setFinalizacion(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("k",14, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // o ::= produccion DOS_PUNTOS ENTERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setProduccion(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("o",34, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // n ::= mostrarEstadisticas DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("n",33, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("n",33, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // m ::= mostrarNaves DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("m",32, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // m ::= mostrarNaves DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("m",32, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // q8 ::= error l 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en sub-campo NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // q8 ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // q8 ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { parser.totalErrores += "Sub-atributo mostrarEstadisticas del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // q8 ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { parser.totalErrores += "Sub-atributo mostrarNaves del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // l ::= error l 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en sub-campo NEUTRALES definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l ::= 
            {
              MapaPNeutrales RESULT =null;
		 MapaPNeutrales neutral = new MapaPNeutrales(); neutral.setTodoCorrecto(true); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l ::= COMA q8 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // l ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { parser.totalErrores += "Sub-atributo produccion del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { parser.totalErrores += "Sub-atributo mostrarEstadisticas del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // l ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { parser.totalErrores += "Sub-atributo mostrarNaves del campo NEUTRALES sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Mapa mapa = new Mapa(); if(a.getMostrarNaves()==null || a.getMostrarEstadisticas()==null || a.getProduccion() == null) {System.out.println("ERROR, falta de atributo");} else { if(a.getTodoCorrecto()==false){ mapa.setTodoCorrecto(false); } else { mapa.setTodoCorrecto(true); } mapa.setMapaPNeutral(a); RESULT=mapa; }     
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j2",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // i ::= acumular DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("i",11, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // i ::= acumular DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("i",11, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // h ::= mapaCiego DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("h",10, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // h ::= mapaCiego DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("h",10, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // g ::= pNeutrales DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setPlanetasNeutrales(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("g",6, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // d ::= id DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  Mapa mapa = new Mapa(); mapa.setId(a.toString());  RESULT=mapa;                    /*if(parser.mapita.getId()==null){ parser.mapita.setId(a.toString());  } else { parser.interruptor = false; parser.syntax_error(parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT)); parser.totalErrores += "Atributo ID sentenciado mas de una vez dentro de MAPA\n";    }*/ 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("d",4, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // j ::= columnas DOS_PUNTOS ENTERO COMA filas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa;    
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j",9, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // j ::= filas DOS_PUNTOS ENTERO COMA columnas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j",9, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // f ::= alAzar DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // f ::= alAzar DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // e ::= size DOS_PUNTOS LLAVE_A j LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // q ::= error c 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo MAPAS definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // q ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { parser.totalErrores += "Sub-atributo finalizacion del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // q ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { parser.totalErrores += "Sub-atributo NEUTRALES del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } e.setTodoCorrecto(a.getTodoCorrecto()); RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // q ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { parser.totalErrores += "Sub-atributo acumular del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { parser.totalErrores += "Sub-atributo mapaCiego del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { parser.totalErrores += "Sub-atributo alAzar del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // q ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { parser.totalErrores += "Sub-atributos columnas/filas del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e1.setTodoCorrecto(false); } } RESULT=e1; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else {  parser.totalErrores += "Sub-atributo planetasNeutrales del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // q ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { parser.totalErrores += "Sub-atributo id del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }   } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c ::= error c 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo en campo MAPAS definido de forma incorrecta\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c ::= 
            {
              Mapa RESULT =null;
		 Mapa mapita = new Mapa(); mapita.setTodoCorrecto(true); RESULT=mapita; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c ::= COMA q 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { parser.totalErrores += "Sub-atributo finalizacion del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { parser.totalErrores += "Sub-atributo NEUTRALES del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } e.setTodoCorrecto(a.getTodoCorrecto()); RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { parser.totalErrores += "Sub-atributo acumular del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getMapaCiego()); } else { parser.totalErrores += "Sub-atributo mapaCiego del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { parser.totalErrores += "Sub-atributo alAzar del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { parser.totalErrores += "Sub-atributos columnas/filas del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e1.setTodoCorrecto(false); } } RESULT=e1; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else {  parser.totalErrores += "Sub-atributo planetasNeutrales del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { parser.totalErrores += "Sub-atributo id del campo MAPA sentenciado mas de una vez. Linea: "+aleft+" Columna: "+aright+"\n"; e.setTodoCorrecto(false); }   } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b ::= MAPA DOS_PUNTOS LLAVE_A c LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  if(a.getTodoCorrecto()==false){ RESULT=null; } else {   RESULT=a; }  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("b",15, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // q2 ::= error juego 
            {
              Juego RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo principal mal definido\n"; RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // q2 ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { parser.totalErrores += "Atributo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // q2 ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { parser.totalErrores += "Atributo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // q2 ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { parser.totalErrores += "Atributo PLANETAS sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // q2 ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { parser.totalErrores += "Atributo MAPA sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // juego ::= error juego 
            {
              Juego RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 parser.totalErrores += "atributo principal mal definido\n"; RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // juego ::= 
            {
              Juego RESULT =null;
		 RESULT=new Juego(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // juego ::= COMA q2 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // juego ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { parser.totalErrores += "Atributo JUGADORES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // juego ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){e.setpNeutrales(a); System.out.println("agregox2"); } else { parser.totalErrores += "Atributo PLANETAS_NEUTRALES sentenciado mas de una vez\n"; System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // juego ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a); System.out.println("agrego"); } else {  parser.totalErrores += "Atributo PLANETAS sentenciado mas de una vez\n";  System.out.println("erroasdfr"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // juego ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { parser.totalErrores += "Atributo MAPA sentenciado mas de una vez\n";  } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A juego LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  if(a.getMapa()==null || a.getpNeutrales()==null || a.getJugadores()==null  || a.getPlanetas()==null){    parser.panelMensajes.setText(parser.totalErrores);      } else { boolean interruptor = true;  interruptor = parser.verificadorNombresJugadores(a.getJugadores(), interruptor);  interruptor = parser.verificadorNombresPlanetas(interruptor, a.getPlanetas());  interruptor = parser.verificadorNombresPlanetasNeutrales(interruptor, a.getpNeutrales());  parser.misDatos = a;  parser.datosJuego.add(a);   parser.panelJuego.setVisible(true);   parser.creacionMapa(parser.datosJuego.get(0), interruptor, parser.panelMensajes, parser.totalErrores);               } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		RESULT = start_val;
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxCreacionMapa$parser.done_parsing();
          return CUP$SintaxCreacionMapa$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

