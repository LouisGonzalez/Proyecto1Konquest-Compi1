
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 04 09:43:57 CST 2020
//----------------------------------------------------

package gramaticas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 04 09:43:57 CST 2020
  */
public class SintaxCreacionMapa extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxCreacionMapa() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxCreacionMapa(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxCreacionMapa(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\006\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\005\010\000\002\006\010\000\002\013" +
    "\011\000\002\013\011\000\002\007\006\000\002\007\006" +
    "\000\002\010\006\000\002\011\006\000\002\011\006\000" +
    "\002\012\006\000\002\012\006\000\002\014\006\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\004\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\017\006\000\002\017\006\000" +
    "\002\020\006\000\002\020\006\000\002\021\006\000\002" +
    "\015\006\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\022\006\000\002\022\006" +
    "\000\002\024\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\004\000\002" +
    "\025\005\000\002\025\004\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\026\010" +
    "\000\002\027\006\000\002\030\006\000\002\031\006\000" +
    "\002\046\006\000\002\046\006\000\002\032\004\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\034\010\000\002\035\006\000\002" +
    "\036\006\000\002\037\006\000\002\047\006\000\002\047" +
    "\006\000\002\040\004\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\004\000\002\041\005\000" +
    "\002\041\004\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\042\010\000\002\043\006\000\002\045" +
    "\007\000\002\045\006\000\002\045\004\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\055\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\010\006\007\007\006\013\004\001\002\000" +
    "\012\016\365\032\012\036\015\037\013\001\002\000\004" +
    "\002\362\001\002\000\004\002\ufffb\001\002\000\012\016" +
    "\016\032\012\036\015\037\013\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffd\001\002\000\004\012\314\001" +
    "\002\000\004\012\240\001\002\000\004\002\uffff\001\002" +
    "\000\004\012\170\001\002\000\004\012\017\001\002\000" +
    "\004\006\020\001\002\000\026\007\033\013\024\017\027" +
    "\020\026\021\023\022\042\023\025\024\043\025\030\031" +
    "\022\001\002\000\004\002\ufff3\001\002\000\004\012\165" +
    "\001\002\000\004\012\160\001\002\000\022\017\027\020" +
    "\026\021\023\022\042\023\025\024\043\025\030\031\022" +
    "\001\002\000\004\012\142\001\002\000\004\012\117\001" +
    "\002\000\004\012\112\001\002\000\004\012\055\001\002" +
    "\000\004\002\ufff2\001\002\000\004\002\ufff4\001\002\000" +
    "\010\006\007\007\006\013\004\001\002\000\004\002\ufff5" +
    "\001\002\000\004\002\ufff6\001\002\000\004\002\ufff7\001" +
    "\002\000\004\002\ufff8\001\002\000\004\002\ufff9\001\002" +
    "\000\004\002\000\001\002\000\004\012\051\001\002\000" +
    "\004\012\044\001\002\000\006\004\046\005\045\001\002" +
    "\000\026\007\033\013\024\017\027\020\026\021\023\022" +
    "\042\023\025\024\043\025\030\031\022\001\002\000\026" +
    "\007\033\013\024\017\027\020\026\021\023\022\042\023" +
    "\025\024\043\025\030\031\022\001\002\000\004\002\uffde" +
    "\001\002\000\004\002\uffdd\001\002\000\004\045\052\001" +
    "\002\000\026\007\033\013\024\017\027\020\026\021\023" +
    "\022\042\023\025\024\043\025\030\031\022\001\002\000" +
    "\004\002\uffe1\001\002\000\004\002\ufff0\001\002\000\004" +
    "\006\056\001\002\000\014\007\067\013\057\026\065\027" +
    "\060\030\066\001\002\000\010\026\065\027\060\030\066" +
    "\001\002\000\004\012\101\001\002\000\004\002\uffd9\001" +
    "\002\000\004\002\uffda\001\002\000\004\002\uffdb\001\002" +
    "\000\004\002\uffdc\001\002\000\004\012\074\001\002\000" +
    "\004\012\071\001\002\000\026\007\033\013\024\017\027" +
    "\020\026\021\023\022\042\023\025\024\043\025\030\031" +
    "\022\001\002\000\004\002\uffd7\001\002\000\004\045\072" +
    "\001\002\000\014\007\067\013\057\026\065\027\060\030" +
    "\066\001\002\000\004\002\uffcf\001\002\000\006\004\076" +
    "\005\075\001\002\000\014\007\067\013\057\026\065\027" +
    "\060\030\066\001\002\000\014\007\067\013\057\026\065" +
    "\027\060\030\066\001\002\000\004\002\uffd3\001\002\000" +
    "\004\002\uffd2\001\002\000\006\004\103\005\102\001\002" +
    "\000\014\007\067\013\057\026\065\027\060\030\066\001" +
    "\002\000\014\007\067\013\057\026\065\027\060\030\066" +
    "\001\002\000\004\002\uffd1\001\002\000\004\002\uffd0\001" +
    "\002\000\004\002\uffd6\001\002\000\004\002\uffd8\001\002" +
    "\000\004\002\uffd4\001\002\000\004\002\uffd5\001\002\000" +
    "\004\015\113\001\002\000\004\047\114\001\002\000\004" +
    "\015\115\001\002\000\026\007\033\013\024\017\027\020" +
    "\026\021\023\022\042\023\025\024\043\025\030\031\022" +
    "\001\002\000\004\002\uffe7\001\002\000\004\006\120\001" +
    "\002\000\006\050\123\051\122\001\002\000\004\007\140" +
    "\001\002\000\004\012\132\001\002\000\004\012\124\001" +
    "\002\000\004\045\125\001\002\000\004\013\126\001\002" +
    "\000\004\051\127\001\002\000\004\012\130\001\002\000" +
    "\004\045\131\001\002\000\004\007\uffe5\001\002\000\004" +
    "\045\133\001\002\000\004\013\134\001\002\000\004\050" +
    "\135\001\002\000\004\012\136\001\002\000\004\045\137" +
    "\001\002\000\004\007\uffe4\001\002\000\026\007\033\013" +
    "\024\017\027\020\026\021\023\022\042\023\025\024\043" +
    "\025\030\031\022\001\002\000\004\002\uffe6\001\002\000" +
    "\006\004\144\005\143\001\002\000\026\007\033\013\024" +
    "\017\027\020\026\021\023\022\042\023\025\024\043\025" +
    "\030\031\022\001\002\000\026\007\033\013\024\017\027" +
    "\020\026\021\023\022\042\023\025\024\043\025\030\031" +
    "\022\001\002\000\004\002\uffe0\001\002\000\004\002\uffdf" +
    "\001\002\000\004\002\ufff1\001\002\000\004\002\uffe8\001" +
    "\002\000\004\002\uffea\001\002\000\004\002\uffeb\001\002" +
    "\000\004\002\uffec\001\002\000\004\002\uffed\001\002\000" +
    "\004\002\uffee\001\002\000\004\002\uffef\001\002\000\004" +
    "\002\uffe9\001\002\000\006\004\162\005\161\001\002\000" +
    "\026\007\033\013\024\017\027\020\026\021\023\022\042" +
    "\023\025\024\043\025\030\031\022\001\002\000\026\007" +
    "\033\013\024\017\027\020\026\021\023\022\042\023\025" +
    "\024\043\025\030\031\022\001\002\000\004\002\uffe3\001" +
    "\002\000\004\002\uffe2\001\002\000\004\045\166\001\002" +
    "\000\026\007\033\013\024\017\027\020\026\021\023\022" +
    "\042\023\025\024\043\025\030\031\022\001\002\000\004" +
    "\002\uffce\001\002\000\004\010\171\001\002\000\006\006" +
    "\175\011\173\001\002\000\004\002\uffb7\001\002\000\010" +
    "\006\007\007\006\013\004\001\002\000\004\002\uffb6\001" +
    "\002\000\016\007\201\013\177\030\200\033\205\034\202" +
    "\035\207\001\002\000\004\002\uffb3\001\002\000\012\030" +
    "\200\033\205\034\202\035\207\001\002\000\004\012\227" +
    "\001\002\000\006\011\173\013\224\001\002\000\004\012" +
    "\221\001\002\000\004\002\uffb4\001\002\000\004\002\uffb5" +
    "\001\002\000\004\012\214\001\002\000\004\002\uffb1\001" +
    "\002\000\004\012\211\001\002\000\004\002\uffb2\001\002" +
    "\000\004\046\212\001\002\000\016\007\201\013\177\030" +
    "\200\033\205\034\202\035\207\001\002\000\004\002\uffa6" +
    "\001\002\000\004\015\215\001\002\000\004\047\216\001" +
    "\002\000\004\015\217\001\002\000\016\007\201\013\177" +
    "\030\200\033\205\034\202\035\207\001\002\000\004\002" +
    "\uffa9\001\002\000\004\045\222\001\002\000\016\007\201" +
    "\013\177\030\200\033\205\034\202\035\207\001\002\000" +
    "\004\002\uffa8\001\002\000\004\006\175\001\002\000\004" +
    "\002\uffae\001\002\000\004\002\uffaf\001\002\000\004\045" +
    "\230\001\002\000\016\007\201\013\177\030\200\033\205" +
    "\034\202\035\207\001\002\000\004\002\uffa7\001\002\000" +
    "\004\002\uffac\001\002\000\004\002\uffb0\001\002\000\004" +
    "\002\uffad\001\002\000\004\002\uffaa\001\002\000\004\002" +
    "\uffab\001\002\000\004\002\uff91\001\002\000\004\010\241" +
    "\001\002\000\006\006\244\011\173\001\002\000\004\002" +
    "\uffa5\001\002\000\004\002\uffa4\001\002\000\014\007\246" +
    "\013\245\033\255\040\247\041\251\001\002\000\010\033" +
    "\255\040\247\041\251\001\002\000\006\011\173\013\305" +
    "\001\002\000\004\012\272\001\002\000\004\002\uffa0\001" +
    "\002\000\004\012\263\001\002\000\004\002\uffa1\001\002" +
    "\000\004\002\uffa2\001\002\000\004\002\uffa3\001\002\000" +
    "\004\012\256\001\002\000\004\015\257\001\002\000\004" +
    "\047\260\001\002\000\004\015\261\001\002\000\014\007" +
    "\246\013\245\033\255\040\247\041\251\001\002\000\004" +
    "\002\uff99\001\002\000\010\042\264\043\265\044\266\001" +
    "\002\000\014\007\246\013\245\033\255\040\247\041\251" +
    "\001\002\000\014\007\246\013\245\033\255\040\247\041" +
    "\251\001\002\000\014\007\246\013\245\033\255\040\247" +
    "\041\251\001\002\000\004\002\uff94\001\002\000\004\002" +
    "\uff93\001\002\000\004\002\uff92\001\002\000\004\010\273" +
    "\001\002\000\006\011\275\015\276\001\002\000\004\002" +
    "\uff98\001\002\000\014\007\246\013\245\033\255\040\247" +
    "\041\251\001\002\000\004\047\277\001\002\000\004\015" +
    "\300\001\002\000\010\011\275\013\302\015\276\001\002" +
    "\000\004\002\uff96\001\002\000\006\011\275\015\276\001" +
    "\002\000\004\002\uff97\001\002\000\004\002\uff95\001\002" +
    "\000\004\006\244\001\002\000\004\002\uff9d\001\002\000" +
    "\004\002\uff9e\001\002\000\004\002\uff9a\001\002\000\004" +
    "\002\uff9b\001\002\000\004\002\uff9c\001\002\000\004\002" +
    "\uff9f\001\002\000\004\010\315\001\002\000\006\006\320" +
    "\011\173\001\002\000\004\002\uffc9\001\002\000\004\002" +
    "\uffc8\001\002\000\016\007\323\013\321\030\322\033\327" +
    "\034\324\035\331\001\002\000\012\030\322\033\327\034" +
    "\324\035\331\001\002\000\004\012\352\001\002\000\006" +
    "\011\173\013\347\001\002\000\004\012\344\001\002\000" +
    "\004\002\uffc3\001\002\000\004\002\uffc4\001\002\000\004" +
    "\012\337\001\002\000\004\002\uffc5\001\002\000\004\012" +
    "\334\001\002\000\004\002\uffc6\001\002\000\004\002\uffc7" +
    "\001\002\000\004\046\335\001\002\000\016\007\323\013" +
    "\321\030\322\033\327\034\324\035\331\001\002\000\004" +
    "\002\uffb8\001\002\000\004\015\340\001\002\000\004\047" +
    "\341\001\002\000\004\015\342\001\002\000\016\007\323" +
    "\013\321\030\322\033\327\034\324\035\331\001\002\000" +
    "\004\002\uffbb\001\002\000\004\045\345\001\002\000\016" +
    "\007\323\013\321\030\322\033\327\034\324\035\331\001" +
    "\002\000\004\002\uffba\001\002\000\004\006\320\001\002" +
    "\000\004\002\uffc0\001\002\000\004\002\uffc1\001\002\000" +
    "\004\045\353\001\002\000\016\007\323\013\321\030\322" +
    "\033\327\034\324\035\331\001\002\000\004\002\uffb9\001" +
    "\002\000\004\002\uffc2\001\002\000\004\002\uffbc\001\002" +
    "\000\004\002\uffbd\001\002\000\004\002\uffbe\001\002\000" +
    "\004\002\uffbf\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffcc\001\002\000\004\002\uffcb\001\002\000\004\012" +
    "\371\001\002\000\004\002\ufffc\001\002\000\004\002\uffcd" +
    "\001\002\000\004\002\uffca\001\002\000\004\006\372\001" +
    "\002\000\026\007\033\013\024\017\027\020\026\021\023" +
    "\022\042\023\025\024\043\025\030\031\022\001\002\000" +
    "\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\002\004\001\001\000\014\003\366\022" +
    "\362\046\363\047\367\050\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\013\046\007\047\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\040\005\037" +
    "\006\036\007\035\010\034\011\033\012\031\014\020\015" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\155\006\154\007\153\010\152\011" +
    "\151\012\150\014\156\015\147\023\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\047\005\037\006\036\007\035\010\034\011\033" +
    "\012\031\014\020\015\030\001\001\000\024\004\046\005" +
    "\037\006\036\007\035\010\034\011\033\012\031\014\020" +
    "\015\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\052\005\037\006\036\007\035" +
    "\010\034\011\033\012\031\014\020\015\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\063\017\062\020\061\021\060\001\001\000\012\017" +
    "\105\020\110\021\107\054\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\067\005\037\006\036\007\035\010\034\011\033\012" +
    "\031\014\020\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\072\017\062\020\061\021\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\077" +
    "\017\062\020\061\021\060\001\001\000\012\016\076\017" +
    "\062\020\061\021\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\104\017\062\020" +
    "\061\021\060\001\001\000\012\016\103\017\062\020\061" +
    "\021\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\115\005\037\006\036\007\035\010\034" +
    "\011\033\012\031\014\020\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\140\005\037\006" +
    "\036\007\035\010\034\011\033\012\031\014\020\015\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\145\005\037\006\036\007\035\010\034\011\033\012\031" +
    "\014\020\015\030\001\001\000\024\004\144\005\037\006" +
    "\036\007\035\010\034\011\033\012\031\014\020\015\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\163\005\037\006\036\007\035\010\034\011\033\012" +
    "\031\014\020\015\030\001\001\000\024\004\162\005\037" +
    "\006\036\007\035\010\034\011\033\012\031\014\020\015" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\166\005\037\006\036\007\035\010" +
    "\034\011\033\012\031\014\020\015\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\171\055\173\001" +
    "\001\000\002\001\001\000\004\002\236\001\001\000\002" +
    "\001\001\000\014\033\203\034\202\035\175\036\207\037" +
    "\205\001\001\000\002\001\001\000\014\034\233\035\231" +
    "\036\235\037\234\052\232\001\001\000\002\001\001\000" +
    "\004\055\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\212\034\202\035\175\036\207\037\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\217\034\202\035\175\036\207\037" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\222\034\202\035\175\036\207\037\205\001\001\000" +
    "\002\001\001\000\004\032\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\230\034" +
    "\202\035\175\036\207\037\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\241\055\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\253\042\252\043\251" +
    "\044\247\001\001\000\012\042\311\043\310\044\307\053" +
    "\312\001\001\000\004\055\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\261\042\252\043\251\044\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\041\270\042\252\043\251\044" +
    "\247\001\001\000\012\041\267\042\252\043\251\044\247" +
    "\001\001\000\012\041\266\042\252\043\251\044\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\273\001\001\000\002\001" +
    "\001\000\012\041\303\042\252\043\251\044\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\300\001" +
    "\001\000\002\001\001\000\004\045\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\315\055\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\332\026\331\027\327\030" +
    "\325\031\324\001\001\000\014\026\360\027\357\030\356" +
    "\031\355\051\354\001\001\000\002\001\001\000\004\055" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\335\026\331\027\327\030\325\031\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\342\026\331\027\327\030" +
    "\325\031\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\345\026\331\027\327\030\325\031\324\001" +
    "\001\000\002\001\001\000\004\024\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\353\026\331\027\327\030\325\031\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\372\005\037\006\036\007\035\010" +
    "\034\011\033\012\031\014\020\015\030\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxCreacionMapa$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxCreacionMapa$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxCreacionMapa$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static int cont = 0;
    public static boolean interruptor = true;
    ArrayList<ArchivoConfiguracion> listArchivos;
    public int contadorPlanetas = 0;
    public int contPlanetasNeutrales = 0;
    public int contJugadores = 0;
    
    public SintaxCreacionMapa(AnalizadorLexico lex, ArrayList<ArchivoConfiguracion> listArchivos){
        super(lex);
        this.listArchivos = listArchivos;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public static boolean getInterruptor(){
        return interruptor;
    }   
    
    public static boolean verificador(){
        cont++;
        System.out.println(cont+" yo soy el contador");
        if(cont == 2){

            return true;
        } else {
            return false;
        }
    }

    public static boolean comprobador(boolean interruptor, ArrayList<ArchivoConfiguracion> listArchivos, Object atributo, String nombreAtributo, String tipo, int no){
        if(interruptor == true){
            if(listArchivos.isEmpty()){
                ArchivoConfiguracion elemento = new ArchivoConfiguracion();
                elemento.setTipo(tipo); 
                elemento.setNumero(no);
                elemento.setNombreAtributo(nombreAtributo);
                elemento.setAtributo(atributo);
                listArchivos.add(elemento);
            } else {
                if(atributo == "MAPA"){
                    for(int i = 0; i < listArchivos.size(); i++){
                        if(nombreAtributo == listArchivos.get(i).getNombreAtributo()){
                            interruptor = false;
                            break;
                        }
                    }   
                } else {
                    for(int i = 0; i < listArchivos.size(); i++){
                        if(nombreAtributo == listArchivos.get(i).getNombreAtributo() && no == listArchivos.get(i).getNumero() && tipo == listArchivos.get(i).getTipo()){
                            interruptor = false;    
                            break;
                        }
                    }
                }
                if(interruptor == true){
                    ArchivoConfiguracion elemento = new ArchivoConfiguracion();
                    elemento.setTipo(tipo); 
                    elemento.setNumero(no);
                    elemento.setNombreAtributo(nombreAtributo);
                    elemento.setAtributo(atributo);
                    listArchivos.add(elemento);
                }
            }
        } 

        return interruptor;
    }
    

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxCreacionMapa$actions {
  private final SintaxCreacionMapa parser;

  /** Constructor */
  CUP$SintaxCreacionMapa$actions(SintaxCreacionMapa parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxCreacionMapa$do_action(
    int                        CUP$SintaxCreacionMapa$act_num,
    java_cup.runtime.lr_parser CUP$SintaxCreacionMapa$parser,
    java.util.Stack            CUP$SintaxCreacionMapa$stack,
    int                        CUP$SintaxCreacionMapa$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxCreacionMapa$result;

      /* select the action based on the action number */
      switch (CUP$SintaxCreacionMapa$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cierre ::= AGRUPACION_B a 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("cierre",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ah ::= tipo DOS_PUNTOS HUMANO ae 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",34, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ah ::= tipo DOS_PUNTOS DIFICIL ae 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",34, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ah ::= tipo DOS_PUNTOS FACIL ae 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",34, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ai ::= AGRUPACION_B ae 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ai ::= COMILLAS ID COMILLAS ai 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ai ::= COMILLAS ID COMILLAS COMA ai 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ag ::= planetas DOS_PUNTOS AGRUPACION_A ai 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ag",33, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // af ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS ae 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("af",32, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // q7 ::= ah 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",41, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // q7 ::= ag 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",41, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // q7 ::= af 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",41, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ae ::= LLAVE_B cierre 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ae ::= LLAVE_B COMA ad 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ae ::= COMA q7 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ae ::= ah 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ae ::= ag 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ae ::= af 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ad ::= LLAVE_A ae 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ad",30, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A cierre 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("jug",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("jug",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ac ::= porcMuertes DOS_PUNTOS DECIMAL y 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ac",29, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ab ::= produccion DOS_PUNTOS ENTERO y 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ab",28, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // aa ::= naves DOS_PUNTOS ENTERO y 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("aa",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // z ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS y 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("z",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // q5 ::= ac 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",40, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // q5 ::= ab 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",40, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // q5 ::= aa 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",40, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // q5 ::= z 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",40, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // y ::= LLAVE_B cierre 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // y ::= LLAVE_B COMA x 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // y ::= COMA q5 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // y ::= ac 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // y ::= ab 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // y ::= aa 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // y ::= z 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // x ::= LLAVE_A y 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("x",24, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A cierre 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("pn",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("pn",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // w ::= porcMuertes DOS_PUNTOS DECIMAL s 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "porcMuertes", "PLANETAS", parser.contadorPlanetas); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("w",23, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // v ::= produccion DOS_PUNTOS ENTERO s 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "produccion", "PLANETAS", parser.contadorPlanetas); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("v",22, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // u ::= naves DOS_PUNTOS ENTERO s 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "naves", "PLANETAS", parser.contadorPlanetas); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("u",21, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // t ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS s 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "nombre", "PLANETAS", parser.contadorPlanetas); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("t",20, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // q3 ::= w 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",39, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // q3 ::= v 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",39, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // q3 ::= u 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",39, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // q3 ::= t 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",39, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // s ::= LLAVE_B cierre 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s ::= LLAVE_B COMA r 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // s ::= COMA q3 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // s ::= w 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // s ::= v 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // s ::= u 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // s ::= t 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // r ::= LLAVE_A s 
            {
              Object RESULT =null;
		 parser.contadorPlanetas++; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("r",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A cierre 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("p",16, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("p",16, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // q2 ::= jug 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // q2 ::= pn 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // q2 ::= p 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // q2 ::= b 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // k ::= finalizacion DOS_PUNTOS ENTERO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "finalizacion", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("k",11, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // o ::= produccion DOS_PUNTOS ENTERO l 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "produccion", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("o",15, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // n ::= mostrarEstadisticas DOS_PUNTOS FALSO l 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "mostrarEstadisticas", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("n",14, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO l 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "mostrarEstadisticas", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("n",14, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // m ::= mostrarNaves DOS_PUNTOS FALSO l 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "mostrarNaves", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("m",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // m ::= mostrarNaves DOS_PUNTOS VERDADERO l 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "mostrarNaves", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("m",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // q8 ::= o 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // q8 ::= n 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // q8 ::= m 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // l ::= LLAVE_B c 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // l ::= COMA q8 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // l ::= o 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // l ::= n 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l ::= m 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j2",10, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // i ::= acumular DOS_PUNTOS FALSO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "acumular", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("i",8, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // i ::= acumular DOS_PUNTOS VERDADERO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "acumular", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("i",8, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // h ::= mapaCiego DOS_PUNTOS FALSO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "mapaCiego", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("h",7, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // h ::= mapaCiego DOS_PUNTOS VERDADERO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "mapaCiego", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("h",7, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // g ::= pNeutrales DOS_PUNTOS ENTERO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "pNeutrales", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("g",6, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // f ::= alAzar DOS_PUNTOS FALSO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "alAzar", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // f ::= alAzar DOS_PUNTOS VERDADERO c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "alAzar", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // j ::= columnas DOS_PUNTOS ENTERO COMA filas DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		  parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "filas", "MAPA", 1);   parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, b, "columnas", "MAPA", 1);     
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j",9, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // j ::= filas DOS_PUNTOS ENTERO COMA columnas DOS_PUNTOS ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		  parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "filas", "MAPA", 1);   parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, b, "columnas", "MAPA", 1);     
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j",9, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // e ::= size DOS_PUNTOS LLAVE_A j LLAVE_B c 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // d ::= id DOS_PUNTOS COMILLAS ID COMILLAS c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).value;
		 parser.interruptor = parser.comprobador(parser.interruptor, parser.listArchivos, a, "id", "MAPA", 1); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // q ::= k 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // q ::= j2 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // q ::= i 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // q ::= h 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // q ::= g 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // q ::= f 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // q ::= e 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // q ::= d 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= LLAVE_B a 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= COMA q 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= k 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // c ::= j2 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // c ::= i 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // c ::= h 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // c ::= g 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c ::= f 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c ::= e 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // c ::= d 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // b ::= MAPA DOS_PUNTOS LLAVE_A c 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // a ::= LLAVE_B 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // a ::= COMA q2 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // a ::= LLAVE_A jug 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // a ::= LLAVE_A pn 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= LLAVE_A p 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A MAPA DOS_PUNTOS LLAVE_A c 
            {
              Object RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		RESULT = start_val;
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxCreacionMapa$parser.done_parsing();
          return CUP$SintaxCreacionMapa$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

