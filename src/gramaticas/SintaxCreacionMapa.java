
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 13 22:13:28 CST 2020
//----------------------------------------------------

package gramaticas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 13 22:13:28 CST 2020
  */
public class SintaxCreacionMapa extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxCreacionMapa() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxCreacionMapa(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxCreacionMapa(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\021\006\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\011\007" +
    "\000\002\012\005\000\002\012\005\000\002\013\011\000" +
    "\002\013\011\000\002\006\007\000\002\010\005\000\002" +
    "\014\005\000\002\014\005\000\002\015\005\000\002\015" +
    "\005\000\002\016\007\000\002\045\004\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\045\002\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\042\005\000\002\042\005\000\002\043\005\000\002\043" +
    "\005\000\002\044\005\000\002\020\005\000\002\057\007" +
    "\000\002\057\006\000\002\056\007\000\002\056\005\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\002\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\022\007\000\002\025\005\000\002" +
    "\026\005\000\002\027\005\000\002\030\005\000\002\031" +
    "\005\000\002\061\007\000\002\061\006\000\002\060\007" +
    "\000\002\060\005\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\002\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\036\007\000" +
    "\002\037\005\000\002\040\005\000\002\041\005\000\002" +
    "\032\005\000\002\033\005\000\002\062\007\000\002\062" +
    "\006\000\002\063\007\000\002\063\005\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\002\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\051" +
    "\007\000\002\052\007\000\002\055\007\000\002\055\006" +
    "\000\002\055\002\000\002\053\007\000\002\054\005\000" +
    "\002\054\005\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\006\005\001\002\000\004\002\u0132\001" +
    "\002\000\016\007\ufffa\013\006\016\013\032\007\036\011" +
    "\037\015\001\002\000\012\016\013\032\007\036\011\037" +
    "\015\001\002\000\004\012\361\001\002\000\016\007\ufffa" +
    "\013\006\016\013\032\007\036\011\037\015\001\002\000" +
    "\004\012\270\001\002\000\016\007\ufffa\013\006\016\013" +
    "\032\007\036\011\037\015\001\002\000\004\012\111\001" +
    "\002\000\004\007\110\001\002\000\004\012\022\001\002" +
    "\000\016\007\ufffa\013\006\016\013\032\007\036\011\037" +
    "\015\001\002\000\016\007\ufffa\013\006\016\013\032\007" +
    "\036\011\037\015\001\002\000\004\007\ufffc\001\002\000" +
    "\004\007\uffff\001\002\000\004\010\023\001\002\000\006" +
    "\006\026\011\025\001\002\000\004\011\107\001\002\000" +
    "\016\007\uff97\013\uff97\016\uff97\032\uff97\036\uff97\037\uff97" +
    "\001\002\000\016\007\uff8f\013\027\033\040\040\032\041" +
    "\035\052\030\001\002\000\012\033\040\040\032\041\035" +
    "\052\030\001\002\000\004\012\072\001\002\000\016\007" +
    "\uff8f\013\027\033\040\040\032\041\035\052\030\001\002" +
    "\000\004\012\057\001\002\000\016\007\uff8f\013\027\033" +
    "\040\040\032\041\035\052\030\001\002\000\016\007\uff8f" +
    "\013\027\033\040\040\032\041\035\052\030\001\002\000" +
    "\004\012\051\001\002\000\016\007\uff8f\013\027\033\040" +
    "\040\032\041\035\052\030\001\002\000\004\007\045\001" +
    "\002\000\004\012\041\001\002\000\004\015\042\001\002" +
    "\000\004\047\043\001\002\000\004\015\044\001\002\000" +
    "\016\007\uff8a\013\uff8a\033\uff8a\040\uff8a\041\uff8a\052\uff8a" +
    "\001\002\000\006\011\uff95\013\046\001\002\000\004\006" +
    "\026\001\002\000\004\011\uff96\001\002\000\004\007\uff94" +
    "\001\002\000\010\042\052\043\053\044\054\001\002\000" +
    "\016\007\uff82\013\uff82\033\uff82\040\uff82\041\uff82\052\uff82" +
    "\001\002\000\016\007\uff83\013\uff83\033\uff83\040\uff83\041" +
    "\uff83\052\uff83\001\002\000\016\007\uff84\013\uff84\033\uff84" +
    "\040\uff84\041\uff84\052\uff84\001\002\000\004\007\uff93\001" +
    "\002\000\004\007\uff92\001\002\000\004\010\060\001\002" +
    "\000\006\011\uff86\015\062\001\002\000\004\011\070\001" +
    "\002\000\004\047\063\001\002\000\004\015\064\001\002" +
    "\000\010\011\uff86\013\065\015\062\001\002\000\006\011" +
    "\uff86\015\062\001\002\000\004\011\uff87\001\002\000\004" +
    "\011\uff88\001\002\000\016\007\uff89\013\uff89\033\uff89\040" +
    "\uff89\041\uff89\052\uff89\001\002\000\004\007\uff91\001\002" +
    "\000\004\015\073\001\002\000\004\055\074\001\002\000" +
    "\004\015\075\001\002\000\016\007\uff85\013\uff85\033\uff85" +
    "\040\uff85\041\uff85\052\uff85\001\002\000\004\007\uff90\001" +
    "\002\000\016\007\uff8f\013\027\033\040\040\032\041\035" +
    "\052\030\001\002\000\016\007\uff8f\013\027\033\040\040" +
    "\032\041\035\052\030\001\002\000\016\007\uff8f\013\027" +
    "\033\040\040\032\041\035\052\030\001\002\000\016\007" +
    "\uff8f\013\027\033\040\040\032\041\035\052\030\001\002" +
    "\000\004\007\uff8e\001\002\000\004\007\uff8d\001\002\000" +
    "\004\007\uff8c\001\002\000\004\007\uff8b\001\002\000\016" +
    "\007\uff98\013\uff98\016\uff98\032\uff98\036\uff98\037\uff98\001" +
    "\002\000\004\002\000\001\002\000\004\006\112\001\002" +
    "\000\026\007\125\013\116\017\121\020\120\021\115\022" +
    "\134\023\117\024\135\025\122\031\114\001\002\000\026" +
    "\007\125\013\116\017\121\020\120\021\115\022\134\023" +
    "\117\024\135\025\122\031\114\001\002\000\004\012\264" +
    "\001\002\000\004\012\261\001\002\000\022\017\121\020" +
    "\120\021\115\022\134\023\117\024\135\025\122\031\114" +
    "\001\002\000\004\012\235\001\002\000\004\012\213\001" +
    "\002\000\004\012\207\001\002\000\004\012\152\001\002" +
    "\000\026\007\125\013\116\017\121\020\120\021\115\022" +
    "\134\023\117\024\135\025\122\031\114\001\002\000\026" +
    "\007\125\013\116\017\121\020\120\021\115\022\134\023" +
    "\117\024\135\025\122\031\114\001\002\000\016\007\uffeb" +
    "\013\uffeb\016\uffeb\032\uffeb\036\uffeb\037\uffeb\001\002\000" +
    "\026\007\125\013\116\017\121\020\120\021\115\022\134" +
    "\023\117\024\135\025\122\031\114\001\002\000\026\007" +
    "\125\013\116\017\121\020\120\021\115\022\134\023\117" +
    "\024\135\025\122\031\114\001\002\000\026\007\125\013" +
    "\116\017\121\020\120\021\115\022\134\023\117\024\135" +
    "\025\122\031\114\001\002\000\026\007\125\013\116\017" +
    "\121\020\120\021\115\022\134\023\117\024\135\025\122" +
    "\031\114\001\002\000\026\007\125\013\116\017\121\020" +
    "\120\021\115\022\134\023\117\024\135\025\122\031\114" +
    "\001\002\000\016\007\ufff5\013\ufff5\016\ufff5\032\ufff5\036" +
    "\ufff5\037\ufff5\001\002\000\004\012\141\001\002\000\004" +
    "\012\136\001\002\000\006\004\140\005\137\001\002\000" +
    "\026\007\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\031\uffd8\001\002\000\026\007" +
    "\uffd9\013\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\031\uffd9\001\002\000\004\045\142\001" +
    "\002\000\026\007\uffdc\013\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\031\uffdc\001\002\000" +
    "\016\007\ufff4\013\ufff4\016\ufff4\032\ufff4\036\ufff4\037\ufff4" +
    "\001\002\000\016\007\ufff2\013\ufff2\016\ufff2\032\ufff2\036" +
    "\ufff2\037\ufff2\001\002\000\016\007\ufff1\013\ufff1\016\ufff1" +
    "\032\ufff1\036\ufff1\037\ufff1\001\002\000\016\007\ufff3\013" +
    "\ufff3\016\ufff3\032\ufff3\036\ufff3\037\ufff3\001\002\000\016" +
    "\007\ufff0\013\ufff0\016\ufff0\032\ufff0\036\ufff0\037\ufff0\001" +
    "\002\000\016\007\uffef\013\uffef\016\uffef\032\uffef\036\uffef" +
    "\037\uffef\001\002\000\016\007\uffed\013\uffed\016\uffed\032" +
    "\uffed\036\uffed\037\uffed\001\002\000\004\006\153\001\002" +
    "\000\014\007\uffd2\013\154\026\160\027\161\030\157\001" +
    "\002\000\010\026\160\027\161\030\157\001\002\000\014" +
    "\007\uffd2\013\154\026\160\027\161\030\157\001\002\000" +
    "\004\007\176\001\002\000\004\012\174\001\002\000\004" +
    "\012\171\001\002\000\004\012\166\001\002\000\014\007" +
    "\uffd2\013\154\026\160\027\161\030\157\001\002\000\014" +
    "\007\uffd2\013\154\026\160\027\161\030\157\001\002\000" +
    "\004\007\uffd5\001\002\000\004\007\uffd4\001\002\000\006" +
    "\004\170\005\167\001\002\000\014\007\uffcb\013\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\001\002\000\014\007\uffcc\013\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\001\002\000\006\004\173\005" +
    "\172\001\002\000\014\007\uffcd\013\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\001\002\000\014\007\uffce\013\uffce\026\uffce\027" +
    "\uffce\030\uffce\001\002\000\004\045\175\001\002\000\014" +
    "\007\uffca\013\uffca\026\uffca\027\uffca\030\uffca\001\002\000" +
    "\026\007\uffd7\013\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\031\uffd7\001\002\000\004\007" +
    "\uffd6\001\002\000\014\007\uffd2\013\154\026\160\027\161" +
    "\030\157\001\002\000\004\007\uffd3\001\002\000\014\007" +
    "\uffd2\013\154\026\160\027\161\030\157\001\002\000\014" +
    "\007\uffd2\013\154\026\160\027\161\030\157\001\002\000" +
    "\004\007\uffd0\001\002\000\004\007\uffcf\001\002\000\004" +
    "\007\uffd1\001\002\000\004\015\210\001\002\000\004\047" +
    "\211\001\002\000\004\015\212\001\002\000\026\007\uffdd" +
    "\013\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\031\uffdd\001\002\000\004\006\214\001\002" +
    "\000\006\050\217\051\216\001\002\000\004\007\234\001" +
    "\002\000\004\012\226\001\002\000\004\012\220\001\002" +
    "\000\004\045\221\001\002\000\004\013\222\001\002\000" +
    "\004\051\223\001\002\000\004\012\224\001\002\000\004" +
    "\045\225\001\002\000\004\007\uffdf\001\002\000\004\045" +
    "\227\001\002\000\004\013\230\001\002\000\004\050\231" +
    "\001\002\000\004\012\232\001\002\000\004\045\233\001" +
    "\002\000\004\007\uffde\001\002\000\026\007\uffe2\013\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\031\uffe2\001\002\000\006\004\237\005\236\001\002" +
    "\000\026\007\uffda\013\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\031\uffda\001\002\000\026" +
    "\007\uffdb\013\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\031\uffdb\001\002\000\016\007\uffec" +
    "\013\uffec\016\uffec\032\uffec\036\uffec\037\uffec\001\002\000" +
    "\026\007\125\013\116\017\121\020\120\021\115\022\134" +
    "\023\117\024\135\025\122\031\114\001\002\000\026\007" +
    "\125\013\116\017\121\020\120\021\115\022\134\023\117" +
    "\024\135\025\122\031\114\001\002\000\026\007\125\013" +
    "\116\017\121\020\120\021\115\022\134\023\117\024\135" +
    "\025\122\031\114\001\002\000\026\007\125\013\116\017" +
    "\121\020\120\021\115\022\134\023\117\024\135\025\122" +
    "\031\114\001\002\000\026\007\125\013\116\017\121\020" +
    "\120\021\115\022\134\023\117\024\135\025\122\031\114" +
    "\001\002\000\026\007\125\013\116\017\121\020\120\021" +
    "\115\022\134\023\117\024\135\025\122\031\114\001\002" +
    "\000\026\007\125\013\116\017\121\020\120\021\115\022" +
    "\134\023\117\024\135\025\122\031\114\001\002\000\026" +
    "\007\125\013\116\017\121\020\120\021\115\022\134\023" +
    "\117\024\135\025\122\031\114\001\002\000\016\007\uffe4" +
    "\013\uffe4\016\uffe4\032\uffe4\036\uffe4\037\uffe4\001\002\000" +
    "\016\007\uffea\013\uffea\016\uffea\032\uffea\036\uffea\037\uffea" +
    "\001\002\000\016\007\uffe8\013\uffe8\016\uffe8\032\uffe8\036" +
    "\uffe8\037\uffe8\001\002\000\016\007\uffe7\013\uffe7\016\uffe7" +
    "\032\uffe7\036\uffe7\037\uffe7\001\002\000\016\007\uffe9\013" +
    "\uffe9\016\uffe9\032\uffe9\036\uffe9\037\uffe9\001\002\000\016" +
    "\007\uffe6\013\uffe6\016\uffe6\032\uffe6\036\uffe6\037\uffe6\001" +
    "\002\000\016\007\uffe5\013\uffe5\016\uffe5\032\uffe5\036\uffe5" +
    "\037\uffe5\001\002\000\016\007\uffe3\013\uffe3\016\uffe3\032" +
    "\uffe3\036\uffe3\037\uffe3\001\002\000\006\004\263\005\262" +
    "\001\002\000\026\007\uffe0\013\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\001\002" +
    "\000\026\007\uffe1\013\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\031\uffe1\001\002\000\004" +
    "\045\265\001\002\000\026\007\uffc9\013\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\031\uffc9" +
    "\001\002\000\016\007\uffee\013\uffee\016\uffee\032\uffee\036" +
    "\uffee\037\uffee\001\002\000\004\007\ufffd\001\002\000\004" +
    "\010\271\001\002\000\006\006\274\011\273\001\002\000" +
    "\004\011\357\001\002\000\016\007\uffaf\013\uffaf\016\uffaf" +
    "\032\uffaf\036\uffaf\037\uffaf\001\002\000\022\007\uffa5\013" +
    "\300\030\301\033\307\034\304\035\310\053\277\054\275" +
    "\001\002\000\004\012\355\001\002\000\022\007\uffa5\013" +
    "\300\030\301\033\307\034\304\035\310\053\277\054\275" +
    "\001\002\000\004\012\352\001\002\000\016\030\301\033" +
    "\307\034\304\035\310\053\277\054\275\001\002\000\004" +
    "\012\333\001\002\000\022\007\uffa5\013\300\030\301\033" +
    "\307\034\304\035\310\053\277\054\275\001\002\000\022" +
    "\007\uffa5\013\300\030\301\033\307\034\304\035\310\053" +
    "\277\054\275\001\002\000\004\012\327\001\002\000\022" +
    "\007\uffa5\013\300\030\301\033\307\034\304\035\310\053" +
    "\277\054\275\001\002\000\004\007\323\001\002\000\004" +
    "\012\317\001\002\000\004\012\315\001\002\000\022\007" +
    "\uffa5\013\300\030\301\033\307\034\304\035\310\053\277" +
    "\054\275\001\002\000\022\007\uffa5\013\300\030\301\033" +
    "\307\034\304\035\310\053\277\054\275\001\002\000\004" +
    "\007\uffaa\001\002\000\004\007\uffa9\001\002\000\004\046" +
    "\316\001\002\000\022\007\uff9b\013\uff9b\030\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\053\uff9b\054\uff9b\001\002\000\004\015" +
    "\320\001\002\000\004\047\321\001\002\000\004\015\322" +
    "\001\002\000\022\007\uff9e\013\uff9e\030\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\053\uff9e\054\uff9e\001\002\000\006\011\uffad" +
    "\013\324\001\002\000\004\006\274\001\002\000\004\011" +
    "\uffae\001\002\000\004\007\uffac\001\002\000\004\045\330" +
    "\001\002\000\022\007\uff9d\013\uff9d\030\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\053\uff9d\054\uff9d\001\002\000\004\007\uffa8" +
    "\001\002\000\004\007\uffa7\001\002\000\004\045\334\001" +
    "\002\000\022\007\uff9c\013\uff9c\030\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\053\uff9c\054\uff9c\001\002\000\022\007\uffa5\013" +
    "\300\030\301\033\307\034\304\035\310\053\277\054\275" +
    "\001\002\000\004\007\uffa6\001\002\000\022\007\uffa5\013" +
    "\300\030\301\033\307\034\304\035\310\053\277\054\275" +
    "\001\002\000\022\007\uffa5\013\300\030\301\033\307\034" +
    "\304\035\310\053\277\054\275\001\002\000\022\007\uffa5" +
    "\013\300\030\301\033\307\034\304\035\310\053\277\054" +
    "\275\001\002\000\022\007\uffa5\013\300\030\301\033\307" +
    "\034\304\035\310\053\277\054\275\001\002\000\022\007" +
    "\uffa5\013\300\030\301\033\307\034\304\035\310\053\277" +
    "\054\275\001\002\000\004\007\uffa2\001\002\000\004\007" +
    "\uffa1\001\002\000\004\007\uffa4\001\002\000\004\007\uffa0" +
    "\001\002\000\004\007\uff9f\001\002\000\004\007\uffa3\001" +
    "\002\000\004\045\353\001\002\000\022\007\uff9a\013\uff9a" +
    "\030\uff9a\033\uff9a\034\uff9a\035\uff9a\053\uff9a\054\uff9a\001" +
    "\002\000\004\007\uffab\001\002\000\004\045\356\001\002" +
    "\000\022\007\uff99\013\uff99\030\uff99\033\uff99\034\uff99\035" +
    "\uff99\053\uff99\054\uff99\001\002\000\016\007\uffb0\013\uffb0" +
    "\016\uffb0\032\uffb0\036\uffb0\037\uffb0\001\002\000\004\007" +
    "\ufffe\001\002\000\004\010\362\001\002\000\006\006\365" +
    "\011\364\001\002\000\004\011\u0128\001\002\000\016\007" +
    "\uffc7\013\uffc7\016\uffc7\032\uffc7\036\uffc7\037\uffc7\001\002" +
    "\000\022\007\uffbd\013\367\030\371\033\377\034\373\035" +
    "\u0101\053\370\054\366\001\002\000\004\012\u0126\001\002" +
    "\000\016\030\371\033\377\034\373\035\u0101\053\370\054" +
    "\366\001\002\000\004\012\u0117\001\002\000\004\012\u0115" +
    "\001\002\000\022\007\uffbd\013\367\030\371\033\377\034" +
    "\373\035\u0101\053\370\054\366\001\002\000\004\012\u0112" +
    "\001\002\000\022\007\uffbd\013\367\030\371\033\377\034" +
    "\373\035\u0101\053\370\054\366\001\002\000\022\007\uffbd" +
    "\013\367\030\371\033\377\034\373\035\u0101\053\370\054" +
    "\366\001\002\000\022\007\uffbd\013\367\030\371\033\377" +
    "\034\373\035\u0101\053\370\054\366\001\002\000\004\012" +
    "\u010b\001\002\000\022\007\uffbd\013\367\030\371\033\377" +
    "\034\373\035\u0101\053\370\054\366\001\002\000\004\012" +
    "\u0108\001\002\000\022\007\uffbd\013\367\030\371\033\377" +
    "\034\373\035\u0101\053\370\054\366\001\002\000\004\007" +
    "\u0104\001\002\000\006\011\uffc5\013\u0105\001\002\000\004" +
    "\006\365\001\002\000\004\011\uffc6\001\002\000\004\007" +
    "\uffc4\001\002\000\004\046\u0109\001\002\000\022\007\uffb3" +
    "\013\uffb3\030\uffb3\033\uffb3\034\uffb3\035\uffb3\053\uffb3\054" +
    "\uffb3\001\002\000\004\007\uffc3\001\002\000\004\015\u010c" +
    "\001\002\000\004\047\u010d\001\002\000\004\015\u010e\001" +
    "\002\000\022\007\uffb6\013\uffb6\030\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\053\uffb6\054\uffb6\001\002\000\004\007\uffc2\001" +
    "\002\000\004\007\uffc1\001\002\000\004\007\uffc0\001\002" +
    "\000\004\045\u0113\001\002\000\022\007\uffb5\013\uffb5\030" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\053\uffb5\054\uffb5\001\002" +
    "\000\004\007\uffbf\001\002\000\004\045\u0116\001\002\000" +
    "\022\007\uffb4\013\uffb4\030\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\053\uffb4\054\uffb4\001\002\000\004\045\u0118\001\002\000" +
    "\022\007\uffb2\013\uffb2\030\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\053\uffb2\054\uffb2\001\002\000\004\007\uffbe\001\002\000" +
    "\022\007\uffbd\013\367\030\371\033\377\034\373\035\u0101" +
    "\053\370\054\366\001\002\000\022\007\uffbd\013\367\030" +
    "\371\033\377\034\373\035\u0101\053\370\054\366\001\002" +
    "\000\022\007\uffbd\013\367\030\371\033\377\034\373\035" +
    "\u0101\053\370\054\366\001\002\000\022\007\uffbd\013\367" +
    "\030\371\033\377\034\373\035\u0101\053\370\054\366\001" +
    "\002\000\022\007\uffbd\013\367\030\371\033\377\034\373" +
    "\035\u0101\053\370\054\366\001\002\000\022\007\uffbd\013" +
    "\367\030\371\033\377\034\373\035\u0101\053\370\054\366" +
    "\001\002\000\004\007\uffbc\001\002\000\004\007\uffbb\001" +
    "\002\000\004\007\uffba\001\002\000\004\007\uffb9\001\002" +
    "\000\004\007\uffb8\001\002\000\004\007\uffb7\001\002\000" +
    "\004\045\u0127\001\002\000\022\007\uffb1\013\uffb1\030\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\053\uffb1\054\uffb1\001\002\000" +
    "\016\007\uffc8\013\uffc8\016\uffc8\032\uffc8\036\uffc8\037\uffc8" +
    "\001\002\000\016\007\ufffa\013\006\016\013\032\007\036" +
    "\011\037\015\001\002\000\016\007\ufffa\013\006\016\013" +
    "\032\007\036\011\037\015\001\002\000\004\007\ufffb\001" +
    "\002\000\016\007\ufffa\013\006\016\013\032\007\036\011" +
    "\037\015\001\002\000\016\007\ufffa\013\006\016\013\032" +
    "\007\036\011\037\015\001\002\000\004\007\ufff6\001\002" +
    "\000\004\007\ufff9\001\002\000\004\007\ufff7\001\002\000" +
    "\004\007\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\004\013\021\015\057\007\061\011\062\016\001\001" +
    "\000\014\005\u012a\021\u012b\057\u0128\061\u0129\062\u012c\001" +
    "\001\000\002\001\001\000\014\004\357\021\015\057\007" +
    "\061\011\062\016\001\001\000\002\001\001\000\014\004" +
    "\266\021\015\057\007\061\011\062\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\020\021\015\057\007\061\011\062\016\001\001\000\014" +
    "\004\017\021\015\057\007\061\011\062\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\036\051\035\052\033\053\030\054\032\001\001" +
    "\000\014\050\075\051\101\052\100\053\076\054\077\001" +
    "\001\000\002\001\001\000\014\047\070\051\035\052\033" +
    "\053\030\054\032\001\001\000\002\001\001\000\014\047" +
    "\055\051\035\052\033\053\030\054\032\001\001\000\014" +
    "\047\054\051\035\052\033\053\030\054\032\001\001\000" +
    "\002\001\001\000\014\047\047\051\035\052\033\053\030" +
    "\054\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\065\001\001\000\004\055\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\047" +
    "\105\051\035\052\033\053\030\054\032\001\001\000\014" +
    "\047\104\051\035\052\033\053\030\054\032\001\001\000" +
    "\014\047\103\051\035\052\033\053\030\054\032\001\001" +
    "\000\014\047\102\051\035\052\033\053\030\054\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\131\007\132\010\126\011\130" +
    "\012\127\014\125\015\123\016\112\020\122\001\001\000" +
    "\024\006\131\007\265\010\126\011\130\012\127\014\125" +
    "\015\123\016\112\020\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\246\010\243\011\245\012\244" +
    "\014\242\015\241\016\247\017\237\020\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\131\007\150\010\126\011\130\012" +
    "\127\014\125\015\123\016\112\020\122\001\001\000\024" +
    "\006\131\007\147\010\126\011\130\012\127\014\125\015" +
    "\123\016\112\020\122\001\001\000\002\001\001\000\024" +
    "\006\131\007\146\010\126\011\130\012\127\014\125\015" +
    "\123\016\112\020\122\001\001\000\024\006\131\007\145" +
    "\010\126\011\130\012\127\014\125\015\123\016\112\020" +
    "\122\001\001\000\024\006\131\007\144\010\126\011\130" +
    "\012\127\014\125\015\123\016\112\020\122\001\001\000" +
    "\024\006\131\007\143\010\126\011\130\012\127\014\125" +
    "\015\123\016\112\020\122\001\001\000\024\006\131\007" +
    "\142\010\126\011\130\012\127\014\125\015\123\016\112" +
    "\020\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\042\154\043\162\044\161\045\155" +
    "\001\001\000\012\042\177\043\202\044\201\046\200\001" +
    "\001\000\012\042\154\043\162\044\161\045\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\042\154\043\162\044\161\045\164" +
    "\001\001\000\012\042\154\043\162\044\161\045\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\154\043\162\044\161\045\205\001\001\000\002\001\001" +
    "\000\012\042\154\043\162\044\161\045\204\001\001\000" +
    "\012\042\154\043\162\044\161\045\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\131\007\257\010\126\011\130\012\127\014\125" +
    "\015\123\016\112\020\122\001\001\000\024\006\131\007" +
    "\256\010\126\011\130\012\127\014\125\015\123\016\112" +
    "\020\122\001\001\000\024\006\131\007\255\010\126\011" +
    "\130\012\127\014\125\015\123\016\112\020\122\001\001" +
    "\000\024\006\131\007\254\010\126\011\130\012\127\014" +
    "\125\015\123\016\112\020\122\001\001\000\024\006\131" +
    "\007\253\010\126\011\130\012\127\014\125\015\123\016" +
    "\112\020\122\001\001\000\024\006\131\007\252\010\126" +
    "\011\130\012\127\014\125\015\123\016\112\020\122\001" +
    "\001\000\024\006\131\007\251\010\126\011\130\012\127" +
    "\014\125\015\123\016\112\020\122\001\001\000\024\006" +
    "\131\007\250\010\126\011\130\012\127\014\125\015\123" +
    "\016\112\020\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\032\302\033\301\034" +
    "\305\036\304\037\275\040\311\041\310\001\001\000\002" +
    "\001\001\000\020\032\302\033\301\034\353\036\304\037" +
    "\275\040\311\041\310\001\001\000\002\001\001\000\020" +
    "\032\337\033\336\035\335\036\340\037\334\040\342\041" +
    "\341\001\001\000\002\001\001\000\020\032\302\033\301" +
    "\034\331\036\304\037\275\040\311\041\310\001\001\000" +
    "\020\032\302\033\301\034\330\036\304\037\275\040\311" +
    "\041\310\001\001\000\002\001\001\000\020\032\302\033" +
    "\301\034\325\036\304\037\275\040\311\041\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\032\302\033\301\034\313\036\304\037\275\040\311" +
    "\041\310\001\001\000\020\032\302\033\301\034\312\036" +
    "\304\037\275\040\311\041\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\302\033\301\034\350" +
    "\036\304\037\275\040\311\041\310\001\001\000\002\001" +
    "\001\000\020\032\302\033\301\034\347\036\304\037\275" +
    "\040\311\041\310\001\001\000\020\032\302\033\301\034" +
    "\346\036\304\037\275\040\311\041\310\001\001\000\020" +
    "\032\302\033\301\034\345\036\304\037\275\040\311\041" +
    "\310\001\001\000\020\032\302\033\301\034\344\036\304" +
    "\037\275\040\311\041\310\001\001\000\020\032\302\033" +
    "\301\034\343\036\304\037\275\040\311\041\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\u0101\023\u0102\025\377" +
    "\026\375\027\374\030\373\031\371\001\001\000\002\001" +
    "\001\000\020\022\u011e\024\u0118\025\u011d\026\u011c\027\u011b" +
    "\030\u011a\031\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\u0101\023\u0113\025\377\026\375\027\374" +
    "\030\373\031\371\001\001\000\002\001\001\000\020\022" +
    "\u0101\023\u0110\025\377\026\375\027\374\030\373\031\371" +
    "\001\001\000\020\022\u0101\023\u010f\025\377\026\375\027" +
    "\374\030\373\031\371\001\001\000\020\022\u0101\023\u010e" +
    "\025\377\026\375\027\374\030\373\031\371\001\001\000" +
    "\002\001\001\000\020\022\u0101\023\u0109\025\377\026\375" +
    "\027\374\030\373\031\371\001\001\000\002\001\001\000" +
    "\020\022\u0101\023\u0106\025\377\026\375\027\374\030\373" +
    "\031\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\u0101\023\u0124" +
    "\025\377\026\375\027\374\030\373\031\371\001\001\000" +
    "\020\022\u0101\023\u0123\025\377\026\375\027\374\030\373" +
    "\031\371\001\001\000\020\022\u0101\023\u0122\025\377\026" +
    "\375\027\374\030\373\031\371\001\001\000\020\022\u0101" +
    "\023\u0121\025\377\026\375\027\374\030\373\031\371\001" +
    "\001\000\020\022\u0101\023\u0120\025\377\026\375\027\374" +
    "\030\373\031\371\001\001\000\020\022\u0101\023\u011f\025" +
    "\377\026\375\027\374\030\373\031\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\u0130\021" +
    "\015\057\007\061\011\062\016\001\001\000\014\004\u012f" +
    "\021\015\057\007\061\011\062\016\001\001\000\002\001" +
    "\001\000\014\004\u012e\021\015\057\007\061\011\062\016" +
    "\001\001\000\014\004\u012d\021\015\057\007\061\011\062" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxCreacionMapa$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxCreacionMapa$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxCreacionMapa$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    CreacionMapa tablero;
    ArrayList<ArchivoConfiguracion> listArchivos;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    Juego misDatos;


    public SintaxCreacionMapa(AnalizadorLexico lex, ArrayList<ArchivoConfiguracion> listArchivos, CreacionMapa tablero, JTextArea panelMensajes){
        super(lex);
        this.listArchivos = listArchivos;
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
    }

    public void crearCuadriculaJuego(int filas, int columnas, ArrayList<Jugadores> listJugadores, ArrayList<PlanetasNeutrales> listNeutrales){
        tablero.creacionCuadricula(filas, columnas, listJugadores, listNeutrales);
    }

    public boolean verificadorNombresJugadores(ArrayList<Jugadores> listJugadores, boolean verificador){
        if(verificador == true){
            for(int i = 0; i < listJugadores.size(); i++){
                String jugador1 = listJugadores.get(i).getNombre();
                    if(jugador1.length() > 10){
                        System.out.println("exceso de letras");
                        verificador = false;
                        break;
                    }
                
                for(int j = i+1; j < listJugadores.size()+1; j++){
                        if(j!=listJugadores.size()){
                        String jugador2 = listJugadores.get(j).getNombre();
                        if(jugador1.equals(jugador2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        } 
        return verificador;
    }


    public boolean verificadorNombresPlanetas(boolean verificador, ArrayList<Planetas> listPlanetas){
        if(verificador == true){
            for(int i = 0; i < listPlanetas.size(); i++){
                String nombrePlaneta = listPlanetas.get(i).getNombre();
                if(nombrePlaneta.length() > 3){
                    System.out.println("exceso de letras");
                    verificador = false;
                    break;
                } else {
                    for(int j = i+1; j < listPlanetas.size()+1; j++){
                        if(j!=listPlanetas.size()){
                            String nombrePlaneta2 = listPlanetas.get(j).getNombre();
                            if(nombrePlaneta.equals(nombrePlaneta2)){
                                System.out.println("Dos nombres son iguales");
                                verificador = false;
                                break;
                            }
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public boolean verificadorNombresPlanetasNeutrales(boolean verificador, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
            for(int i = 0; i < listNeutrales.size(); i ++){
                String neutral1 = listNeutrales.get(i).getNombre();
                if(neutral1.length() > 3 ){
                    System.out.println("exceso de letras"); 
                    verificador = false;
                    break;
                }   
                for(int j = i+1; j < listNeutrales.size()+1; j++){
                    if(j!=listNeutrales.size()){
                        String neutral2 = listNeutrales.get(j).getNombre();
                        if(neutral1.equals(neutral2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public void creacionMapa(ArrayList<Jugadores> listJugadores, boolean verificador, ArrayList<Planetas> listPlanetas, Mapa mapita, JTextArea panelMensajes, String totalErroress, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
            tablero.agregarPlanetasTablero(Integer.parseInt(mapita.getSize_filas()), Integer.parseInt(mapita.getSize_columnas()), listJugadores, listPlanetas);
            if(!listPlanetas.isEmpty()){
                verificador = false;
                totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                panelMensajes.setText(totalErroress);
            }
            for(int i = 0; i < listJugadores.size(); i++){
                if(!listJugadores.get(i).getPlanetas().isEmpty()){
                    verificador = false;
                    totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                    panelMensajes.setText(totalErroress);
                    break;
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosPlanetas(mapita, listJugadores, verificador);
                if(verificador == false){
                    totalErroress += "Algun planeta esta situado en una posicion que no existe dentro del mapa\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosNeutrales(mapita, listNeutrales, verificador);
                if(verificador == false){
                    totalErrores += "Algun planeta neutral esta situado en una posicion que no existe dentro del mapa\n";
                    System.out.println("Algun planeta neutral esta situado en una posicion que no existe dentro del mapa");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPosPlanetas(listJugadores, verificador);
                if(verificador == false){
                    totalErroress += "Dos planetas estan situados en la misma posicion\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionNeutralaNeutral(listNeutrales, verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas neutrales estan situados en la misma posicion\n";
                    System.out.println("Dos planetas neutrales estan situados en la misma posicion");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPlanetasyNeutrales(listNeutrales, listJugadores, verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas (normal y un neutral) estan situados en la misma posicion\n";
                    System.out.println("Dos planetas(normal y un neutral) estan situados en la misma posicion\n");
                }
            }
            if(verificador == true) {
                crearCuadriculaJuego(Integer.parseInt(mapita.getSize_filas()), Integer.parseInt(mapita.getSize_columnas()), listJugadores, listNeutrales);
            } else { 
                panelMensajes.setText(totalErroress);
            }  
        }
        
    }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxCreacionMapa$actions {
  private final SintaxCreacionMapa parser;

  /** Constructor */
  CUP$SintaxCreacionMapa$actions(SintaxCreacionMapa parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxCreacionMapa$do_action(
    int                        CUP$SintaxCreacionMapa$act_num,
    java_cup.runtime.lr_parser CUP$SintaxCreacionMapa$parser,
    java.util.Stack            CUP$SintaxCreacionMapa$stack,
    int                        CUP$SintaxCreacionMapa$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxCreacionMapa$result;

      /* select the action based on the action number */
      switch (CUP$SintaxCreacionMapa$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ah ::= tipo DOS_PUNTOS HUMANO 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ah ::= tipo DOS_PUNTOS DIFICIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ah ::= tipo DOS_PUNTOS FACIL 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ah",42, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // al ::= color DOS_PUNTOS COMILLAS COLOR COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setColor(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("al",41, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ai ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ai ::= COMILLAS ID COMILLAS ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ai ::= COMILLAS ID COMILLAS COMA ai 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ai",43, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ag ::= planetas DOS_PUNTOS AGRUPACION_A ai AGRUPACION_B 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Jugadores jugador = new Jugadores(); jugador.setPlanetas(a); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ag",40, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // af ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Jugadores jugador = new Jugadores();  jugador.setNombre(a.toString()); RESULT=jugador; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("af",39, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // q7 ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // q7 ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // q7 ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // q7 ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q7",38, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ae ::= 
            {
              Jugadores RESULT =null;
		 RESULT=new Jugadores(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ae ::= COMA q7 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ae ::= al ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ae ::= ah ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ae ::= ag ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ae ::= af ae 
            {
              Jugadores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Jugadores e = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ae",37, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ad ::= LLAVE_A ae LLAVE_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { ArrayList<Jugadores> misJugadores = new ArrayList<>();  a.setMisPlanetas(new ArrayList<>()); misJugadores.add(a); RESULT=misJugadores; } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ad",49, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ad ::= LLAVE_A ae LLAVE_B COMA ad 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		Jugadores a = (Jugadores)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<Jugadores> e = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { a.setMisPlanetas(new ArrayList<>());  e.add(a); RESULT=e; } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ad",49, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("jug",48, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad AGRUPACION_B 
            {
              ArrayList<Jugadores> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("jug",48, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // an ::= posY DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionY(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("an",25, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // am ::= posX DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionX(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("am",24, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ac ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPorcentajeMuertes(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ac",31, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ab ::= produccion DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setProduccion(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ab",30, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // aa ::= naves DOS_PUNTOS ENTERO 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNaves(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("aa",29, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // z ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNombre(a.toString()); RESULT=neutral; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("z",28, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // q5 ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // q5 ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // q5 ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // q5 ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // q5 ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // q5 ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q5",27, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // y ::= 
            {
              PlanetasNeutrales RESULT =null;
		 RESULT=new PlanetasNeutrales(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // y ::= COMA q5 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // y ::= an y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // y ::= am y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // y ::= ac y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // y ::= ab y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // y ::= aa y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // y ::= z y 
            {
              PlanetasNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		PlanetasNeutrales e = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("y",26, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // x ::= LLAVE_A y LLAVE_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { ArrayList<PlanetasNeutrales> pNeutrales = new ArrayList<>(); pNeutrales.add(a); RESULT=pNeutrales; }  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("x",46, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // x ::= LLAVE_A y LLAVE_B COMA x 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		PlanetasNeutrales a = (PlanetasNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<PlanetasNeutrales> e = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("x",46, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("pn",47, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x AGRUPACION_B 
            {
              ArrayList<PlanetasNeutrales> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("pn",47, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ak ::= posY DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionY(a.toString()); RESULT=planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("ak",23, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // aj ::= posX DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPosicionX(a.toString()); RESULT=planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("aj",22, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // w ::= porcMuertes DOS_PUNTOS DECIMAL 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setPorcentajeMuertes(a.toString());  RESULT = planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("w",21, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // v ::= produccion DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setProduccion(a.toString()); RESULT = planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("v",20, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // u ::= naves DOS_PUNTOS ENTERO 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Planetas planeta = new Planetas(); planeta.setNaves(a.toString()); RESULT = planeta; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("u",19, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // t ::= nombre DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Planetas planetas = new Planetas(); planetas.setNombre(a.toString()); RESULT=planetas; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("t",16, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // q3 ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // q3 ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // q3 ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // q3 ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // q3 ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // q3 ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q3",18, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s ::= 
            {
              Planetas RESULT =null;
		 RESULT=new Planetas(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // s ::= COMA q3 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // s ::= ak s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // s ::= aj s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s ::= w s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // s ::= v s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // s ::= u s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // s ::= t s 
            {
              Planetas RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Planetas e = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // r ::= LLAVE_A s LLAVE_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else {ArrayList<Planetas> misPlanetas = new ArrayList<>(); misPlanetas.add(a); RESULT=misPlanetas;  }   
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("r",44, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // r ::= LLAVE_A s LLAVE_B COMA r 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).right;
		Planetas a = (Planetas)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		ArrayList<Planetas> e = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else { e.add(a); RESULT=e; } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("r",44, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;

              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("p",45, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r AGRUPACION_B 
            {
              ArrayList<Planetas> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("p",45, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // k ::= finalizacion DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setFinalizacion(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("k",14, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // o ::= produccion DOS_PUNTOS ENTERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setProduccion(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("o",34, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // n ::= mostrarEstadisticas DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("n",33, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("n",33, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // m ::= mostrarNaves DOS_PUNTOS FALSO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("m",32, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // m ::= mostrarNaves DOS_PUNTOS VERDADERO 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("m",32, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // q8 ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // q8 ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // q8 ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q8",36, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // l ::= 
            {
              MapaPNeutrales RESULT =null;
		RESULT=new MapaPNeutrales();
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // l ::= COMA q8 
            {
              MapaPNeutrales RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l ::= o l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l ::= n l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l ::= m l 
            {
              MapaPNeutrales RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		MapaPNeutrales e = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("l",35, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		MapaPNeutrales a = (MapaPNeutrales)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 Mapa mapa = new Mapa(); if(a.getMostrarNaves()==null || a.getMostrarEstadisticas()==null || a.getProduccion() == null) {System.out.println("ERROR, falta de atributo");} else { mapa.setMapaPNeutral(a); RESULT=mapa; }     
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j2",12, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // i ::= acumular DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("i",11, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // i ::= acumular DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("i",11, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // h ::= mapaCiego DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("h",10, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // h ::= mapaCiego DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("h",10, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // g ::= pNeutrales DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setPlanetasNeutrales(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("g",6, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // d ::= id DOS_PUNTOS COMILLAS ID COMILLAS 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  Mapa mapa = new Mapa(); mapa.setId(a.toString());  RESULT=mapa;                    /*if(parser.mapita.getId()==null){ parser.mapita.setId(a.toString());  } else { parser.interruptor = false; parser.syntax_error(parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT)); parser.totalErrores += "Atributo ID sentenciado mas de una vez dentro de MAPA\n";    }*/ 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("d",4, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // j ::= columnas DOS_PUNTOS ENTERO COMA filas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa;    
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j",9, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // j ::= filas DOS_PUNTOS ENTERO COMA columnas DOS_PUNTOS ENTERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("j",9, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // f ::= alAzar DOS_PUNTOS FALSO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // f ::= alAzar DOS_PUNTOS VERDADERO 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("f",8, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // e ::= size DOS_PUNTOS LLAVE_A j LLAVE_B 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		  RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // q ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // q ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // q ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // q ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { System.out.println("error"); } } RESULT=e1; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // q ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null) { e.setPlanetasNeutrales(a.getPlanetasNeutrales());  } else { System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // q ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q",13, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= LLAVE_B 
            {
              Mapa RESULT =null;
		RESULT=new Mapa();
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= COMA q 
            {
              Mapa RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= k c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= j2 c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= i c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= h c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= f c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= e c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e1 = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { System.out.println("error"); } } RESULT=e1; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // c ::= g c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else { System.out.println("error"); }  } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // c ::= d c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa e = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { System.out.println("error"); }   } RESULT=e;  
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b ::= MAPA DOS_PUNTOS LLAVE_A c 
            {
              Mapa RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("b",15, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // q2 ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // q2 ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // q2 ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { System.out.println("erroraaa"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // q2 ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("q2",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // juego ::= 
            {
              Juego RESULT =null;
		 RESULT=new Juego(); 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // juego ::= COMA q2 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // juego ::= jug juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Jugadores> a = (ArrayList<Jugadores>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // juego ::= pn juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<PlanetasNeutrales> a = (ArrayList<PlanetasNeutrales>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getpNeutrales()==null){e.setpNeutrales(a); System.out.println("agregox2"); } else { System.out.println("error"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // juego ::= p juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		ArrayList<Planetas> a = (ArrayList<Planetas>)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a); System.out.println("agrego"); } else { System.out.println("erroasdfr"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // juego ::= b juego 
            {
              Juego RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Mapa a = (Mapa)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()).right;
		Juego e = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.peek()).value;
		 if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { System.out.println("errorzzzzzzz"); } } RESULT=e; 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("juego",2, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A juego LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Juego a = (Juego)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		 if(a.getMapa()==null || a.getJugadores()==null || a.getpNeutrales()==null || a.getPlanetas()==null){ System.out.println("Falta un archivo principal"); } else { boolean interruptor = true;  interruptor = parser.verificadorNombresJugadores(a.getJugadores(), interruptor);  interruptor = parser.verificadorNombresPlanetas(interruptor, a.getPlanetas());  interruptor = parser.verificadorNombresPlanetasNeutrales(interruptor, a.getpNeutrales());   parser.creacionMapa(a.getJugadores(), interruptor, a.getPlanetas(), a.getMapa(), parser.panelMensajes, parser.totalErrores, a.getpNeutrales());               parser.misDatos = a; } 
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          return CUP$SintaxCreacionMapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)).value;
		RESULT = start_val;
              CUP$SintaxCreacionMapa$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxCreacionMapa$parser.done_parsing();
          return CUP$SintaxCreacionMapa$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

