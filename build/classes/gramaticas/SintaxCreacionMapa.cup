package gramaticas;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextArea;


parser code {:

    CreacionMapa tablero;
    ArrayList<ArchivoConfiguracion> listArchivos;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    Juego misDatos;


    public SintaxCreacionMapa(AnalizadorLexico lex, ArrayList<ArchivoConfiguracion> listArchivos, CreacionMapa tablero, JTextArea panelMensajes){
        super(lex);
        this.listArchivos = listArchivos;
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
    }

    public void crearCuadriculaJuego(int filas, int columnas, ArrayList<Jugadores> listJugadores, ArrayList<PlanetasNeutrales> listNeutrales){
        tablero.creacionCuadricula(filas, columnas, listJugadores, listNeutrales);
    }

    public boolean verificadorNombresJugadores(ArrayList<Jugadores> listJugadores, boolean verificador){
        if(verificador == true){
            for(int i = 0; i < listJugadores.size(); i++){
                String jugador1 = listJugadores.get(i).getNombre();
                    if(jugador1.length() > 10){
                        System.out.println("exceso de letras");
                        verificador = false;
                        break;
                    }
                
                for(int j = i+1; j < listJugadores.size()+1; j++){
                        if(j!=listJugadores.size()){
                        String jugador2 = listJugadores.get(j).getNombre();
                        if(jugador1.equals(jugador2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        } 
        return verificador;
    }


    public boolean verificadorNombresPlanetas(boolean verificador, ArrayList<Planetas> listPlanetas){
        if(verificador == true){
            for(int i = 0; i < listPlanetas.size(); i++){
                String nombrePlaneta = listPlanetas.get(i).getNombre();
                if(nombrePlaneta.length() > 3){
                    System.out.println("exceso de letras");
                    verificador = false;
                    break;
                } else {
                    for(int j = i+1; j < listPlanetas.size()+1; j++){
                        if(j!=listPlanetas.size()){
                            String nombrePlaneta2 = listPlanetas.get(j).getNombre();
                            if(nombrePlaneta.equals(nombrePlaneta2)){
                                System.out.println("Dos nombres son iguales");
                                verificador = false;
                                break;
                            }
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public boolean verificadorNombresPlanetasNeutrales(boolean verificador, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
            for(int i = 0; i < listNeutrales.size(); i ++){
                String neutral1 = listNeutrales.get(i).getNombre();
                if(neutral1.length() > 3 ){
                    System.out.println("exceso de letras"); 
                    verificador = false;
                    break;
                }   
                for(int j = i+1; j < listNeutrales.size()+1; j++){
                    if(j!=listNeutrales.size()){
                        String neutral2 = listNeutrales.get(j).getNombre();
                        if(neutral1.equals(neutral2)){
                            System.out.println("Dos nombres son iguales");
                            verificador = false;
                            break;
                        }
                    }
                }
                if(verificador == false){
                    break;
                }
            }
        }
        return verificador;
    }

    public void creacionMapa(ArrayList<Jugadores> listJugadores, boolean verificador, ArrayList<Planetas> listPlanetas, Mapa mapita, JTextArea panelMensajes, String totalErroress, ArrayList<PlanetasNeutrales> listNeutrales){
        if(verificador == true){
            tablero.agregarPlanetasTablero(Integer.parseInt(mapita.getSize_filas()), Integer.parseInt(mapita.getSize_columnas()), listJugadores, listPlanetas);
            if(!listPlanetas.isEmpty()){
                verificador = false;
                totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                panelMensajes.setText(totalErroress);
            }
            for(int i = 0; i < listJugadores.size(); i++){
                if(!listJugadores.get(i).getPlanetas().isEmpty()){
                    verificador = false;
                    totalErroress += "Hay mas planetas de los sentenciados para los jugadores\n";
                    panelMensajes.setText(totalErroress);
                    break;
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosPlanetas(mapita, listJugadores, verificador);
                if(verificador == false){
                    totalErroress += "Algun planeta esta situado en una posicion que no existe dentro del mapa\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionFilasColumnasPosNeutrales(mapita, listNeutrales, verificador);
                if(verificador == false){
                    totalErrores += "Algun planeta neutral esta situado en una posicion que no existe dentro del mapa\n";
                    System.out.println("Algun planeta neutral esta situado en una posicion que no existe dentro del mapa");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPosPlanetas(listJugadores, verificador);
                if(verificador == false){
                    totalErroress += "Dos planetas estan situados en la misma posicion\n";
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionNeutralaNeutral(listNeutrales, verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas neutrales estan situados en la misma posicion\n";
                    System.out.println("Dos planetas neutrales estan situados en la misma posicion");
                }
            }
            if(verificador == true){
                verificador = tablero.comparacionPlanetasyNeutrales(listNeutrales, listJugadores, verificador);
                if(verificador == false){
                    totalErrores += "Dos planetas (normal y un neutral) estan situados en la misma posicion\n";
                    System.out.println("Dos planetas(normal y un neutral) estan situados en la misma posicion\n");
                }
            }
            if(verificador == true) {
                crearCuadriculaJuego(Integer.parseInt(mapita.getSize_filas()), Integer.parseInt(mapita.getSize_columnas()), listJugadores, listNeutrales);
            } else { 
                panelMensajes.setText(totalErroress);
            }  
        }
        
    }
  
:}

    terminal VERDADERO, FALSO, LLAVE_A, LLAVE_B, AGRUPACION_A, AGRUPACION_B, DOS_PUNTOS, COMA, PUNTO, COMILLAS,
             MAPA, id, size, alAzar, pNeutrales, mapaCiego, acumular, NEUTRALES, mostrarNaves, mostrarEstadisticas,
             produccion, finalizacion, PLANETAS, nombre, naves, porcMuertes, PLANETAS_NEUTRALES, JUGADORES, planetas,
             tipo, HUMANO, DIFICIL, FACIL, ENTERO, DECIMAL, ID, filas, columnas, color, posX, posY, COLOR;
             
    non terminal a, a1;

    non terminal Juego juego, q2;
    
    non terminal Mapa d, c, g, e, f, j, h, i, j2, q, k, b;
    
    non terminal Planetas t, s, q3, u, v, w, aj, ak;

    non terminal PlanetasNeutrales am, an, y, q5, z, aa, ab, ac;

    non terminal MapaPNeutrales m, n, o, l, q8;

    non terminal Jugadores ae, q7, af, ag, al, ah;

    non terminal ArrayList<String> ai;

    non terminal ArrayList<Planetas> r, p;

    non terminal ArrayList<PlanetasNeutrales> x, pn;

    non terminal ArrayList<Jugadores> jug, ad;

    start with a;
    
    a ::= LLAVE_A juego:a LLAVE_B {: if(a.getMapa()==null || a.getJugadores()==null || a.getpNeutrales()==null || a.getPlanetas()==null){ System.out.println("Falta un archivo principal"); } else { boolean interruptor = true;  interruptor = parser.verificadorNombresJugadores(a.getJugadores(), interruptor);  interruptor = parser.verificadorNombresPlanetas(interruptor, a.getPlanetas());  interruptor = parser.verificadorNombresPlanetasNeutrales(interruptor, a.getpNeutrales());   parser.creacionMapa(a.getJugadores(), interruptor, a.getPlanetas(), a.getMapa(), parser.panelMensajes, parser.totalErrores, a.getpNeutrales());               parser.misDatos = a; } :} 
;
    juego ::= b:a juego:e {: if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { System.out.println("errorzzzzzzz"); } } RESULT=e; :}
    | p:a juego:e {: if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a); System.out.println("agrego"); } else { System.out.println("erroasdfr"); } } RESULT=e; :}
    | pn:a juego:e {: if(e!=null){ if(e.getpNeutrales()==null){e.setpNeutrales(a); System.out.println("agregox2"); } else { System.out.println("error"); } } RESULT=e; :}
    | jug:a juego:e {: if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA q2:a {: RESULT=a; :}
    | {: RESULT=new Juego(); :}
;
    q2 ::= b:a juego:e {: if(e!=null){ if(e.getMapa()==null){ e.setMapa(a); } else { System.out.println("error"); } } RESULT=e; :}
    | p:a juego:e {: if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a);   } else { System.out.println("erroraaa"); } } RESULT=e; :}    
    | pn:a juego:e {: if(e!=null){ if(e.getpNeutrales()==null){ e.setpNeutrales(a);   } else { System.out.println("error"); } } RESULT=e; :}
    | jug:a juego:e {: if(e!=null){ if(e.getJugadores()==null){ e.setJugadores(a); } else { System.out.println("error"); } } RESULT=e; :}
;
    b ::= MAPA DOS_PUNTOS LLAVE_A c:a {: RESULT=a; :}   
;
    c ::= d:a c:e {: if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { System.out.println("error"); }   } RESULT=e;  :} 
    |   g:a c:e {: if(e!=null){ if(e.getPlanetasNeutrales()==null){ e.setPlanetasNeutrales(a.getPlanetasNeutrales()); } else { System.out.println("error"); }  } RESULT=e; :}
    |   e:a c:e1 {: if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { System.out.println("error"); } } RESULT=e1; :}
    |   f:a c:e {: if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; :}
    |   h:a c:e {: if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; :}
    |   i:a c:e {: if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { System.out.println("error"); } } RESULT=e; :}
    |   j2:a c:e {: if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { System.out.println("error"); } } RESULT=e; :}
    |   k:a c:e {: if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { System.out.println("error"); } } RESULT=e; :}
    |    COMA q:e {: RESULT=e; :}
    |   LLAVE_B {:RESULT=new Mapa();:}
;
    q ::= d:a c:e {: if(e!=null){ if(e.getId()==null) { e.setId(a.getId());  } else { System.out.println("error"); }   } RESULT=e;  :} 
    |     g:a c:e {: if(e!=null){ if(e.getPlanetasNeutrales()==null) { e.setPlanetasNeutrales(a.getPlanetasNeutrales());  } else { System.out.println("error"); }   } RESULT=e;  :} 
    |   e:a c:e1 {: if(e1!=null){ if(e1.getSize_filas()==null && e1.getSize_columnas()==null) { e1.setSize_filas(a.getSize_filas()); e1.setSize_columnas(a.getSize_columnas()); } else { System.out.println("error"); } } RESULT=e1; :}
    |   f:a c:e {: if(e!=null){ if(e.getAlAzar()==null) { e.setAlAzar(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; :}
    |   h:a c:e {: if(e!=null){ if(e.getMapaCiego()==null) { e.setMapaCiego(a.getAlAzar()); } else { System.out.println("error"); } } RESULT=e; :}
    |   i:a c:e {: if(e!=null){ if(e.getAcumular()==null) { e.setAcumular(a.getAcumular()); } else { System.out.println("error"); } } RESULT=e; :}
    |   j2:a c:e {: if(e!=null){ if(e.getMapaPNeutral()==null && a!=null) { e.setMapaPNeutral(a.getMapaPNeutral()); } else { System.out.println("error"); } } RESULT=e; :}
    |   k:a c:e {: if(e!=null){ if(e.getFinalizacion()==null){ e.setFinalizacion(a.getFinalizacion()); } else { System.out.println("error"); } } RESULT=e; :}
;
    e ::= size DOS_PUNTOS LLAVE_A j:a LLAVE_B {:  RESULT=a; :}
;
    f ::= alAzar DOS_PUNTOS VERDADERO:a {: Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; :}
    | alAzar DOS_PUNTOS FALSO:a {: Mapa mapa = new Mapa(); mapa.setAlAzar(a.toString()); RESULT=mapa; :}
;
    j ::= filas DOS_PUNTOS ENTERO:a COMA columnas DOS_PUNTOS ENTERO:b {: Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa; :}
    | columnas DOS_PUNTOS ENTERO:b COMA filas DOS_PUNTOS ENTERO:a {: Mapa mapa = new Mapa(); mapa.setSize_filas(a.toString()); mapa.setSize_columnas(b.toString()); RESULT=mapa;    :}
;
    d ::= id DOS_PUNTOS COMILLAS ID:a COMILLAS  {:  Mapa mapa = new Mapa(); mapa.setId(a.toString());  RESULT=mapa;                    /*if(parser.mapita.getId()==null){ parser.mapita.setId(a.toString());  } else { parser.interruptor = false; parser.syntax_error(parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.elementAt(CUP$SintaxCreacionMapa$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCreacionMapa$stack.peek()), RESULT)); parser.totalErrores += "Atributo ID sentenciado mas de una vez dentro de MAPA\n";    }*/ :} 
;
    g ::= pNeutrales DOS_PUNTOS ENTERO:a {: Mapa mapa = new Mapa(); mapa.setPlanetasNeutrales(a.toString()); RESULT=mapa; :}
;
    h ::= mapaCiego DOS_PUNTOS VERDADERO:a {: Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; :}
    | mapaCiego DOS_PUNTOS FALSO:a {: Mapa mapa = new Mapa(); mapa.setMapaCiego(a.toString()); RESULT=mapa; :}
;
    i ::= acumular DOS_PUNTOS VERDADERO:a {: Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; :}
    | acumular DOS_PUNTOS FALSO:a {: Mapa mapa = new Mapa(); mapa.setAcumular(a.toString()); RESULT=mapa; :}
;
    j2 ::= NEUTRALES DOS_PUNTOS LLAVE_A l:a LLAVE_B {: Mapa mapa = new Mapa(); if(a.getMostrarNaves()==null || a.getMostrarEstadisticas()==null || a.getProduccion() == null) {System.out.println("ERROR, falta de atributo");} else { mapa.setMapaPNeutral(a); RESULT=mapa; }     :} 
;
    l ::= m:a l:e {: if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { System.out.println("error"); }  } RESULT=e; :}
    | n:a l:e {: if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { System.out.println("error"); } } RESULT=e; :}
    | o:a l:e {: if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA q8:e {: RESULT=e; :}
    | {:RESULT=new MapaPNeutrales();:}
;
    q8 ::= m:a l:e {: if(e!=null){if(e.getMostrarNaves()==null){ e.setMostrarNaves(a.getMostrarNaves()); } else { System.out.println("error"); }  } RESULT=e; :}
    | n:a l:e {: if(e!=null){ if(e.getMostrarEstadisticas()==null){ e.setMostrarEstadisticas(a.getMostrarEstadisticas()); } else { System.out.println("error"); } } RESULT=e; :}
    | o:a l:e {: if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e; :}
;
    m ::= mostrarNaves DOS_PUNTOS VERDADERO:a {: MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; :}
    | mostrarNaves DOS_PUNTOS FALSO:a {: MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarNaves(a.toString()); RESULT=mapa; :}
;
    n ::= mostrarEstadisticas DOS_PUNTOS VERDADERO:a {: MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; :}
    | mostrarEstadisticas DOS_PUNTOS FALSO:a {: MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setMostrarEstadisticas(a.toString()); RESULT=mapa; :}
;
    o ::= produccion DOS_PUNTOS ENTERO:a {: MapaPNeutrales mapa = new MapaPNeutrales(); mapa.setProduccion(a.toString()); RESULT=mapa; :}
;
    k ::= finalizacion DOS_PUNTOS ENTERO:a {: Mapa mapa = new Mapa(); mapa.setFinalizacion(a.toString()); RESULT=mapa; :}
;
    p ::= PLANETAS DOS_PUNTOS AGRUPACION_A r:a AGRUPACION_B  {: RESULT=a; :}
    | PLANETAS DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
;
    r ::= LLAVE_A s:a LLAVE_B COMA r:e {: if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else { e.add(a); RESULT=e; } :}
    | LLAVE_A s:a LLAVE_B {:  if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX() ==null || a.getPosicionY()==null){ System.out.println("Falta un atributo"); } else {ArrayList<Planetas> misPlanetas = new ArrayList<>(); misPlanetas.add(a); RESULT=misPlanetas;  }   :}
;
    s ::= t:a s:e {: if(e!=null){ if(e.getNombre()==null) { e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; :}
    | u:a s:e {: if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; :}    
    | v:a s:e {: if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e;  :}
    | w:a s:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; :}
    | aj:a s:e {: if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; :}
    | ak:a s:e {: if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { System.out.println("error"); } } RESULT=e; :}
    | COMA q3:a {: RESULT=a; :}
    | {: RESULT=new Planetas(); :} 
;
    q3 ::= t:a s:e {: if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; :}
    | u:a s:e {: if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; :}    
    | v:a s:e {: if(e!=null){ if(e.getProduccion()==null){ e.setProduccion(a.getProduccion()); } else { System.out.println("error"); } } RESULT=e;  :}
    | w:a s:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; :}
    | aj:a s:e {: if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; :}
    | ak:a s:e {: if(e!=null){ if(e.getPosicionY()==null){e.setPosicionY(a.getPosicionY());} else { System.out.println("error"); } } RESULT=e; :}
;
    t ::= nombre DOS_PUNTOS COMILLAS ID:a COMILLAS {: Planetas planetas = new Planetas(); planetas.setNombre(a.toString()); RESULT=planetas; :}
;
    u ::= naves DOS_PUNTOS ENTERO:a {: Planetas planeta = new Planetas(); planeta.setNaves(a.toString()); RESULT = planeta; :}
;
    v ::= produccion DOS_PUNTOS ENTERO:a {: Planetas planeta = new Planetas(); planeta.setProduccion(a.toString()); RESULT = planeta; :}
;
    w ::= porcMuertes DOS_PUNTOS DECIMAL:a {: Planetas planeta = new Planetas(); planeta.setPorcentajeMuertes(a.toString());  RESULT = planeta; :}
;
    aj ::= posX DOS_PUNTOS ENTERO:a {: Planetas planeta = new Planetas(); planeta.setPosicionX(a.toString()); RESULT=planeta; :}
;
    ak ::= posY DOS_PUNTOS ENTERO:a {: Planetas planeta = new Planetas(); planeta.setPosicionY(a.toString()); RESULT=planeta; :}
;
    pn ::= PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A x:a AGRUPACION_B {: RESULT=a; :} 
    | PLANETAS_NEUTRALES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
;
    x ::= LLAVE_A y:a LLAVE_B COMA x:e {: if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { e.add(a); RESULT=e; } :}
    | LLAVE_A y:a LLAVE_B {: if(a.getNombre()==null || a.getNaves()==null || a.getProduccion()==null || a.getPorcentajeMuertes()==null || a.getPosicionX()==null || a.getPosicionY()==null){ System.out.println("ERROR, Falta un atributo"); } else { ArrayList<PlanetasNeutrales> pNeutrales = new ArrayList<>(); pNeutrales.add(a); RESULT=pNeutrales; }  :}
;
    y ::= z:a y:e {: if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; :}
    | aa:a y:e {: if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; :}
    | ab:a y:e {: if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { System.out.println("error"); } } RESULT=e; :}
    | ac:a y:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; :}  
    | am:a y:e {: if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; :}
    | an:a y:e {: if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA q5:a {: RESULT=a; :}
    | {: RESULT=new PlanetasNeutrales(); :}
;
    q5 ::= z:a y:e {: if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; :}
    | aa:a y:e {: if(e!=null){ if(e.getNaves()==null){ e.setNaves(a.getNaves()); } else { System.out.println("error"); } } RESULT=e; :}
    | ab:a y:e {: if(e!=null){ if(e.getProduccion()==null){e.setProduccion(a.getProduccion());} else { System.out.println("error"); } } RESULT=e; :}
    | ac:a y:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; :}  
    | am:a y:e {: if(e!=null){ if(e.getPosicionX()==null){ e.setPosicionX(a.getPosicionX()); } else { System.out.println("error"); } } RESULT=e; :}
    | an:a y:e {: if(e!=null){ if(e.getPosicionY()==null){ e.setPosicionY(a.getPosicionY()); } else { System.out.println("error"); } } RESULT=e; :}
;
    z ::=  nombre DOS_PUNTOS COMILLAS ID:a COMILLAS {: PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNombre(a.toString()); RESULT=neutral; :}
;
    aa ::= naves DOS_PUNTOS ENTERO:a {: PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setNaves(a.toString()); RESULT=neutral; :}
;
    ab ::= produccion DOS_PUNTOS ENTERO:a {: PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setProduccion(a.toString()); RESULT=neutral; :}
;
    ac ::= porcMuertes DOS_PUNTOS DECIMAL:a {: PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPorcentajeMuertes(a.toString()); RESULT=neutral; :}
;
    am ::= posX DOS_PUNTOS ENTERO:a {: PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionX(a.toString()); RESULT=neutral; :}
;
    an ::= posY DOS_PUNTOS ENTERO:a {: PlanetasNeutrales neutral = new PlanetasNeutrales(); neutral.setPosicionY(a.toString()); RESULT=neutral; :}
;
    jug ::= JUGADORES DOS_PUNTOS AGRUPACION_A ad:a AGRUPACION_B {:  RESULT=a; :} 
    | JUGADORES DOS_PUNTOS AGRUPACION_A AGRUPACION_B 
;
    ad ::= LLAVE_A ae:a LLAVE_B COMA ad:e {: if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { a.setMisPlanetas(new ArrayList<>());  e.add(a); RESULT=e; } :}
    | LLAVE_A ae:a LLAVE_B {: if(a.getNombre()==null || a.getPlanetas()==null || a.getColor()==null || a.getTipo()==null ){ System.out.println("ERROR, Falta de un archivo"); } else { ArrayList<Jugadores> misJugadores = new ArrayList<>();  a.setMisPlanetas(new ArrayList<>()); misJugadores.add(a); RESULT=misJugadores; } :}
;
    ae ::= af:a ae:e {: if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; :}
    | ag:a ae:e {: if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { System.out.println("error"); } } RESULT=e; :}
    | ah:a ae:e {: if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { System.out.println("error"); } } RESULT=e; :}
    | al:a ae:e {: if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA q7:a {: RESULT=a; :}
    | {: RESULT=new Jugadores(); :}
;
    q7 ::= af:a ae:e {: if(e!=null){ if(e.getNombre()==null){ e.setNombre(a.getNombre()); } else { System.out.println("error"); } } RESULT=e; :}
    | ag:a ae:e {: if(e!=null){ if(e.getPlanetas()==null){ e.setPlanetas(a.getPlanetas()); } else { System.out.println("error"); } } RESULT=e; :}
    | ah:a ae:e {: if(e!=null){ if(e.getTipo()==null){ e.setTipo(a.getTipo()); } else { System.out.println("error"); } } RESULT=e; :}
    | al:a ae:e {: if(e!=null){ if(e.getColor()==null){ e.setColor(a.getColor()); } else { System.out.println("error"); } } RESULT=e; :}
;
    af ::= nombre DOS_PUNTOS COMILLAS ID:a COMILLAS {: Jugadores jugador = new Jugadores();  jugador.setNombre(a.toString()); RESULT=jugador; :}
;
    ag ::= planetas DOS_PUNTOS AGRUPACION_A ai:a AGRUPACION_B {: Jugadores jugador = new Jugadores(); jugador.setPlanetas(a); RESULT=jugador; :}
;
    ai ::= COMILLAS ID:a COMILLAS COMA ai:b {: b.add(a.toString()); RESULT=b; :}
    | COMILLAS ID:a COMILLAS ai:b {: b.add(a.toString()); RESULT=b; :}
    | {: RESULT=new ArrayList<>(); :}
;
    al ::= color DOS_PUNTOS COMILLAS COLOR:a COMILLAS {: Jugadores jugador = new Jugadores(); jugador.setColor(a.toString()); RESULT=jugador; :}
;
    ah ::= tipo DOS_PUNTOS FACIL:a {: Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; :}
    | tipo DOS_PUNTOS DIFICIL:a {: Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; :}
    | tipo DOS_PUNTOS HUMANO:a {: Jugadores jugador = new Jugadores(); jugador.setTipo(a.toString()); RESULT=jugador; :}
;