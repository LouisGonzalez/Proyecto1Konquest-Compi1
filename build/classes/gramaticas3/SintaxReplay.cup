package gramaticas3;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Pollitos.ArchivoConfiguracion;
import Pollitos.Mapa;
import Pollitos.Planetas;
import Pollitos.PlanetasNeutrales;
import Pollitos.Jugadores;
import Pollitos.MapaPNeutrales;
import Pollitos.Juego;
import Pollitos.Impactos;
import Pollitos.DatosImpacto;
import Pollitos.NavesCamino;
import Pollitos.Replay;
import Pollitos.ResumenTurno;
import Pollitos.DatosAcciones;
import mapa.CreacionMapa;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.JPanel;

parser code {:

    CreacionMapa tablero;
    ArrayList<Planetas> listPlanetas;
    ArrayList<PlanetasNeutrales> listPlanetasNeutrales;
    ArrayList<Jugadores> listJugadores;
    String planetaNombre;
    JLabel[][] matrizJuego;
    boolean interruptor = true;
    JTextArea panelMensajes;
    public static String totalErrores;
    public Juego misDatos = new Juego();
    private int contador;
    private JTextField txtNaves;
    public ArrayList<Juego> datosJuego;
    public ArrayList<NavesCamino> navesCamino;
    public JButton btnTurno;
    public JPanel panelJuego;
    public JButton btnDistancia;
    public JButton btnFlotas;
    public String nombreJugador = "";
    public Integer noTurno = 0;
    public ArrayList<Replay> listReplay;

    public SintaxReplay(AnalizadorLexico3 lex, CreacionMapa tablero, JTextArea panelMensajes, int contador, JTextField txtNaves, ArrayList<Juego> datosJuego, JButton btnTurno, ArrayList<NavesCamino> listNaves, JPanel panelJuego, JButton btnDistancia, JButton btnFlotas, ArrayList<Replay> listReplay){
        super(lex);
        this.tablero = tablero;
        this.matrizJuego = matrizJuego;
        this.panelMensajes = panelMensajes;
        this.contador = contador;
        this.txtNaves = txtNaves;
        this.datosJuego = datosJuego;
        this.btnTurno = btnTurno;
        this.navesCamino = listNaves;
        this.panelJuego = panelJuego;
        this.btnDistancia = btnDistancia;
        this.btnFlotas = btnFlotas;
        this.listReplay = listReplay;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }
  
    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        totalErrores += "ERROR: Error sintaxis columna: "+s.right+" fila: "+s.left+"\n";
        panelMensajes.setText(totalErrores);
    }


        public void traspasoDatosFlotas(ArrayList<Replay> listReplay, ArrayList<Replay> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listReplay.add(listTemporal.get(i));
        }

    }

  
:}

    terminal VERDADERO, FALSO, LLAVE_A, LLAVE_B, AGRUPACION_A, AGRUPACION_B, DOS_PUNTOS, COMA, PUNTO, COMILLAS,
             MAPA, id, size, alAzar, pNeutrales, mapaCiego, acumular, NEUTRALES, mostrarNaves, mostrarEstadisticas,
             produccion, finalizacion, PLANETAS, nombre, naves, porcMuertes, PLANETAS_NEUTRALES, JUGADORES, planetas,
             tipo, HUMANO, DIFICIL, FACIL, ENTERO, DECIMAL, ID, filas, columnas, color, posX, posY, COLOR, SECUENCIAS,
             TURNO, ACCIONES, Flota, planetaOrigen, planetaDestino, noNaves, noJugadorEnvio, noJugadorAtaque, CONQUISTADO,
             turnoLlegada, verificador, IMPACTOS, navesRestantes, estado, mensaje, estadoJugador, noFlota, VIVO,
             RESUMEN, JUGANDO, FUERA, jugadorAtacante, planetaAtacante;
             
    non terminal inicio, a, a1, a2, p1, p3, p4;

    non terminal Juego juego, q2;
    
    non terminal Mapa d, c, g, e, f, j, h, i, j2, q, k, b;
    
    non terminal Planetas t, s, q3, u, v, w, aj, ak;

    non terminal PlanetasNeutrales am, an, y, q5, z, aa, ab, ac;

    non terminal MapaPNeutrales m, n, o, l, q8;

    non terminal Jugadores ae, q7, af, ag, al, ah;

    non terminal ArrayList<String> ai;

    non terminal ArrayList<Planetas> r, p;

    non terminal ArrayList<PlanetasNeutrales> x, pn;

    non terminal ArrayList<Jugadores> jug, ad;

    non terminal Impactos bq, p7, br, bs, bt, bu, cb, cc;

    non terminal ArrayList<Impactos> bv;

    non terminal ArrayList<DatosImpacto> bp, bf;

    non terminal NavesCamino bg, bh, bi, bj, bk, bl, bm, bn, bo, p5, be;

    non terminal ArrayList<Replay> ba;

    non terminal Replay bb, p2;

    non terminal ArrayList<DatosAcciones> bc, bw;

    non terminal ArrayList<NavesCamino> bd;

    non terminal ResumenTurno bz;
    
    non terminal ArrayList<ResumenTurno> p6, by, bx;

    start with inicio;

    inicio ::= a2
;


     //SINTACTICO REPLAY CASI TERMINADO A FALTA DE LA PARTE RESUMEN PARA INDICAR ESTADO DE LOS JUGADORES




    a2 ::= SECUENCIAS AGRUPACION_A ba:a AGRUPACION_B {:   parser.traspasoDatosFlotas(parser.listReplay, a);         :}
    | SECUENCIAS AGRUPACION_A AGRUPACION_B 
;
    ba ::= TURNO ENTERO:a LLAVE_A bb:b LLAVE_B COMA ba:c {: b.setNoTurno((Integer) a); c.add(b); RESULT=c; :}
    | TURNO ENTERO:a LLAVE_A bb:b LLAVE_B {: b.setNoTurno((Integer) a); ArrayList<Replay> listReplay = new ArrayList<>(); listReplay.add(b); RESULT=listReplay; :}      
;
    bb ::= bc:a bb:e {: if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; :}                   
    | bf:a bb:e {: if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; :}
    | bx:a bb:e {: if(e!=null){ if(e.getListResumen()==null){ e.setListResumen(a); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA p2:a {: RESULT=a; :}
    | {: RESULT=new Replay(); :}                          
;
    p2 ::= bc:a bb:e {: if(e!=null){ if(e.getListAcciones()==null){ e.setListAcciones(a); } else { System.out.println("error"); } } RESULT=e; :}
    | bf:a bb:e {: if(e!=null){ if(e.getListImpactos()==null){ e.setListImpactos(a); } else { System.out.println("error"); } } RESULT=e; :}                                                                         
    | bx:a bb:e {: if(e!=null){ if(e.getListResumen()==null){ e.setListResumen(a); } else { System.out.println("error"); } } RESULT=e; :}
;


    bc ::= ACCIONES LLAVE_A bw:a LLAVE_B {: RESULT=a; :} 
    | ACCIONES LLAVE_A LLAVE_B {: RESULT=new ArrayList<>(); :}
;
    bw ::= ID:a DOS_PUNTOS AGRUPACION_A bd:b AGRUPACION_B bw:c {: DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); c.add(datos); RESULT=c; :}
    | ID:a DOS_PUNTOS AGRUPACION_A bd:b AGRUPACION_B {: DatosAcciones datos = new DatosAcciones(); datos.setNombreJugador(a.toString()); datos.setListNaves(b); ArrayList<DatosAcciones> listAcciones = new ArrayList<>(); listAcciones.add(datos); RESULT=listAcciones; :} 
;
    bd ::= Flota AGRUPACION_A be:a AGRUPACION_B COMA bd:e {: if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { e.add(a); RESULT=e; } :}                           
    | Flota AGRUPACION_A be:a AGRUPACION_B {: if(a.getNoFlota()==null || a.getPlanetaOrigen()==null || a.getPlanetaDestino()==null || a.getNoNaves()==null || a.getNoJugadorEnvio()==null || a.getNoJugadorAtaque()==null || a.getPorcentajeMuertes()==null || a.getTurnoLlegada()==null || a.getVerificador()==null){ System.out.println("ERROR, Falta de un atributo en campo FLOTAS"); } else { ArrayList<NavesCamino> listNaves = new ArrayList<>(); listNaves.add(a); RESULT=listNaves; } :}                                       
;
    be ::= bg:a be:e {: if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; :}
    | bh:a be:e {: if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; :}
    | bi:a be:e {: if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; :}
    | bj:a be:e {: if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; :}
    | bk:a be:e {: if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; :}
    | bl:a be:e {: if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; :}
    | bm:a be:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; :}
    | bn:a be:e {: if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; :}
    | bo:a be:e {: if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA p5:a {: RESULT=a; :}
    | {: RESULT=new NavesCamino(); :}
;
    p5 ::= bg:a be:e {: if(e!=null){ if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); } } RESULT=e; :}
    | bh:a be:e {: if(e!=null){ if(e.getPlanetaOrigen()==null){ e.setPlanetaOrigen(a.getPlanetaOrigen()); } else { System.out.println("error"); } } RESULT=e; :}
    | bi:a be:e {: if(e!=null){ if(e.getPlanetaDestino()==null){ e.setPlanetaDestino(a.getPlanetaDestino()); } else { System.out.println("error"); } } RESULT=e; :}
    | bj:a be:e {: if(e!=null){ if(e.getNoNaves()==null){ e.setNoNaves(a.getNoNaves()); } else { System.out.println("error"); } } RESULT=e; :}
    | bk:a be:e {: if(e!=null){ if(e.getNoJugadorEnvio()==null){ e.setNoJugadorEnvio(a.getNoJugadorEnvio()); } else { System.out.println("error"); } } RESULT=e; :}
    | bl:a be:e {: if(e!=null){ if(e.getNoJugadorAtaque()==null){ e.setNoJugadorAtaque(a.getNoJugadorAtaque()); } else { System.out.println("error"); } } RESULT=e; :}
    | bm:a be:e {: if(e!=null){ if(e.getPorcentajeMuertes()==null){ e.setPorcentajeMuertes(a.getPorcentajeMuertes()); } else { System.out.println("error"); } } RESULT=e; :}
    | bn:a be:e {: if(e!=null){ if(e.getTurnoLlegada()==null){ e.setTurnoLlegada(a.getTurnoLlegada()); } else { System.out.println("error"); }   } RESULT=e; :}
    | bo:a be:e {: if(e!=null){ if(e.getVerificador()==null){ e.setVerificador(a.getVerificador()); } else { System.out.println("error"); } } RESULT=e; :}
;
    bg ::= noFlota DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoFlota((Integer) a); RESULT=naves; :}
;
    bh ::= planetaOrigen DOS_PUNTOS ID:a {: NavesCamino naves = new NavesCamino(); naves.setPlanetaOrigen(a.toString()); RESULT=naves; :}
;
    bi ::= planetaDestino DOS_PUNTOS ID:a {:NavesCamino naves = new NavesCamino(); naves.setPlanetaDestino(a.toString()); RESULT=naves; :}
;
    bj ::= noNaves DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoNaves((Integer) a); RESULT=naves; :}
;
    bk ::= noJugadorEnvio DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoJugadorEnvio((Integer) a); RESULT=naves; :}
;
    bl ::= noJugadorAtaque DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setNoJugadorAtaque((Integer) a); RESULT=naves; :}
;
    bm ::= porcMuertes DOS_PUNTOS DECIMAL:a {: NavesCamino naves = new NavesCamino(); naves.setPorcentajeMuertes(Float.parseFloat(a.toString())); RESULT=naves; :}
;
    bn ::= turnoLlegada DOS_PUNTOS ENTERO:a {: NavesCamino naves = new NavesCamino(); naves.setTurnoLlegada((Integer) a); RESULT=naves; :}
;
    bo ::= verificador DOS_PUNTOS VERDADERO:a {: NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; :} 
    | verificador DOS_PUNTOS FALSO:a {: NavesCamino naves = new NavesCamino(); naves.setVerificador(Boolean.valueOf(a.toString())); RESULT=naves; :} 
;
    bf ::= IMPACTOS LLAVE_A bp:a LLAVE_B {: RESULT=a; :}
    | IMPACTOS LLAVE_A LLAVE_B {: RESULT=new ArrayList<>(); :}
;
    bp ::= ID:a LLAVE_A bv:b LLAVE_B COMA bp:c {: DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString());  datos.setListImpactos(b); c.add(datos); RESULT=c; :}
    | ID:a LLAVE_A bv:b LLAVE_B {: DatosImpacto datos = new DatosImpacto(); datos.setNombreJugador(a.toString()); datos.setListImpactos(b); ArrayList<DatosImpacto> listDatos = new ArrayList<>(); listDatos.add(datos); RESULT=listDatos; :}                                    
; 
    bv ::= ID:c AGRUPACION_A bq:a AGRUPACION_B COMA bv:e {: if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {    a.setNombrePlaneta(c.toString()); e.add(a);   RESULT=e;  }  :}  
    | ID:c AGRUPACION_A bq:a AGRUPACION_B {: if(a.getNavesRestantes()==null || a.getEstado()==null || a.getMensaje()==null || a.getNoFlota()==null){ System.out.println("ERROR, falta de un atributo en IMPACTOS"); } else {  a.setNombrePlaneta(c.toString());  ArrayList<Impactos> listImpactos = new ArrayList<>();  listImpactos.add(a);  RESULT=listImpactos; } :}
;
    bq ::=  br:a bq:e {: if(e!=null){if(e.getNavesRestantes()==null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; :}
    | bs:a bq:e {: if(e!=null){if(e.getEstado()==null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; :}
    | bt:a bq:e {: if(e!=null){if(e.getMensaje()==null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  :}
    | bu:a bq:e {: if(e!=null){if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; :}
    | cb:a bq:e {: if(e!=null){if(e.getJugadorAtacante()==null){ e.setJugadorAtacante(a.getJugadorAtacante()); } else { System.out.println("error"); } } RESULT=e; :}
    | cc:a bq:e {: if(e!=null){if(e.getPlanetaAtacante()==null){ e.setPlanetaAtacante(a.getPlanetaAtacante()); } else { System.out.println("error"); } } RESULT=e; :}
    | COMA p7:a {: RESULT=a; :}
    | {: RESULT=new Impactos(); :}
;
    p7 ::= br:a bq:e {: if(e!=null){if(e.getNavesRestantes()==null){ e.setNavesRestantes(a.getNavesRestantes()); } else { System.out.println("error"); }  } RESULT=e; :}
    | bs:a bq:e {: if(e!=null){if(e.getEstado()==null){ e.setEstado(a.getEstado()); } else { System.out.println("error"); }  } RESULT=e; :}
    | bt:a bq:e {: if(e!=null){if(e.getMensaje()==null){ e.setMensaje(a.getMensaje()); } else { System.out.println("error"); }  } RESULT=e;  :}
    | bu:a bq:e {: if(e!=null){if(e.getNoFlota()==null){ e.setNoFlota(a.getNoFlota()); } else { System.out.println("error"); }  } RESULT=e; :}
    | cb:a bq:e {: if(e!=null){if(e.getJugadorAtacante()==null){ e.setJugadorAtacante(a.getJugadorAtacante()); } else { System.out.println("error"); } } RESULT=e; :}
    | cc:a bq:e {: if(e!=null){if(e.getPlanetaAtacante()==null){ e.setPlanetaAtacante(a.getPlanetaAtacante()); } else { System.out.println("error"); } } RESULT=e; :}
;
    br ::= navesRestantes DOS_PUNTOS ENTERO:a {: Impactos impacto = new Impactos(); impacto.setNavesRestantes((Integer) a); RESULT=impacto; :}
;
    bs ::= estado DOS_PUNTOS VIVO {: Impactos impacto = new Impactos(); impacto.setEstado("VIVO"); RESULT=impacto; :}
    | estado DOS_PUNTOS CONQUISTADO ID:a {: Impactos impacto = new Impactos(); impacto.setEstado(a.toString()); RESULT=impacto; :}
;
    cb ::= jugadorAtacante DOS_PUNTOS ENTERO:a {: Impactos impacto = new Impactos(); impacto.setJugadorAtacante((Integer) a); RESULT=impacto; :}
;
    cc ::= planetaAtacante DOS_PUNTOS ID:a {: Impactos impacto = new Impactos(); impacto.setPlanetaAtacante(a.toString()); RESULT=impacto; :}
;



    bt ::= mensaje DOS_PUNTOS ID:a {: Impactos impacto = new Impactos();  impacto.setMensaje(a.toString()); RESULT=impacto; :}
;
    bu ::= noFlota DOS_PUNTOS ENTERO:a {: Impactos impacto = new Impactos(); impacto.setNoFlota((Integer) a); RESULT=impacto; :}
;
    bx::= RESUMEN LLAVE_A by:a LLAVE_B {: RESULT=a; :}
;
    by ::= bz:a by:e {: e.add(a); RESULT=e; :}
    | COMA p6:a {: RESULT=a; :}      
    | {: RESULT=new ArrayList<>(); :}
;
    p6 ::= bz:a by:e  {: e.add(a); RESULT=e; :}
;
    bz ::= estado ID:b DOS_PUNTOS VERDADERO:a {: ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString());  resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; :}
    | estado ID:b DOS_PUNTOS FALSO:a {: ResumenTurno resumen = new ResumenTurno(); resumen.setNombreJugador(b.toString()); resumen.setEstadoJugador(Boolean.valueOf(a.toString())); RESULT=resumen; :}
;
    





